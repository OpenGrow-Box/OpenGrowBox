[{"id":"3752d27d7587c957","type":"tab","label":"VeggiCtrl","disabled":false,"info":"","env":[]},{"id":"b4216bd866b1924a","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["ccdccc414634ff7d","6348b269079bfa32","82a3c89470307c7b","dd1ef50d40a2e8fa","623fb660cf22ede4","66898e3bde87b1c4","b4ffc7429cc6d314","08f0fa9570535866","243e4dc964a7dbf4","128a30397aed36be","2da69194534ed372","68225790c0cb82bc","b1dbc5b52ddb3d1b","c9b790e0fa1dbc49","80b9933fc37e57a6","8d38db5fb60c01a9","91e45ccb74a35800","9e679a1a5777db44","6225380f219a0d41","18a47541cb144519","8efbc7331afa5d51","157fdad538b46545"],"x":634,"y":39,"w":1322,"h":302},{"id":"d14fa664d0413a5c","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["68a16773bf83b16c","f5fe0d1d1e07c638","f409e7c8d74372fc","95d7e3e76993cfba","2fc57bbeab61d575","d630bdaf19da0309","d12e6221a51af518","01cd46160592fe21","2236e755ab8aaf88","1bb3dfe91ae46289","b0f6711d749c2fd9","d01d126af31e972b","03c00d49f67a6651","a6c380ef2d09a380","eb30bf3343a316af"],"x":1784,"y":1299,"w":782,"h":502},{"id":"6dd36616a92a87a4","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["0a28b21d3b4a4f2b","10975d949b78c673","2afcbf200982e39e","9ac8cca8bbd8cc26","07308f4728d5980a","61d3b1e40e8a29c1","b7f3ca5cd432bab5","df5e74c7f7712579","138c5865040f68a3","a47d72d27f76363f","3c8af30af5e1621b","15554571e89dc2d6","70c88c449da62baf","67864bb87afa5ecf","c07c821dd022801c"],"x":1774,"y":859,"w":772,"h":422},{"id":"2651868e58bb1778","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["38a22324d2ddeb2e","0eca8b29f89f4926","5373a6c3f26af0c7","317e9ec8876608ff","fb9d3843392773d1","d2b8b521e6d704e6","a8254bcb0725889b"],"x":3434,"y":759,"w":702,"h":142},{"id":"8ecdceb2353f84e1","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["2190d00a05105c37","032ae17ffae61c84","64311156e04065be","e67e4105200aba9a","418a4427dfb8d6af","d1ba22a962408cbd","068b8e7a89eef1ba","9ee872c8de807c68","db06e129a47a81f9","9f42bb9bae27290b","a9ce176894e4219e","297a909f94262fbd"],"x":3434,"y":459,"w":1052,"h":262},{"id":"fb83b7a26af05fdc","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["b15af587e5fdd218","0249561a3fec1f56","4514863886914953","fa1ac2acc7e0b33d","d6870c9a6b9ceba0","ad4ab75f382b18f8","7cea495731d0be12"],"x":2034,"y":79,"w":992,"h":182},{"id":"d634b49c93972c8c","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["f0d2d59e9fb71a11","695c16207afdcdaa","4f8602da2d439cb1","ccb808bba5fe34af","1fc079df5d0649cc","795027dc6079bbcd","9e528fbb25e69fba"],"x":3434,"y":1099,"w":792,"h":162},{"id":"082054cd4a9a0dc1","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["2fe236b6ecf4be1a","548fd1b0ea533144","dec304f413eef635","1c021da55d25e11a","7fda7edaf7e5818c","4c6249a89c9f8505","d204071a89b51356"],"x":3434,"y":1299,"w":722,"h":162},{"id":"ecb02d38c4118377","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["f81d8c962ee7f1d5","9743d50e741ac49e","ba354dc96e68c583","09de5509dbd47ef7","fa4182f14e046b55","3905f327349462e9","9137501bc6555693"],"x":3434,"y":919,"w":742,"h":162},{"id":"2f16034c5088356b","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["2f7f44cc5475aa9e","a0b3236b810a1d68","89b4bb0beb9173d1","b41b4e4f56a8bfdd","97bb26a5c0f5bb2b","50586f7873597b1b","d8ca44ad455dbdcc","b4d17b12450acac5","792c2d12847b3c30","f67b812477b0ee36","b418161007dfaaea","a41d99da1a516c1a","cf371755340339d9","f2dbe7f4fc63732c","944e631d1a25585e","0146bdd163646e65","c75be806c71aae08"],"x":1764,"y":399,"w":792,"h":442},{"id":"077c0666ef9f39f6","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["c97d86f4eb3827ad","bcc5756283e66c56","db64f19844a45a25","825ed8cac87f6ba8","f58811e4189b45cc","3084915b3c3153eb","228540ed8dcab290","95ed2ef55d637d57","44c482979d3323d4","fba3fd82020bcd3e"],"x":2574,"y":419,"w":542,"h":322},{"id":"b377a7d2d8154846","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["18cbb2d076da7f4e","25559f8f74dbacc5","edf09569bc23fb4f","b4d4b90fe3a6ec9c","01b7df04eed13a74","72f5c3bdfb3190bc","533b7f798734327f","8670816afac14164","d952d70aed5c4421","2e2215015fc0b3bd","74627de8274cdc7c","e51b97599d8ebb10"],"x":3434,"y":159,"w":1192,"h":262},{"id":"833c4f15fec98408","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["9309ba9f15bdd552","c91e1e1018209c58"],"x":3428,"y":1593,"w":834,"h":394},{"id":"fcf3c31407539ca6","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["61d447a8dd2039a2","883e53c619710a5c","d63dfedba31e6c03","d667e426b36be2c9","03170a055dee0c18","bb53d025f4d0e3fa","b0d376be03892225","71bbf76e3992257f","b2cb416cb6617c7b","3f02c178f632f85b","921cb4af51950c56","0a775ad93eb0201a","32558d701303ef20","c3cdc89fea6e66dd","0b48f34fdeeadbd4","09388aae1c81e85e","502bf442461b61cd","42ab596fae23920e","a968aa9eccbf2d79","409a33744f657fd1","2ec8b29e881e1150","20ed8422cf5c2d23","41834d3741e6a772","1124f430fe2c02cc","d062b4edfee7bd40","81252048b9753437","174996762a37d6ac","1cba63e6b0ed1282","ec6f92f6a77bd82b"],"x":768,"y":339,"w":938,"h":1308},{"id":"9309ba9f15bdd552","type":"group","z":"3752d27d7587c957","g":"833c4f15fec98408","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["15db15c7e2de4370","f8f91e027dfc8333","13559ea87af327af","bda808f336509948","64e65d877d2f6338","61af123542cf6443","fbba94c4d9cbdadb","cc32bf965e21b62c"],"x":3454,"y":1799,"w":782,"h":162},{"id":"c91e1e1018209c58","type":"group","z":"3752d27d7587c957","g":"833c4f15fec98408","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["bf178d140cd3a947","0970ba51c7fda08e","b05f07a1e755da48","dad47ea322ec8b37","28c6b5d7d65acfac","bc2bedc4446fe072","38358691bf1511a9","7968566b6c484c08"],"x":3454,"y":1619,"w":762,"h":162},{"id":"1cba63e6b0ed1282","type":"group","z":"3752d27d7587c957","g":"fcf3c31407539ca6","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["54915a0b42cbb531","b5493a3f55459205","9f481796c50b24ca","f84213a3ac3c506d","eed4272deb53836f","063773e3770ed023","0045e4e34e996967","bb4422cb843fa184","55581d4b6f9bb716","836058dea98edfbb","1b2af9e442403c55","c2dafe1ccb11a237"],"x":794,"y":1239,"w":712,"h":382},{"id":"4699a341c0e525a1","type":"junction","z":"3752d27d7587c957","x":340,"y":80,"wires":[["a02e58aa1b5be4d9"]]},{"id":"d6b7596272b92fd6","type":"junction","z":"3752d27d7587c957","x":340,"y":120,"wires":[["d0fa75ce32c2b2ec","157fdad538b46545"]]},{"id":"a8d42f450f5ec3bf","type":"junction","z":"3752d27d7587c957","x":340,"y":160,"wires":[["37a0cd0ecce69585","157fdad538b46545"]]},{"id":"82b3968d5e1d0b1a","type":"junction","z":"3752d27d7587c957","x":340,"y":200,"wires":[["b01cc8b798cf40db"]]},{"id":"716d0ea3761ab229","type":"junction","z":"3752d27d7587c957","x":340,"y":240,"wires":[["a0b65bcedc96a0fe","d667e426b36be2c9"]]},{"id":"1beade2ff5ca5212","type":"junction","z":"3752d27d7587c957","x":340,"y":320,"wires":[["38cd4d82cd0fd287","03170a055dee0c18"]]},{"id":"3b25550daaa0d938","type":"junction","z":"3752d27d7587c957","x":340,"y":360,"wires":[["6e29c36400302613","d63dfedba31e6c03"]]},{"id":"628eb0efdd45d47f","type":"junction","z":"3752d27d7587c957","x":340,"y":400,"wires":[["eb850d44242cc6c6","883e53c619710a5c"]]},{"id":"02199cb92b1a3f32","type":"junction","z":"3752d27d7587c957","x":340,"y":440,"wires":[["3b9ddcea592dfa6c","09388aae1c81e85e"]]},{"id":"455ed3c6930adfe0","type":"junction","z":"3752d27d7587c957","x":340,"y":280,"wires":[["42ff7b7243adac0b","71bbf76e3992257f"]]},{"id":"edeead31dd6a80b8","type":"junction","z":"3752d27d7587c957","x":340,"y":540,"wires":[["c82ef6e4f9fa3159","bb53d025f4d0e3fa"]]},{"id":"7e5df50c6683b600","type":"junction","z":"3752d27d7587c957","x":340,"y":760,"wires":[["89391fcf7fa2d9dc","669616aead0ef19f","2ec8b29e881e1150"]]},{"id":"bd65fa0bcf194b27","type":"junction","z":"3752d27d7587c957","x":340,"y":720,"wires":[["65ac2cfaa7ba045c","49c6e2de0f1b0630"]]},{"id":"724dfeb83c172e7d","type":"junction","z":"3752d27d7587c957","x":340,"y":680,"wires":[["fea31e55b74e768b","e52f426c3a45d473","b2cb416cb6617c7b"]]},{"id":"3aa5bb36956938c6","type":"junction","z":"3752d27d7587c957","x":340,"y":640,"wires":[["cab823730c4a70a7","5f82452669bf7cb1"]]},{"id":"8c0773acdba0ce48","type":"junction","z":"3752d27d7587c957","x":340,"y":600,"wires":[["472539b957b3d55c","2d1d43cca2adc804"]]},{"id":"85a703016b798065","type":"junction","z":"3752d27d7587c957","x":340,"y":500,"wires":[["c8ac68f99c237d2c","b0d376be03892225"]]},{"id":"7c35ebcfdd9a14f4","type":"junction","z":"3752d27d7587c957","x":340,"y":800,"wires":[["f7adc2a82d261c1c","53744e9d23f8df14","174996762a37d6ac"]]},{"id":"856cb32d12870716","type":"junction","z":"3752d27d7587c957","x":340,"y":840,"wires":[["406716c4908964f0","9cebbdc13963270f","81252048b9753437"]]},{"id":"aca8b2391f7c4b40","type":"junction","z":"3752d27d7587c957","x":340,"y":880,"wires":[["b5f61a40cd90bf16","f3a93cd22e692bd5","54915a0b42cbb531"]]},{"id":"a34b894b03b36458","type":"link in","z":"3752d27d7587c957","name":"VeggiLiveData","links":["e84242346557dbcb"],"x":35,"y":60,"wires":[["0b3cb88f4a5201ce","ff0f10e0360a6aef"]]},{"id":"0b3cb88f4a5201ce","type":"debug","z":"3752d27d7587c957","name":"VeggiLiveData","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":200,"y":60,"wires":[]},{"id":"8c9088a88c067085","type":"link in","z":"3752d27d7587c957","name":"VeggiCtrl","links":["094a8eca640c4e2d","96234401e3328f98"],"x":35,"y":20,"wires":[["c9ccfd1214ea1094"]]},{"id":"c9ccfd1214ea1094","type":"debug","z":"3752d27d7587c957","name":"VegiTentData","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":130,"y":20,"wires":[]},{"id":"ccdccc414634ff7d","type":"ha-sensor","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"currentVPD","entityConfig":"5de3d083be69c9ff","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1450,"y":120,"wires":[["c9b790e0fa1dbc49"]]},{"id":"6348b269079bfa32","type":"ha-sensor","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VegiAVGTemp","entityConfig":"fbd2ef51e597d808","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1240,"y":160,"wires":[["8d38db5fb60c01a9"]]},{"id":"82a3c89470307c7b","type":"ha-sensor","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VegiAVGHum","entityConfig":"c918d481d80ee2dc","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1240,"y":220,"wires":[["8d38db5fb60c01a9"]]},{"id":"dd1ef50d40a2e8fa","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VPD Calc ","func":"function calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit) {\n    // Stellen Sie sicher, dass alle Eingaben Zahlen sind\n    luftTemperatur = parseFloat(luftTemperatur);\n    blattTemperatur = parseFloat(blattTemperatur);\n    relativeLuftfeuchtigkeit = parseFloat(relativeLuftfeuchtigkeit);\n\n    // Überprüfen Sie, ob einer der Werte NaN ist\n    if (isNaN(luftTemperatur) || isNaN(blattTemperatur) || isNaN(relativeLuftfeuchtigkeit)) {\n        return NaN; // Geändert von \"unavailable\" zu NaN für bessere Handhabung in numerischen Berechnungen\n    }\n\n    // Berechnungen ohne Rundung\n    let sdpLuft = 0.6108 * Math.exp((17.27 * luftTemperatur) / (luftTemperatur + 237.3));\n    let sdpBlatt = 0.6108 * Math.exp((17.27 * blattTemperatur) / (blattTemperatur + 237.3));\n    let adp = (relativeLuftfeuchtigkeit / 100) * sdpLuft;\n    let vpd = sdpBlatt - adp;\n\n    // Rückgabe als number, nicht als string\n    return parseFloat(vpd.toFixed(2));\n}\n\n// Beispiel für die Verwendung der Funktion\nlet luftTemperatur = parseFloat(msg.payload.AvgData.AvgTempData); // Stellen Sie sicher, dass dies eine Zahl ist\nlet blattTemperatur = parseFloat(msg.payload.AvgData.AvgTempData) - parseFloat(msg.payload.LeafOffSet); // Keine Rundung, genaue Berechnung\nlet relativeLuftfeuchtigkeit = parseFloat(msg.payload.AvgData.AvgHumData); // Stellen Sie sicher, dass dies eine Zahl ist\n\nlet vpd = calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit);\n\nmsg.payload = vpd; // Nun ist msg.payload eine Zahl\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1280,"y":120,"wires":[["ccdccc414634ff7d"]]},{"id":"623fb660cf22ede4","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"Calc-AVG","func":"// Funktion zur Berechnung des Durchschnitts\nconst AvgTemp = (temps) => {\n    let sum = 0;\n    let count = 0;\n\n    temps.forEach((entry) => {\n        const temp = parseFloat(entry.value);\n        if (!isNaN(temp)) {\n            sum += temp;\n            count++;\n        }\n    });\n\n    if (count === 0) {\n        return \"unavailable\";\n    }\n\n    const avg = sum / count;\n    return avg.toFixed(2);\n};\n\n// Durchschnittstemperatur für jede Temperaturkategorie berechnen\nconst temperatureAvg = AvgTemp(msg.payload.temperature);\nconst humidityAvg = AvgTemp(msg.payload.humidity);\n\n// Objekt mit den Durchschnittswerten erstellen\nconst avgData = {\n    AvgTempData: temperatureAvg,\n    AvgHumData: humidityAvg\n};\n\n// Nachrichten erstellen und zurückgeben\nconst avgDataMsg = { payload: avgData, topic: \"AvgData\" };\nconst tempMsg = { payload: temperatureAvg, topic: \"AvgTemp\" };\nconst humMsg = { payload: humidityAvg, topic: \"AvgHum\" };\n\nreturn [avgDataMsg, tempMsg, humMsg];\n","outputs":3,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":940,"y":140,"wires":[["9e679a1a5777db44"],["6348b269079bfa32"],["82a3c89470307c7b"]]},{"id":"66898e3bde87b1c4","type":"comment","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VPD-Creation","info":"","x":1150,"y":80,"wires":[]},{"id":"b4ffc7429cc6d314","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"TentModesSetup","func":"// Initialisiert das Array für die Ausgänge mit Nullen\nlet outputs = [null, null, null, null, null ];\n\n// Überprüft den Zustand des eingehenden Payloads und setzt den entsprechenden Ausgang\nif (msg.payload === \"VPD Perfection\") {\n    return [{ payload: msg.payload, topic: \"Perfection\" }, null, null, null,null];\n}\nelse if (msg.payload === \"IN-VPD-Range\") {\n    return [null, { payload: msg.payload, topic: \"AutoAvgVPD\" }, null, null, null];\n}\nelse if (msg.payload === \"Targeted VPD\") {\n    return [null, null, { payload: msg.payload, topic: \"TargetedVPD\" }, null, null];\n}\nelse if (msg.payload === \"CropSteering\") {\n    return [null, null, null, { payload: msg.payload, topic: \"ModeDisabeld\" }, null ];\n}\nelse if (msg.payload === \"Disabled\") {\n    return [null, null, null, null, { payload: msg.payload, topic: \"ModeDisabeld\" }];\n}\n\n// Wenn keine Bedingungen zutreffen, sendet nichts\nreturn [null, null, null, null,null];\n","outputs":5,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1770,"y":200,"wires":[["128a30397aed36be"],["2da69194534ed372"],["68225790c0cb82bc"],["8efbc7331afa5d51"],["08f0fa9570535866"]]},{"id":"08f0fa9570535866","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"DISABLED AUTO","func":"msg.payload=\"DISABLED VEGGI\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1770,"y":260,"wires":[["243e4dc964a7dbf4"]]},{"id":"243e4dc964a7dbf4","type":"debug","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"debug 123","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1770,"y":300,"wires":[]},{"id":"128a30397aed36be","type":"link out","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VPD-Perfektion","mode":"link","links":["a0b3236b810a1d68"],"x":1915,"y":140,"wires":[]},{"id":"2da69194534ed372","type":"link out","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"IN-Range-VPD","mode":"link","links":["7e18ed0416316f92","10975d949b78c673"],"x":1915,"y":180,"wires":[]},{"id":"68225790c0cb82bc","type":"link out","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"TargetedVPD","mode":"link","links":["474c1b1dab6d9b7f","4a116bed2a39fb84","f409e7c8d74372fc"],"x":1915,"y":220,"wires":[]},{"id":"b1dbc5b52ddb3d1b","type":"comment","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"TentModes","info":"","x":1800,"y":140,"wires":[]},{"id":"c9b790e0fa1dbc49","type":"api-current-state","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"TentMode","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"select.vegitentmodes","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"TentMode","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1620,"y":120,"wires":[["b4ffc7429cc6d314"]]},{"id":"bcc5756283e66c56","type":"join","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"perfektion","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":2670,"y":540,"wires":[["db64f19844a45a25"]]},{"id":"db64f19844a45a25","type":"function","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"Make Perfekt VPD","func":"const tolerance = 0.025; // Toleranzwert für die VPD-Anpassung\n\n// Berechnet den durchschnittlichen Wert aus zwei Zahlen im Array VPDStageValue und begrenzt das Ergebnis auf zwei Dezimalstellen\nconst averageVPD = (msg.payload.VPDStageValue[0] + msg.payload.VPDStageValue[1]) / 2;\nconst perfectVPD = parseFloat(averageVPD.toFixed(3));\n\nconst currentVPD = parseFloat(msg.payload.currentVPD);\n\n// Build increase base of State % diffrence from Current VPD to avarangeVPD\n// Berechnung der prozentualen Abweichung vom Ziel-VPD\nconst percentDifference = ((currentVPD - perfectVPD) / perfectVPD) * 100;\n\n\n\n// IF not in Range Do Nothing\nif (currentVPD < msg.payload.VPDStageValue[0] || currentVPD > msg.payload.VPDStageValue[1]){\n    return\n}\n// Warnung über die prozentuale Abweichung\nnode.warn(`Perfect-VEGGI % : ${percentDifference.toFixed(2)}%`);\nnode.warn(`Perfect-Veggi-Current VPD: ${currentVPD}`);\nnode.warn(`Perfect-Veggi-Target-VPD: ${perfectVPD} with ${tolerance} Tolerance`);\n\n\n\n// Funktion zur Berechnung der notwendigen Anpassungen basierend auf der Differenz zum VPD-Zielbereich.\nfunction calculateAdjustment(currentVPD, perfectVPD) {\n    // Wenn der aktuelle VPD unter dem minimalen Zielbereich liegt, Anpassungen vornehmen, um VPD zu erhöhen.\n    if (currentVPD < perfectVPD - tolerance) {\n        node.warn(`Perfect-Veggi-VPD:: ${currentVPD} zu Gering Erhöe Temp oder veringere die Feuchtikeit`);\n        return {\n            exhaustSpeed: \"increased\",      // Erhöht die Abluftgeschwindigkeit, um feuchte Luft herauszuziehen\n            humidifier: \"reduced\",          // Schaltet den Luftbefeuchter aus, um Feuchtigkeit zu reduzieren\n            dehumidifier: \"increased\",       // Schaltet den Luftentfeuchter an, um Feuchtigkeit zu reduzieren\n            heaterFan: \"increased\",            // Schaltet den Beheizer an um, um die feuchtigkeit zu Reduzieren und Temp zu erhöhen\n            coolerFan: \"reduced\",            // Schaltet den Beheizer an um, um die feuchtigkeit zu Erhöhen und Temp zu veringern\n            ventsTopSpeed: \"increased\",     // Erhöht die Geschwindigkeit der oberen Belüftung, um mehr trockene Luft einzulassen\n            ventsDownSpeed: \"increased\",    // Erhöht die Geschwindigkeit der unteren Belüftung\n            lightIntensity: \"increased\"     // Erhöht die Lichtintensität, um die Temperatur zu steigern (wenn das die Temperatur beeinflusst)\n        };\n        \n    }\n    // Wenn der aktuelle VPD über dem maximalen Zielbereich liegt, Anpassungen vornehmen, um VPD zu senken.\n    else if (currentVPD > perfectVPD + tolerance) {\n        node.warn(`Perfect-Veggi-VPD: ${currentVPD} zu hoch verringere Temp oder erhöe die Feuchtikeit`);\n        return {\n            exhaustSpeed: \"reduced\",    // Reduziert die Abluftgeschwindigkeit, hält feuchte Luft im Raum\n            humidifier: \"increased\",           // Schaltet den Luftbefeuchter ein, um Feuchtigkeit zu erhöhen\n            dehumidifier: \"reduced\",       // Schaltet den Luftentfeuchter an, um Feuchtigkeit zu reduzieren\n            heaterFan: \"reduced\",            // Schaltet den Beheizer an um, um die feuchtigkeit zu Reduzieren und Temp zu erhöhen\n            coolerFan: \"increased\",            // Schaltet den Beheizer an um, um die feuchtigkeit zu Erhöhen und Temp zu veringern\n            ventsTopSpeed: \"reduced\",   // Reduziert die Geschwindigkeit der oberen Belüftung\n            ventsDownSpeed: \"reduced\",  // Reduziert die Geschwindigkeit der unteren Belüftung\n            lightIntensity: \"reduced\"      // Verringert die Lichtintensität, um die Temperatur zu senken (wenn das die Temperatur beeinflusst)\n        };\n    }\n    // Wenn der VPD im Zielbereich liegt, sind keine Anpassungen erforderlich.\n             node.warn(`Perfect-Veggi-VPD: ${currentVPD} im Gewünschten Bereich`);\n    return {\n        exhaustSpeed: \"unchanged\",\n        humidifier: \"unchanged\",\n        dehumidifier: \"unchanged\",       // Schaltet den Luftentfeuchter an, um Feuchtigkeit zu reduzieren\n        heaterFan: \"unchanged\",            // Schaltet den Beheizer an um, um die feuchtigkeit zu Reduzieren und Temp zu erhöhen\n        coolerFan: \"unchanged\",            // Schaltet den Beheizer an um, um die feuchtigkeit zu Erhöhen und Temp zu veringern\n        ventsTopSpeed: \"unchanged\",\n        ventsDownSpeed: \"unchanged\",\n        lightIntensity: \"unchanged\"\n    };\n}\n\n// Entscheidungslogik zur Steuerung der Umgebungsbedingungen, nutzt die calculateAdjustment Funktion.\nconst adjustments = calculateAdjustment(currentVPD, perfectVPD);\nmsg.payload = {\n    exhaustSpeed: adjustments.exhaustSpeed,\n    humidifier: adjustments.humidifier,\n    dehumidifier: adjustments.dehumidifier,\n    heaterFan: adjustments.heaterFan,\n    coolerFan: adjustments.coolerFan,\n    ventsTopSpeed: adjustments.ventsTopSpeed,\n    ventsDownSpeed: adjustments.ventsDownSpeed,\n    lightIntensity: adjustments.lightIntensity,\n    percentDifference: percentDifference.toFixed(2)\n};\nmsg.perfektion = \"VPDActions\"\n\n// Rückgabe des modifizierten Payloads für weitere Verwendung im Flow.\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2690,"y":580,"wires":[["c97d86f4eb3827ad"]]},{"id":"c97d86f4eb3827ad","type":"function","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"Check What Do","func":"let outputs = [null, null, null, null, null, null, null, null, null];\n\nvar percentDifference = msg.payload.percentDifference\n\n// Abluft\nif (msg.payload.exhaustSpeed === \"unchanged\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n} else if (msg.payload.exhaustSpeed === \"increased\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n} else if (msg.payload.exhaustSpeed === \"reduced\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n}\n\n// Humidifier\nif (msg.payload.humidifier === \"unchanged\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n} else if (msg.payload.humidifier === \"increased\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n} else if (msg.payload.humidifier === \"reduced\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n}\n\n// Dehumidifier\nif (msg.payload.dehumidifier === \"unchanged\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n} else if (msg.payload.dehumidifier === \"increased\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n} else if (msg.payload.dehumidifier === \"reduced\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n}\n\n// HeaterFan\nif (msg.payload.heaterFan === \"unchanged\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n} else if (msg.payload.heaterFan === \"increased\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n} else if (msg.payload.heaterFan === \"reduced\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n}\n\n// CoolerFan\nif (msg.payload.coolerFan === \"unchanged\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n} else if (msg.payload.coolerFan === \"increased\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n} else if (msg.payload.coolerFan === \"reduced\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n}\n\n// LightIntensity\nif (msg.payload.lightIntensity === \"unchanged\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n} else if (msg.payload.lightIntensity === \"increased\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n} else if (msg.payload.lightIntensity === \"reduced\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n}\n\n// VentsALL\nif (msg.payload.ventsTopSpeed === \"unchanged\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n} else if (msg.payload.ventsALL === \"increased\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n} else if (msg.payload.ventsALL === \"reduced\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n}\n\n// VentsTopSpeed\nif (msg.payload.ventsTopSpeed === \"unchanged\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n} else if (msg.payload.ventsTopSpeed === \"increased\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n} else if (msg.payload.ventsTopSpeed === \"reduced\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n}\n\n// VentsDownSpeed\nif (msg.payload.ventsDownSpeed === \"unchanged\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n} else if (msg.payload.ventsDownSpeed === \"increased\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n} else if (msg.payload.ventsDownSpeed === \"reduced\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n}\n\n\n\nreturn outputs;\n","outputs":9,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2900,"y":600,"wires":[["825ed8cac87f6ba8"],["f58811e4189b45cc"],["3084915b3c3153eb"],["228540ed8dcab290"],["95ed2ef55d637d57"],["44c482979d3323d4"],["fba3fd82020bcd3e"],["fba3fd82020bcd3e"],["fba3fd82020bcd3e"]]},{"id":"0a28b21d3b4a4f2b","type":"comment","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"IN-RANGE-VPD","info":"","x":1880,"y":900,"wires":[]},{"id":"68a16773bf83b16c","type":"comment","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"Targeted-VPD","info":"","x":1890,"y":1340,"wires":[]},{"id":"e52f426c3a45d473","type":"link out","z":"3752d27d7587c957","name":"ExhaustData","mode":"link","links":["155cb7e4a436ab9f","f9d66aa02cde8cbc","418a4427dfb8d6af","44d0938e5407b630","cfee122ef13568d8","38dec2c32136830f","4c2f7e58d2747c89"],"x":575,"y":680,"wires":[]},{"id":"2190d00a05105c37","type":"function","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"Exhaust Setup","func":"// Hilfsfunktion zur Überprüfung, ob ein Wert numerisch ist\nconst isNumeric = (value) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n\n// Funktion zur Bestimmung des dutyCycle-Werts\nconst findDutyCycle = (exhaustArray) => {\n    if (exhaustArray.length === 0) {\n        return null; // Keine Werte zu verarbeiten, wenn das Array leer ist\n    }\n    for (let i = 0; i < exhaustArray.length; i++) {\n        if (isNumeric(exhaustArray[i].value)) {\n            return parseInt(exhaustArray[i].value, 10);\n        }\n    }\n    return null; // Falls kein numerischer Wert gefunden wurde\n};\n\nlet outputs = [null, null, null, null]; // Array für vier Ausgänge\n\n// Zustand der Abluft und Geschwindigkeit aus der Payload extrahieren\nconst exhaustSpeed = msg.payload.exhaustSet.value; // Anpassung hier\nlet exhaustState = 'off'; // Standardwert setzen, falls kein Zustand gefunden wird\nif (msg.payload.Exhaust && msg.payload.Exhaust.length > 0) {\n    const exhaustSwitch = msg.payload.Exhaust.find(e => e.entity_id && e.entity_id.toLowerCase().includes(\"switch\"));\n    if (exhaustSwitch && exhaustSwitch.value) {\n        exhaustState = exhaustSwitch.value;\n    }\n}\n\nconst dutyCycle = findDutyCycle(msg.payload.Exhaust) || 0 ;\n\n// Prüfen, ob ein dutyCycle vorhanden ist\nif (dutyCycle === null) {\n    return outputs; // Kein dutyCycle gefunden, keine Aktion erforderlich\n}\n\nconst percentDifference = parseFloat(msg.payload.exhaustSet.percentDifference);\nlet newDutyCycle = dutyCycle;\n\n// Berechnung des neuen Duty Cycle basierend auf der prozentualen Abweichung\nif (percentDifference !== 0) {\n    if (percentDifference < 0) {\n        // Wenn der Wert negativ ist, erhöhen wir den Duty Cycle\n        newDutyCycle = dutyCycle + Math.abs(percentDifference);\n    } else {\n        // Wenn der Wert positiv ist, verringern wir den Duty Cycle\n        newDutyCycle = dutyCycle - percentDifference;\n    }\n\n    // Stellen Sie sicher, dass der neue Duty Cycle innerhalb der Grenzen liegt\n    newDutyCycle = Math.min(95, Math.max(10, Math.round(newDutyCycle)));\n}\n\n// Abluft starten auf dem ersten Ausgang, wenn sie aus ist und erhöht werden muss\nif (exhaustSpeed === \"increased\" && exhaustState === \"off\") {\n    outputs[0] = { payload: \"Starte Abluft\", topic: \"Start\" };\n    return outputs;\n}\n\n// Abluft-Geschwindigkeit erhöhen, wenn sie bereits eingeschaltet ist\nif (exhaustSpeed === \"increased\" && exhaustState === \"on\") {\n    outputs[2] = { payload: newDutyCycle.toString(), topic: \"Increase\" };\n    return outputs;\n}\n\n// Abluft stoppen auf dem zweiten Ausgang, wenn die Geschwindigkeit reduziert wird und der Duty Cycle sehr niedrig ist\nif (exhaustSpeed === \"reduced\" && exhaustState === \"on\" && newDutyCycle <= 10) {\n    outputs[1] = { payload: \"Stoppe Abluft\", topic: \"Stop\" };\n    return outputs;\n} else if (exhaustSpeed === \"reduced\" && exhaustState === \"on\") {\n    outputs[2] = { payload: newDutyCycle.toString(), topic: \"Decrease\" };\n    return outputs;\n}\n\n// Warnung ausgeben, wenn versucht wird, die Abluftgeschwindigkeit zu reduzieren, obwohl sie bereits aus ist\nif (exhaustSpeed === \"reduced\" && exhaustState === \"off\") {\n    outputs[1] = { payload: \"Abluft bereits gestoppt, kann nicht weiter reduziert werden\", topic: \"AlreadyStopped\" };\n    return outputs;\n}\n\n// Nichts tun, wenn keine Änderung erforderlich ist\nif (exhaustSpeed === \"unchanged\") {\n    outputs[3] = { payload: \"Abluft unverändert, keine Aktion erforderlich\", topic: \"Nothing\" };\n    return outputs;\n}\n\nreturn outputs; // Rückgabe des Ausgangsarrays\n","outputs":4,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3920,"y":600,"wires":[["9ee872c8de807c68","d1ba22a962408cbd"],["9ee872c8de807c68","068b8e7a89eef1ba"],["64311156e04065be","9ee872c8de807c68"],["9ee872c8de807c68"]]},{"id":"032ae17ffae61c84","type":"http request","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"DutyPostChange","method":"POST","ret":"txt","paytoqs":"ignore","url":"http://10.1.1.235:5533/air/ctrl","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"Content-Type","valueType":"other","valueValue":"application/json"}],"x":4370,"y":620,"wires":[[]]},{"id":"64311156e04065be","type":"function","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"DutyChanger","func":"\nconst NewDuty = msg.payload\n\nmsg.payload = { \"newDuty\": NewDuty}\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":4130,"y":620,"wires":[["032ae17ffae61c84"]]},{"id":"49c6e2de0f1b0630","type":"link out","z":"3752d27d7587c957","name":"Humidifier","mode":"link","links":["209b5f3139ea01b4","6f8118f3fa861377","5373a6c3f26af0c7","741c0ac411bcbcec","35533e64c19a08ec","8c9e965122e60702","7e0384d9297a7e91"],"x":575,"y":720,"wires":[]},{"id":"e67e4105200aba9a","type":"join","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"exhasutData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":3720,"y":680,"wires":[["2190d00a05105c37","9ee872c8de807c68","db06e129a47a81f9"]]},{"id":"418a4427dfb8d6af","type":"link in","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"ExhasutData","links":["e52f426c3a45d473"],"x":3655,"y":620,"wires":[["e67e4105200aba9a"]]},{"id":"38a22324d2ddeb2e","type":"function","z":"3752d27d7587c957","g":"2651868e58bb1778","name":"BefeuchterSetup","func":"let outputs = [null, null, null];\n\nlet humidifierState = null;\n\n// Schleife, um den Zustand des Befeuchters zu finden\nfor (let i = 0; i < msg.payload.humidifier.length; i++) {\n    if (msg.payload.humidifier[i].entity_id.includes('humidifier')) {\n        humidifierState = msg.payload.humidifier[i].value;\n        break;\n    }\n}\n\n// Befeuchter starten\nif (msg.payload.humidifierSet.value === \"increased\" && humidifierState === \"off\") {\n    outputs[0] = { payload: \"Starte Befeuchter\", topic: \"Start\" };\n}\n\n// Befeuchter stoppen\nif (msg.payload.humidifierSet.value === \"reduced\" && humidifierState === \"on\") {\n    outputs[1] = { payload: \"Stoppe Befeuchter\", topic: \"Stop\" };\n}\n\n// Nichts tun oder ausschalten bei unverändertem Zustand\nif (msg.payload.humidifierSet.value === \"unchanged\") {\n    if (humidifierState === \"on\") {\n        // Wenn der Befeuchter im Zelt an ist und kein Wechsel angefordert wird, sende \"off\"\n        outputs[0] = { payload: \"off\", topic: \"Humidifier\" };\n    } else {\n        // Wenn der Befeuchter bereits aus ist oder nicht geändert werden soll\n        outputs[1] = { payload: \"Humidifier already stopped, nothing to do! Waiting for changes.\", topic: \"Humidifier\" };\n    }\n}\n\n// Nichts tun (detaillierte Information)\nif (msg.payload.humidifierSet.value === \"unchanged\" && humidifierState !== \"on\" && humidifierState !== \"off\") {\n    outputs[2] = { payload: \"Befeuchter unverändert, keine Aktion erforderlich\", data: msg.payload, topic: \"Nothing\" };\n}\n\nreturn outputs; // Rückgabe des Ausgangsarrays\n","outputs":4,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3890,"y":840,"wires":[["fb9d3843392773d1"],["d2b8b521e6d704e6"],["317e9ec8876608ff"],[]]},{"id":"0eca8b29f89f4926","type":"join","z":"3752d27d7587c957","g":"2651868e58bb1778","name":"HumidityData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":3660,"y":860,"wires":[["38a22324d2ddeb2e"]]},{"id":"5373a6c3f26af0c7","type":"link in","z":"3752d27d7587c957","g":"2651868e58bb1778","name":"HumidifierData","links":["49c6e2de0f1b0630"],"x":3595,"y":800,"wires":[["0eca8b29f89f4926"]]},{"id":"10975d949b78c673","type":"link in","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"VPD-Perfektion","links":["2da69194534ed372"],"x":1825,"y":960,"wires":[["df5e74c7f7712579"]]},{"id":"2afcbf200982e39e","type":"function","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"VPD State Values","func":"const plantStages = {\n    Germination: [0.42, 0.78], // Optimaler VPD-Bereich für Keimung bei 25-30°C\n    Clones: [0.42, 0.78],      // Optimaler VPD-Bereich für Klone bei 25-30°C\n    EarlyVeg: [0.55, 0.85],    // Optimaler VPD-Bereich für frühe Vegetation bei 20-25°C\n    MidVeg: [0.85, 1.1],      // Optimaler VPD-Bereich für mittlere Vegetation bei 20-25°C\n    LateVeg: [0.85, 1.2],     // Optimaler VPD-Bereich für späte Vegetation bei 20-25°C\n    EarlyFlower: [1, 1.25], // Optimaler VPD-Bereich für frühe Blüte bei 20-25°C\n    MidFlower: [1.1, 1.4],   // Optimaler VPD-Bereich für mittlere Blüte bei 20-25°C\n    LateFlower: [1.2, 1.6],  // Optimaler VPD-Bereich für späte Blüte bei 20-25°C\n};\n\n\n\n// Beispiel, wie msg.payload gesetzt wird\n// msg.payload = \"LateVeg\"; // Kommentieren Sie diese Zeile aus, um den tatsächlichen msg.payload zu verwenden\n\n// Prüfen, ob das Wachstumsstadium im plantStages-Objekt vorhanden ist\nif (plantStages.hasOwnProperty(msg.payload)) {\n    // Setzen des VPD-Wertes aus dem plantStages-Objekt\n    msg.payload = plantStages[msg.payload];\n} else {\n    // Fehlermeldung, wenn das Wachstumsstadium nicht gefunden wurde\n    msg.payload = \"Unbekanntes Wachstumsstadium\";\n\n}\nmsg.perfektion = \"VPDStageValue\"\ndelete msg.data;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2150,"y":960,"wires":[["9ac8cca8bbd8cc26"]]},{"id":"9ac8cca8bbd8cc26","type":"join","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"VPDWish","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":2060,"y":1040,"wires":[["07308f4728d5980a"]]},{"id":"07308f4728d5980a","type":"function","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"VPD Handler Array Value","func":"const tolerance = 0.00; // Toleranzwert für die VPD-Anpassung\n\n// Der aktuelle VPD-Wert wird aus dem Payload geholt und in eine Zahl umgewandelt.\nconst currentVPD = parseFloat(msg.payload.currentVPD);\n\n// Ziel-VPD-Bereich wird aus dem Payload geholt.\nconst targetVPDRange = msg.payload.targetVPD;\n\n// Logging der aktuellen VPD und Ziel-VPD-Bereich zur Überprüfung und Debugging.\nnode.warn(`Veggi-VPD array between: ${targetVPDRange[0]} and ${targetVPDRange[1]}`);\n\n// Berechnung der prozentualen Abweichung vom Ziel-VPD und Rundung auf ganze Zahlen\nconst percentDifference = Math.round(currentVPD < targetVPDRange[0] \n    ? ((currentVPD - targetVPDRange[0]) / targetVPDRange[0]) * 100 \n    : ((currentVPD - targetVPDRange[1]) / targetVPDRange[1]) * 100);\n\n// Funktion zur Berechnung der notwendigen Anpassungen basierend auf der Differenz zum VPD-Zielbereich.\nfunction calculateAdjustment(currentVPD, targetVPDRange) {\n    // Wenn der aktuelle VPD unter dem minimalen Zielbereich liegt, Anpassungen vornehmen, um VPD zu erhöhen.\n    if (currentVPD < targetVPDRange[0] - tolerance) {\n        node.warn(`Veggi-VPD:: ${currentVPD} zu gering. Erhöhe Temp oder verringere die Feuchtigkeit`);\n        node.warn(`Veggi % VPD Target --> ${percentDifference} %`);\n        return {\n            exhaustSpeed: \"increased\",      // Erhöht die Abluftgeschwindigkeit, um feuchte Luft herauszuziehen\n            humidifier: \"reduced\",          // Schaltet den Luftbefeuchter aus, um Feuchtigkeit zu reduzieren\n            dehumidifier: \"increased\",       // Schaltet den Luftentfeuchter an, um Feuchtigkeit zu reduzieren\n            heaterFan: \"increased\",         // Schaltet den Beheizer an, um die Feuchtigkeit zu reduzieren und Temp zu erhöhen\n            coolerFan: \"reduced\",           // Schaltet den Kühler an, um die Feuchtigkeit zu erhöhen und Temp zu verringern\n            ventsALL: \"increased\",          // Erhöht die Geschwindigkeit der oberen Belüftung, um mehr trockene Luft einzulassen\n            ventsTopSpeed: \"increased\",     // Erhöht die Geschwindigkeit der oberen Belüftung, um mehr trockene Luft einzulassen\n            ventsDownSpeed: \"increased\",    // Erhöht die Geschwindigkeit der unteren Belüftung\n            lightIntensity: \"increased\"     // Erhöht die Lichtintensität, um die Temperatur zu steigern (wenn das die Temperatur beeinflusst)\n        };\n        \n    }\n    // Wenn der aktuelle VPD über dem maximalen Zielbereich liegt, Anpassungen vornehmen, um VPD zu senken.\n    else if (currentVPD > targetVPDRange[1] + tolerance) {\n        node.warn(`Veggi-VPD: ${currentVPD} zu hoch. Verringere Temp oder erhöhe die Feuchtigkeit`);\n        node.warn(`Veggi % VPD Target --> ${percentDifference} %`);\n        return {\n            exhaustSpeed: \"reduced\",    // Reduziert die Abluftgeschwindigkeit, hält feuchte Luft im Raum\n            humidifier: \"increased\",    // Schaltet den Luftbefeuchter ein, um Feuchtigkeit zu erhöhen\n            dehumidifier: \"reduced\",    // Schaltet den Luftentfeuchter aus, um Feuchtigkeit zu erhöhen\n            heaterFan: \"reduced\",       // Schaltet den Heizer aus, um die Temperatur zu verringern\n            coolerFan: \"increased\",     // Schaltet den Kühler an, um die Temperatur zu verringern\n            ventsALL: \"reduced\",        // Reduziert die Geschwindigkeit der Belüftung, um mehr feuchte Luft zu halten\n            ventsTopSpeed: \"reduced\",   // Reduziert die Geschwindigkeit der oberen Belüftung\n            ventsDownSpeed: \"reduced\",  // Reduziert die Geschwindigkeit der unteren Belüftung\n            lightIntensity: \"reduced\"   // Verringert die Lichtintensität, um die Temperatur zu senken (wenn das die Temperatur beeinflusst)\n        };\n    }\n    // Wenn der VPD im Zielbereich liegt, sind keine Anpassungen erforderlich.\n    node.warn(`Veggi-VPD: ${currentVPD} im gewünschten Bereich`);\n    return {\n        exhaustSpeed: \"unchanged\",\n        humidifier: \"unchanged\",\n        dehumidifier: \"unchanged\",    \n        heaterFan: \"unchanged\",        \n        coolerFan: \"unchanged\",        \n        ventsALL: \"unchanged\",       \n        ventsTopSpeed: \"unchanged\",\n        ventsDownSpeed: \"unchanged\",\n        lightIntensity: \"unchanged\"\n    };\n}\n\n// Entscheidungslogik zur Steuerung der Umgebungsbedingungen, nutzt die calculateAdjustment Funktion.\nconst adjustments = calculateAdjustment(currentVPD, targetVPDRange);\n\n// Berechnung der prozentualen Abweichung und Hinzufügen zum Payload\nmsg.payload = {\n    exhaustSpeed: adjustments.exhaustSpeed,\n    humidifier: adjustments.humidifier,\n    dehumidifier: adjustments.dehumidifier,\n    heaterFan: adjustments.heaterFan,\n    coolerFan: adjustments.coolerFan,\n    ventsALL: adjustments.ventsALL,\n    ventsTopSpeed: adjustments.ventsTopSpeed,\n    ventsDownSpeed: adjustments.ventsDownSpeed,\n    lightIntensity: adjustments.lightIntensity,\n    percentDifference: percentDifference\n};\n\nmsg.perfektion = \"VPDActions\";\n\n// Rückgabe des modifizierten Payloads für weitere Verwendung im Flow.\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2270,"y":1040,"wires":[["61d3b1e40e8a29c1"]]},{"id":"61d3b1e40e8a29c1","type":"function","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"Check What Do","func":"let outputs = [null, null, null, null, null, null, null, null, null];\n\nvar percentDifference = msg.payload.percentDifference\n\n// Abluft\nif (msg.payload.exhaustSpeed === \"unchanged\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n} else if (msg.payload.exhaustSpeed === \"increased\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n} else if (msg.payload.exhaustSpeed === \"reduced\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n}\n\n// Humidifier\nif (msg.payload.humidifier === \"unchanged\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n} else if (msg.payload.humidifier === \"increased\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n} else if (msg.payload.humidifier === \"reduced\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n}\n\n// Dehumidifier\nif (msg.payload.dehumidifier === \"unchanged\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n} else if (msg.payload.dehumidifier === \"increased\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n} else if (msg.payload.dehumidifier === \"reduced\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n}\n\n// HeaterFan\nif (msg.payload.heaterFan === \"unchanged\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n} else if (msg.payload.heaterFan === \"increased\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n} else if (msg.payload.heaterFan === \"reduced\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n}\n\n// CoolerFan\nif (msg.payload.coolerFan === \"unchanged\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n} else if (msg.payload.coolerFan === \"increased\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n} else if (msg.payload.coolerFan === \"reduced\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n}\n\n// LightIntensity\nif (msg.payload.lightIntensity === \"unchanged\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n} else if (msg.payload.lightIntensity === \"increased\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n} else if (msg.payload.lightIntensity === \"reduced\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n}\n\n// VentsALL\nif (msg.payload.ventsTopSpeed === \"unchanged\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n} else if (msg.payload.ventsALL === \"increased\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n} else if (msg.payload.ventsALL === \"reduced\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n}\n\n// VentsTopSpeed\nif (msg.payload.ventsTopSpeed === \"unchanged\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n} else if (msg.payload.ventsTopSpeed === \"increased\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n} else if (msg.payload.ventsTopSpeed === \"reduced\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n}\n\n// VentsDownSpeed\nif (msg.payload.ventsDownSpeed === \"unchanged\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n} else if (msg.payload.ventsDownSpeed === \"increased\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n} else if (msg.payload.ventsDownSpeed === \"reduced\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n}\n\n\n\nreturn outputs;\n","outputs":9,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2300,"y":1140,"wires":[["138c5865040f68a3"],["a47d72d27f76363f"],["3c8af30af5e1621b"],["15554571e89dc2d6"],["70c88c449da62baf"],["67864bb87afa5ecf"],["c07c821dd022801c"],["c07c821dd022801c"],["c07c821dd022801c"]]},{"id":"b7f3ca5cd432bab5","type":"poll-state","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"currentVPD","server":"5772bf4c.b461d","version":3,"exposeAsEntityConfig":"","updateInterval":"30","updateIntervalType":"num","updateIntervalUnits":"seconds","outputInitially":true,"outputOnChanged":true,"entityId":"sensor.vpdvegi","stateType":"num","ifState":"","ifStateType":"num","ifStateOperator":"is","outputs":1,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"currentVPD","valueType":"str"}],"x":1930,"y":1100,"wires":[["9ac8cca8bbd8cc26"]]},{"id":"df5e74c7f7712579","type":"api-current-state","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"PlantState","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"select.veggiplantstageselect","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"targetVPD","valueType":"str"},{"property":"perfektion","propertyType":"msg","value":"targetVPD","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1940,"y":960,"wires":[["2afcbf200982e39e"]]},{"id":"f5fe0d1d1e07c638","type":"function","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"Check What Do","func":"let outputs = [null, null, null, null, null, null, null, null, null];\n\nvar percentDifference = msg.payload.percentDifference\n\n// Abluft\nif (msg.payload.exhaustSpeed === \"unchanged\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n} else if (msg.payload.exhaustSpeed === \"increased\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n} else if (msg.payload.exhaustSpeed === \"reduced\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n}\n\n// Humidifier\nif (msg.payload.humidifier === \"unchanged\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n} else if (msg.payload.humidifier === \"increased\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n} else if (msg.payload.humidifier === \"reduced\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n}\n\n// Dehumidifier\nif (msg.payload.dehumidifier === \"unchanged\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n} else if (msg.payload.dehumidifier === \"increased\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n} else if (msg.payload.dehumidifier === \"reduced\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n}\n\n// HeaterFan\nif (msg.payload.heaterFan === \"unchanged\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n} else if (msg.payload.heaterFan === \"increased\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n} else if (msg.payload.heaterFan === \"reduced\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n}\n\n// CoolerFan\nif (msg.payload.coolerFan === \"unchanged\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n} else if (msg.payload.coolerFan === \"increased\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n} else if (msg.payload.coolerFan === \"reduced\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n}\n\n// LightIntensity\nif (msg.payload.lightIntensity === \"unchanged\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n} else if (msg.payload.lightIntensity === \"increased\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n} else if (msg.payload.lightIntensity === \"reduced\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n}\n\n// VentsALL\nif (msg.payload.ventsTopSpeed === \"unchanged\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n} else if (msg.payload.ventsALL === \"increased\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n} else if (msg.payload.ventsALL === \"reduced\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n}\n\n// VentsTopSpeed\nif (msg.payload.ventsTopSpeed === \"unchanged\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n} else if (msg.payload.ventsTopSpeed === \"increased\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n} else if (msg.payload.ventsTopSpeed === \"reduced\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n}\n\n// VentsDownSpeed\nif (msg.payload.ventsDownSpeed === \"unchanged\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n} else if (msg.payload.ventsDownSpeed === \"increased\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n} else if (msg.payload.ventsDownSpeed === \"reduced\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n}\n\n\n\nreturn outputs;\n","outputs":9,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2320,"y":1620,"wires":[["2236e755ab8aaf88"],["1bb3dfe91ae46289"],["b0f6711d749c2fd9"],["d01d126af31e972b"],["03c00d49f67a6651"],["a6c380ef2d09a380"],["eb30bf3343a316af"],["eb30bf3343a316af"],["eb30bf3343a316af"]]},{"id":"80b9933fc37e57a6","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"Calc-Dewpoint","func":"// Funktion zur Berechnung des Taupunkts\nconst calculateDewPoint = (temperature, humidity) => {\n    const temp = parseFloat(temperature);\n    const hum = parseFloat(humidity);\n\n    if (isNaN(temp) || isNaN(hum)) {\n        return \"unavailable\";\n    }\n\n    const dewPoint = temp - ((100 - hum) / 5);\n    return parseFloat(dewPoint.toFixed(3));\n};\n\n// Beispielinput\nconst inputData = msg.payload;\n\n// Taupunkt berechnen\nconst temperature = parseFloat(inputData.AvgTemp);\nconst humidity = parseFloat(inputData.AvgHum);\nconst dewPoint = calculateDewPoint(temperature, humidity);\n\n// Taupunkt als Zahl zurückgeben\nmsg.payload = dewPoint;\nreturn msg\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1540,"y":180,"wires":[["91e45ccb74a35800"]]},{"id":"8d38db5fb60c01a9","type":"join","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1390,"y":180,"wires":[["80b9933fc37e57a6"]]},{"id":"91e45ccb74a35800","type":"ha-sensor","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VeggiAVGDewPoint","entityConfig":"bb585a7e9b14d52e","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[{"property":"topic","propertyType":"msg","value":"DryTentDewPoint","valueType":"str"}],"x":1510,"y":240,"wires":[[]]},{"id":"9e679a1a5777db44","type":"join","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1150,"y":120,"wires":[["dd1ef50d40a2e8fa"]]},{"id":"6225380f219a0d41","type":"link in","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"link in 8","links":["f0449f704d2f7c8a"],"x":895,"y":80,"wires":[["18a47541cb144519"]]},{"id":"18a47541cb144519","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"Select","func":"let outputs = [null, null];\n\nvar leafMode = msg.payload.GlobalLeafSet;\nvar leafOffSet = msg.payload.LeafOffset;\nvar flowerLeafOffset = msg.payload.FlowerLeafOffset;\nvar veggiLeafOffset = msg.payload.VeggiLeafOffset;\nvar groomLeafOffset = msg.payload.GRoomLeafOffset;\n\n// Logic to set new offset based on leaf mode\nif (leafMode === \"Default\") {\n    outputs[0] = { payload: leafOffSet, topic: \"LeafOffSet\" };\n} else if (leafMode === \"Custom\") {\n    outputs[1] = { payload: veggiLeafOffset, topic: \"LeafOffSet\" };\n}\n\nreturn outputs;  // Return the modified outputs array\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":990,"y":80,"wires":[["9e679a1a5777db44"],["9e679a1a5777db44"]]},{"id":"157fdad538b46545","type":"join","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VpdNeeds","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":740,"y":100,"wires":[["623fb660cf22ede4"]]},{"id":"8efbc7331afa5d51","type":"link out","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"CropSteering","mode":"link","links":[],"x":1915,"y":260,"wires":[]},{"id":"f409e7c8d74372fc","type":"link in","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"VPD-Perfektion","links":["68225790c0cb82bc"],"x":1825,"y":1400,"wires":[["d12e6221a51af518"]]},{"id":"95d7e3e76993cfba","type":"poll-state","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"currentVPD","server":"5772bf4c.b461d","version":3,"exposeAsEntityConfig":"","updateInterval":"30","updateIntervalType":"num","updateIntervalUnits":"seconds","outputInitially":true,"outputOnChanged":true,"entityId":"sensor.vpdvegi","stateType":"num","ifState":"","ifStateType":"num","ifStateOperator":"is","outputs":1,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"currentVPD","valueType":"str"}],"x":1970,"y":1540,"wires":[["2fc57bbeab61d575"]]},{"id":"2fc57bbeab61d575","type":"join","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"VPDWish","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":2130,"y":1480,"wires":[["d630bdaf19da0309","01cd46160592fe21"]]},{"id":"d630bdaf19da0309","type":"function","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"VPD Handler Array Value","func":"const tolerance = 0.00; // Toleranzwert für die VPD-Anpassung\n\n// Der aktuelle VPD-Wert wird aus dem Payload geholt und in eine Zahl umgewandelt.\nconst currentVPD = parseFloat(msg.payload.currentVPD);\n\n// Ziel-VPD-Bereich wird aus dem Payload geholt.\nconst targetVPDRange = msg.payload.targetVPD;\n\n// Logging der aktuellen VPD und Ziel-VPD-Bereich zur Überprüfung und Debugging.\nnode.warn(`Flower-VPD-Target: ${targetVPDRange}`);\n\n// Funktion zur Berechnung der notwendigen Anpassungen basierend auf der Differenz zum VPD-Zielbereich.\nfunction calculateAdjustment(currentVPD, targetVPDRange) {\n    // Wenn der aktuelle VPD unter dem minimalen Zielbereich liegt, Anpassungen vornehmen, um VPD zu erhöhen.\n    if (currentVPD < targetVPDRange - tolerance) {\n        node.warn(`Flower-VPD: ${currentVPD} zu gering. Erhöhe Temp oder verringere die Feuchtigkeit.`);\n        return {\n            exhaustSpeed: \"increased\",      // Erhöht die Abluftgeschwindigkeit, um feuchte Luft herauszuziehen\n            humidifier: \"reduced\",          // Schaltet den Luftbefeuchter aus, um Feuchtigkeit zu reduzieren\n            dehumidifier: \"increased\",      // Schaltet den Luftentfeuchter an, um Feuchtigkeit zu reduzieren\n            heaterFan: \"increased\",         // Schaltet den Beheizer an, um die Feuchtigkeit zu reduzieren und Temp zu erhöhen\n            coolerFan: \"reduced\",           // Schaltet den Beheizer an, um die Feuchtigkeit zu erhöhen und Temp zu verringern\n            ventsALL: \"increased\",          // Erhöht die Geschwindigkeit der oberen Belüftung, um mehr trockene Luft einzulassen\n            ventsTopSpeed: \"increased\",     // Erhöht die Geschwindigkeit der oberen Belüftung, um mehr trockene Luft einzulassen\n            ventsDownSpeed: \"increased\",    // Erhöht die Geschwindigkeit der unteren Belüftung\n            lightIntensity: \"increased\"     // Erhöht die Lichtintensität, um die Temperatur zu steigern (wenn das die Temperatur beeinflusst)\n        };\n    }\n    // Wenn der aktuelle VPD über dem maximalen Zielbereich liegt, Anpassungen vornehmen, um VPD zu senken.\n    else if (currentVPD > targetVPDRange + tolerance) {\n        node.warn(`Flower-VPD: ${currentVPD} zu hoch. Verringere Temp oder erhöhe die Feuchtigkeit.`);\n        return {\n            exhaustSpeed: \"reduced\",    // Reduziert die Abluftgeschwindigkeit, hält feuchte Luft im Raum\n            humidifier: \"increased\",    // Schaltet den Luftbefeuchter ein, um Feuchtigkeit zu erhöhen\n            dehumidifier: \"reduced\",    // Schaltet den Luftentfeuchter aus, um Feuchtigkeit zu erhöhen\n            heaterFan: \"reduced\",       // Schaltet den Beheizer aus, um die Feuchtigkeit zu erhöhen und Temp zu senken\n            coolerFan: \"increased\",     // Schaltet den Kühler an, um die Feuchtigkeit zu erhöhen und Temp zu verringern\n            ventsALL: \"reduced\",        // Reduziert die Geschwindigkeit der Belüftung, um mehr feuchte Luft zu halten\n            ventsTopSpeed: \"reduced\",   // Reduziert die Geschwindigkeit der oberen Belüftung\n            ventsDownSpeed: \"reduced\",  // Reduziert die Geschwindigkeit der unteren Belüftung\n            lightIntensity: \"reduced\"   // Verringert die Lichtintensität, um die Temperatur zu senken (wenn das die Temperatur beeinflusst)\n        };\n    }\n    // Wenn der VPD im Zielbereich liegt, sind keine Anpassungen erforderlich.\n    node.warn(`Flower-VPD: ${currentVPD} im gewünschten Bereich.`);\n    return {\n        exhaustSpeed: \"unchanged\",\n        humidifier: \"unchanged\",\n        dehumidifier: \"unchanged\",\n        heaterFan: \"unchanged\",\n        coolerFan: \"unchanged\",\n        ventsALL: \"unchanged\",\n        ventsTopSpeed: \"unchanged\",\n        ventsDownSpeed: \"unchanged\",\n        lightIntensity: \"unchanged\"\n    };\n}\n\n// Funktion zur Berechnung der prozentualen Abweichung\nfunction calculatePercentDifference(currentVPD, targetVPD) {\n    return ((currentVPD - targetVPD) / targetVPD) * 100;\n}\n\n// Entscheidungslogik zur Steuerung der Umgebungsbedingungen, nutzt die calculateAdjustment Funktion.\nconst adjustments = calculateAdjustment(currentVPD, targetVPDRange);\nconst percentDifference = calculatePercentDifference(currentVPD, targetVPDRange);\n\nmsg.payload = {\n    exhaustSpeed: adjustments.exhaustSpeed,\n    humidifier: adjustments.humidifier,\n    dehumidifier: adjustments.dehumidifier,\n    heaterFan: adjustments.heaterFan,\n    coolerFan: adjustments.coolerFan,\n    ventsALL: adjustments.ventsALL,\n    ventsTopSpeed: adjustments.ventsTopSpeed,\n    ventsDownSpeed: adjustments.ventsDownSpeed,\n    lightIntensity: adjustments.lightIntensity,\n    percentDifference: percentDifference.toFixed(0) // Prozentuale Abweichung auf 2 Dezimalstellen gerundet\n};\n\nmsg.perfektion = \"VPDActions\";\n// Rückgabe des modifizierten Payloads für weitere Verwendung im Flow.\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2350,"y":1480,"wires":[["f5fe0d1d1e07c638"]]},{"id":"d12e6221a51af518","type":"api-current-state","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"PlantState","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"select.veggiplantstageselect","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"targetVPD","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1970,"y":1400,"wires":[["2fc57bbeab61d575"]]},{"id":"01cd46160592fe21","type":"debug","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"debug 181","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2210,"y":1400,"wires":[]},{"id":"ff0f10e0360a6aef","type":"function","z":"3752d27d7587c957","name":"Sort Sensor Types","func":"let data = msg.payload;\n\n// Arrays für verschiedene Sensortypen initialisieren\nlet wish = [];\nlet temperatures = [];\nlet humidity = [];\nlet dewpoints = [];\nlet moisture = [];\nlet pressures = [];\nlet battery = [];\nlet power = [];\nlet co2 = [];\nlet lumen = [];\nlet conductivity = [];\nlet switches = [];\nlet dutyCycleExhaust = [];\nlet vents = [];\nlet humidifier = [];\nlet dehumidifier = [];\nlet root = [];\nlet cooler = [];\nlet heater = [];\nlet pump = [];\n\n// Durchlaufe alle Schlüssel im data-Objekt und sortiere sie nach bestimmten Sensortypen\nfor (let key in data) {\n    if (data.hasOwnProperty(key)) {\n        let entity_id = key.toLowerCase();\n        let entity = { entity_id: key, value: data[key] };\n\n        // Prioritize to ensure it is captured first\n        if (entity_id.includes('wish') || entity_id.includes('avg') || entity_id.includes('target')) {\n            wish.push(entity);\n        } else if (entity_id.includes('root') || entity_id.includes('wurzel')) {\n            root.push(entity);\n        }\n        // ENVIORMENT\n        else if (entity_id.includes('temperature') || entity_id.includes('tempe')) {\n            temperatures.push(entity);\n        } else if (entity_id.includes('humidity') || entity_id.includes('feuchtigkeit') || entity_id.includes('rh')) {\n            humidity.push(entity);\n        } else if (entity_id.includes('dewpoint') || entity_id.includes('dew')) {\n            dewpoints.push(entity);\n        } else if (entity_id.includes('moisture') || entity_id.includes('mois')) {\n            moisture.push(entity);\n        } else if (entity_id.includes('pressure') || entity_id.includes('press')) {\n            pressures.push(entity);\n        } else if (entity_id.includes('carbondioxide') || entity_id.includes('co2') || entity_id.includes('carbon')) {\n            co2.push(entity);\n        } else if (entity_id.includes('conductivity')) {\n            conductivity.push(entity);\n        } else if (entity_id.includes('illuminance') || entity_id.includes('light') || entity_id.includes('licht')) {\n            lumen.push(entity);\n        }\n        // Devices\n        else if (entity_id.includes('dehumidifier') || entity_id.includes('entfeuchter')) {\n            dehumidifier.push(entity);\n        } else if (entity_id.includes('humidifier') || entity_id.includes('befeuchter')) {\n            humidifier.push(entity);\n        } else if (entity_id.includes('cooler') || entity_id.includes('klima')) {\n            cooler.push(entity);\n        } else if (entity_id.includes('heater') || entity_id.includes('Heizung')) {\n            heater.push(entity);\n        } else if (entity_id.includes('pump') || entity_id.includes('pumping')) {\n            pump.push(entity);\n        }else if (entity_id.includes('ruck') || entity_id.includes('airctr') || entity_id.includes('exhaust') || entity_id.includes('abluft')) {\n            dutyCycleExhaust.push(entity);\n        } else if (entity_id.includes('vent')) {\n            vents.push(entity);\n        } else if (entity_id.includes('switch')) {\n            switches.push(entity);\n        } else if (entity_id.includes('power') || entity_id.includes('energy')) {\n            power.push(entity);\n        }\n\n        // ADDONS\n        else if (entity_id.includes('battery') || entity_id.includes('batt')) {\n            battery.push(entity);\n        }\n    }\n}\n\n// Nachrichtenausgabe auf verschiedenen Outputs\nreturn [\n    // ENVIORMENT\n    { payload: wish, topic: 'Wish' },\n    { payload: temperatures, topic: 'temperature' },\n    { payload: humidity, topic: 'humidity' },\n    { payload: dewpoints, topic: 'dewpoint' },\n    { payload: moisture, topic: 'moisture' },\n    { payload: root, topic: 'roottemp' },\n    { payload: conductivity, topic: 'conductivity' },\n    { payload: pressures, topic: 'pressure' },\n    { payload: co2, topic: 'carbon_dioxide' },\n    { payload: lumen, topic: 'illuminance' },\n    // DEVICEINFO\n    { payload: battery, topic: 'battery' },\n    { payload: power, topic: 'power' },\n    // DEVICES\n    { payload: switches, topic: 'switch' },\n    { payload: vents, topic: 'Vents' },\n    { payload: dutyCycleExhaust, topic: 'Exhaust' },\n    { payload: humidifier, topic: 'humidifier' },\n    { payload: dehumidifier, topic: 'dehumidifier' },\n    { payload: cooler, topic: 'cooler' },\n    { payload: heater, topic: 'heater' },\n    { payload: pump, topic: 'pump' }\n];\n","outputs":20,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":240,"wires":[["4699a341c0e525a1"],["d6b7596272b92fd6"],["a8d42f450f5ec3bf"],["82b3968d5e1d0b1a"],["716d0ea3761ab229"],["455ed3c6930adfe0"],["1beade2ff5ca5212"],["3b25550daaa0d938"],["628eb0efdd45d47f"],["02199cb92b1a3f32"],["85a703016b798065"],["edeead31dd6a80b8"],["8c0773acdba0ce48"],["3aa5bb36956938c6"],["724dfeb83c172e7d"],["bd65fa0bcf194b27"],["7e5df50c6683b600"],["7c35ebcfdd9a14f4"],["856cb32d12870716"],["aca8b2391f7c4b40"]]},{"id":"d0fa75ce32c2b2ec","type":"debug","z":"3752d27d7587c957","name":"Temperatures","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":460,"y":120,"wires":[]},{"id":"37a0cd0ecce69585","type":"debug","z":"3752d27d7587c957","name":"Humidity","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":440,"y":160,"wires":[]},{"id":"b01cc8b798cf40db","type":"debug","z":"3752d27d7587c957","name":"Dewpoints","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":450,"y":200,"wires":[]},{"id":"6e29c36400302613","type":"debug","z":"3752d27d7587c957","name":"Pressures","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":440,"y":360,"wires":[]},{"id":"c8ac68f99c237d2c","type":"debug","z":"3752d27d7587c957","name":"Battery","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":440,"y":500,"wires":[]},{"id":"c82ef6e4f9fa3159","type":"debug","z":"3752d27d7587c957","name":"Power","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":430,"y":540,"wires":[]},{"id":"eb850d44242cc6c6","type":"debug","z":"3752d27d7587c957","name":"CO2","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":430,"y":400,"wires":[]},{"id":"3b9ddcea592dfa6c","type":"debug","z":"3752d27d7587c957","name":"Light","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":430,"y":440,"wires":[]},{"id":"472539b957b3d55c","type":"debug","z":"3752d27d7587c957","name":"Switches","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":440,"y":600,"wires":[]},{"id":"38cd4d82cd0fd287","type":"debug","z":"3752d27d7587c957","name":"Conductivity","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":450,"y":320,"wires":[]},{"id":"a0b65bcedc96a0fe","type":"debug","z":"3752d27d7587c957","name":"Moisture","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":440,"y":240,"wires":[]},{"id":"fea31e55b74e768b","type":"debug","z":"3752d27d7587c957","name":"Exhasut","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":440,"y":680,"wires":[]},{"id":"a02e58aa1b5be4d9","type":"debug","z":"3752d27d7587c957","name":"WISH","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":430,"y":80,"wires":[]},{"id":"65ac2cfaa7ba045c","type":"debug","z":"3752d27d7587c957","name":"Humidifier","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":450,"y":720,"wires":[]},{"id":"cab823730c4a70a7","type":"debug","z":"3752d27d7587c957","name":"Vents","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":430,"y":640,"wires":[]},{"id":"42ff7b7243adac0b","type":"debug","z":"3752d27d7587c957","name":"RootTemp","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":450,"y":280,"wires":[]},{"id":"89391fcf7fa2d9dc","type":"debug","z":"3752d27d7587c957","name":"Dehumidifier","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":450,"y":760,"wires":[]},{"id":"d1ba22a962408cbd","type":"link out","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"ExhaustVeggiON","mode":"link","links":["09f51aa364202656"],"x":4095,"y":540,"wires":[]},{"id":"068b8e7a89eef1ba","type":"link out","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"ExhaustVeggiOFF","mode":"link","links":["95404f058f30b296"],"x":4135,"y":580,"wires":[]},{"id":"669616aead0ef19f","type":"link out","z":"3752d27d7587c957","name":"Dehumidifier","mode":"link","links":["9743d50e741ac49e"],"x":575,"y":760,"wires":[]},{"id":"5f82452669bf7cb1","type":"link out","z":"3752d27d7587c957","name":"Vents","mode":"link","links":[],"x":575,"y":640,"wires":[]},{"id":"9ee872c8de807c68","type":"debug","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"debug 182","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":3910,"y":540,"wires":[]},{"id":"f81d8c962ee7f1d5","type":"join","z":"3752d27d7587c957","g":"ecb02d38c4118377","name":"DehumidifierData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":3650,"y":1020,"wires":[["ba354dc96e68c583"]]},{"id":"9743d50e741ac49e","type":"link in","z":"3752d27d7587c957","g":"ecb02d38c4118377","name":"Dehumidifier","links":["669616aead0ef19f"],"x":3585,"y":960,"wires":[["f81d8c962ee7f1d5"]]},{"id":"ba354dc96e68c583","type":"function","z":"3752d27d7587c957","g":"ecb02d38c4118377","name":"DehumidifierSetup","func":"let outputs = [null, null, null];\n\nlet dehumidifierState = null;\n\n// Schleife, um den Zustand des Dehumidifier zu finden\nfor (let i = 0; i < msg.payload.dehumidifier.length; i++) {\n    if (msg.payload.dehumidifier[i].entity_id.includes('dehumidifier')) {\n        dehumidifierState = msg.payload.dehumidifier[i].value;\n        break;\n    }\n}\n\n// Dehumidifier starten\nif (msg.payload.dehumidifierSet.value === \"increased\" && dehumidifierState === \"off\") {\n    outputs[0] = { payload: \"Starte Dehumidifier\", topic: \"Start\" };\n}\n\n// Dehumidifier stoppen\nif (msg.payload.dehumidifierSet.value === \"reduced\" && dehumidifierState === \"on\") {\n    outputs[1] = { payload: \"Stoppe Dehumidifier\", topic: \"Stop\" };\n}\n\n// Nichts tun\nif (msg.payload.dehumidifierSet.value === \"unchanged\") {\n    outputs[2] = { payload: \"Dehumidifier unverändert, keine Aktion erforderlich\", topic: \"Nothing\" };\n}\n\nreturn outputs; // Rückgabe des Ausgangsarrays\n","outputs":4,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3870,"y":1020,"wires":[["09de5509dbd47ef7"],["fa4182f14e046b55"],["3905f327349462e9"],[]]},{"id":"2fe236b6ecf4be1a","type":"join","z":"3752d27d7587c957","g":"082054cd4a9a0dc1","name":"HeaterData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":3630,"y":1400,"wires":[["dec304f413eef635"]]},{"id":"548fd1b0ea533144","type":"link in","z":"3752d27d7587c957","g":"082054cd4a9a0dc1","name":"link in 37","links":["9cebbdc13963270f"],"x":3565,"y":1340,"wires":[["2fe236b6ecf4be1a"]]},{"id":"dec304f413eef635","type":"function","z":"3752d27d7587c957","g":"082054cd4a9a0dc1","name":"HeaterSetup","func":"let outputs = [null, null, null];\n\nlet heaterState = null;\n\n// Schleife, um den Zustand des Heater zu finden\nfor (let i = 0; i < msg.payload.heater.length; i++) {\n    if (msg.payload.heater[i].entity_id.includes('heater')) {\n        heaterState = msg.payload.heater[i].value;\n        break;\n    }\n}\n\n// Heater starten\nif (msg.payload.heaterSet.value === \"increased\" && heaterState === \"off\") {\n    outputs[0] = { payload: \"Start Heater\", topic: \"Start\" };\n}\n\n// Heater stoppen\nif (msg.payload.heaterSet.value === \"reduced\" && heaterState === \"on\") {\n    outputs[1] = { payload: \"Stop Heater\", topic: \"Stop\" };\n}\n\n// Nichts tun\nif (msg.payload.heaterSet.value === \"unchanged\") {\n    outputs[2] = { payload: \"Heater unverändert, keine Aktion erforderlich\", topic: \"Nothing\" };\n}\n\nreturn outputs; // Rückgabe des Ausgangsarrays\n","outputs":4,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3830,"y":1400,"wires":[["1c021da55d25e11a"],["7fda7edaf7e5818c"],["4c6249a89c9f8505"],[]]},{"id":"f0d2d59e9fb71a11","type":"join","z":"3752d27d7587c957","g":"d634b49c93972c8c","name":"CoolerData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":3690,"y":1200,"wires":[["4f8602da2d439cb1"]]},{"id":"695c16207afdcdaa","type":"link in","z":"3752d27d7587c957","g":"d634b49c93972c8c","name":"link in 38","links":["53744e9d23f8df14"],"x":3625,"y":1140,"wires":[["f0d2d59e9fb71a11"]]},{"id":"4f8602da2d439cb1","type":"function","z":"3752d27d7587c957","g":"d634b49c93972c8c","name":"CoolerSetup","func":"let outputs = [null, null, null];\n\nlet coolerState = null;\n\n// Schleife, um den Zustand des Cooler zu finden\nfor (let i = 0; i < msg.payload.cooler.length; i++) {\n    if (msg.payload.cooler[i].entity_id.includes('cooler')) {\n        coolerState = msg.payload.cooler[i].value;\n        break;\n    }\n}\n\n// Cooler starten\nif (msg.payload.coolerSet.value === \"increased\" && coolerState === \"off\") {\n    outputs[0] = { payload: \"Start Cooler\", topic: \"Start\" };\n}\n\n// Cooler stoppen\nif (msg.payload.coolerSet.value === \"reduced\" && coolerState === \"on\") {\n    outputs[1] = { payload: \"Stop Cooler\", topic: \"Stop\" };\n}\n\n// Nichts tun\nif (msg.payload.coolerSet.value === \"unchanged\") {\n    outputs[2] = { payload: \"Cooler unverändert, keine Aktion erforderlich\", topic: \"Nothing\" };\n}\n\nreturn outputs; // Rückgabe des Ausgangsarrays\n","outputs":4,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3890,"y":1200,"wires":[["ccb808bba5fe34af"],["1fc079df5d0649cc"],["795027dc6079bbcd"],[]]},{"id":"bf178d140cd3a947","type":"join","z":"3752d27d7587c957","g":"c91e1e1018209c58","name":"LightData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":3670,"y":1720,"wires":[["b05f07a1e755da48"]]},{"id":"0970ba51c7fda08e","type":"link in","z":"3752d27d7587c957","g":"c91e1e1018209c58","name":"link in 39","links":[],"x":3615,"y":1660,"wires":[["bf178d140cd3a947"]]},{"id":"b05f07a1e755da48","type":"function","z":"3752d27d7587c957","g":"c91e1e1018209c58","name":"LightSetup","func":"let outputs = [null, null, null];\n\nlet lightState = null;\n\n// Schleife, um den Zustand des Befeuchters zu finden\nfor (let i = 0; i < msg.payload.light.length; i++) {\n    if (msg.payload.light[i].entity_id.includes('light')) {\n        lightState = msg.payload.light[i].value;\n        break;\n    }\n}\n\n// Befeuchter starten\nif (msg.payload.lightSet.value === \"increased\" && lightState === \"off\") {\n    outputs[0] = { payload: \"Starte Befeuchter\", topic: \"Start\" };\n}\n\n// Befeuchter stoppen\nif (msg.payload.lightSet.value === \"reduced\" && lightState === \"on\") {\n    outputs[1] = { payload: \"Stoppe Befeuchter\", topic: \"Stop\" };\n}\n\n// Nichts tun\nif (msg.payload.lightSet.value === \"unchanged\") {\n    outputs[2] = { payload: \"Befeuchter unverändert, keine Aktion erforderlich\", topic: \"Nothing\" };\n}\n\nreturn outputs; // Rückgabe des Ausgangsarrays\n","outputs":4,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3870,"y":1720,"wires":[["dad47ea322ec8b37"],["28c6b5d7d65acfac"],["bc2bedc4446fe072"],[]]},{"id":"15db15c7e2de4370","type":"join","z":"3752d27d7587c957","g":"9309ba9f15bdd552","name":"VentsData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":3710,"y":1900,"wires":[["13559ea87af327af"]]},{"id":"f8f91e027dfc8333","type":"link in","z":"3752d27d7587c957","g":"9309ba9f15bdd552","name":"link in 40","links":[],"x":3665,"y":1840,"wires":[["15db15c7e2de4370"]]},{"id":"13559ea87af327af","type":"function","z":"3752d27d7587c957","g":"9309ba9f15bdd552","name":"VentsSetup","func":"let outputs = [null, null, null];\n\nlet ventsState = null;\n\n// Schleife, um den Zustand des Befeuchters zu finden\nfor (let i = 0; i < msg.payload.vents.length; i++) {\n    if (msg.payload.vents[i].entity_id.includes('vents')) {\n        ventsState = msg.payload.vents[i].value;\n        break;\n    }\n}\n\n// Befeuchter starten\nif (msg.payload.ventsSet.value === \"increased\" && ventsState === \"off\") {\n    outputs[0] = { payload: \"Starte Befeuchter\", topic: \"Start\" };\n}\n\n// Befeuchter stoppen\nif (msg.payload.ventsSet.value === \"reduced\" && ventsState === \"on\") {\n    outputs[1] = { payload: \"Stoppe Befeuchter\", topic: \"Stop\" };\n}\n\n// Nichts tun\nif (msg.payload.ventsSet.value === \"unchanged\") {\n    outputs[2] = { payload: \"Befeuchter unverändert, keine Aktion erforderlich\", topic: \"Nothing\" };\n}\n\nreturn outputs; // Rückgabe des Ausgangsarrays\n","outputs":4,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3910,"y":1900,"wires":[["bda808f336509948"],["64e65d877d2f6338"],["61af123542cf6443"],[]]},{"id":"09de5509dbd47ef7","type":"link out","z":"3752d27d7587c957","g":"ecb02d38c4118377","name":"VeggiDefhumidiferON","mode":"link","links":["4c88812165b09b0e"],"x":4035,"y":980,"wires":[]},{"id":"fa4182f14e046b55","type":"link out","z":"3752d27d7587c957","g":"ecb02d38c4118377","name":"VeggiDefhumidiferOFF","mode":"link","links":["2b8233e8bb0edf47"],"x":4095,"y":1000,"wires":[]},{"id":"3905f327349462e9","type":"link out","z":"3752d27d7587c957","g":"ecb02d38c4118377","name":"link out 15","mode":"link","links":[],"x":4135,"y":1040,"wires":[]},{"id":"1c021da55d25e11a","type":"link out","z":"3752d27d7587c957","g":"082054cd4a9a0dc1","name":"VeggiHeaterON","mode":"link","links":["1be287d67694b336"],"x":4015,"y":1360,"wires":[]},{"id":"7fda7edaf7e5818c","type":"link out","z":"3752d27d7587c957","g":"082054cd4a9a0dc1","name":"VeggiHeaterOFF","mode":"link","links":["593f0c0e52db1610"],"x":4075,"y":1380,"wires":[]},{"id":"4c6249a89c9f8505","type":"link out","z":"3752d27d7587c957","g":"082054cd4a9a0dc1","name":"link out 27","mode":"link","links":[],"x":4115,"y":1420,"wires":[]},{"id":"ccb808bba5fe34af","type":"link out","z":"3752d27d7587c957","g":"d634b49c93972c8c","name":"VeggiCoolerON","mode":"link","links":["cc608f4009e112e6"],"x":4085,"y":1160,"wires":[]},{"id":"1fc079df5d0649cc","type":"link out","z":"3752d27d7587c957","g":"d634b49c93972c8c","name":"VeggiCoolerOFF","mode":"link","links":["eabb7d61eeb2383f"],"x":4145,"y":1180,"wires":[]},{"id":"795027dc6079bbcd","type":"link out","z":"3752d27d7587c957","g":"d634b49c93972c8c","name":"link out 30","mode":"link","links":[],"x":4185,"y":1220,"wires":[]},{"id":"dad47ea322ec8b37","type":"link out","z":"3752d27d7587c957","g":"c91e1e1018209c58","name":"link out 31","mode":"link","links":[],"x":4075,"y":1680,"wires":[]},{"id":"28c6b5d7d65acfac","type":"link out","z":"3752d27d7587c957","g":"c91e1e1018209c58","name":"link out 32","mode":"link","links":[],"x":4135,"y":1700,"wires":[]},{"id":"bc2bedc4446fe072","type":"link out","z":"3752d27d7587c957","g":"c91e1e1018209c58","name":"link out 33","mode":"link","links":[],"x":4175,"y":1740,"wires":[]},{"id":"bda808f336509948","type":"link out","z":"3752d27d7587c957","g":"9309ba9f15bdd552","name":"link out 34","mode":"link","links":[],"x":4095,"y":1860,"wires":[]},{"id":"64e65d877d2f6338","type":"link out","z":"3752d27d7587c957","g":"9309ba9f15bdd552","name":"link out 35","mode":"link","links":[],"x":4155,"y":1880,"wires":[]},{"id":"61af123542cf6443","type":"link out","z":"3752d27d7587c957","g":"9309ba9f15bdd552","name":"link out 36","mode":"link","links":[],"x":4195,"y":1920,"wires":[]},{"id":"317e9ec8876608ff","type":"link out","z":"3752d27d7587c957","g":"2651868e58bb1778","name":"link out 124","mode":"link","links":[],"x":4095,"y":860,"wires":[]},{"id":"fb9d3843392773d1","type":"link out","z":"3752d27d7587c957","g":"2651868e58bb1778","name":"VeggiHumidifierON","mode":"link","links":["1be287d67694b336"],"x":4025,"y":800,"wires":[]},{"id":"d2b8b521e6d704e6","type":"link out","z":"3752d27d7587c957","g":"2651868e58bb1778","name":"VeggiHumidifierOFF","mode":"link","links":["7deddc1b5d29a51e"],"x":4085,"y":820,"wires":[]},{"id":"61d447a8dd2039a2","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiCO2","entityConfig":"3bf46a3f240b688e","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1160,"y":620,"wires":[[]]},{"id":"883e53c619710a5c","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"CO2-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Finden des Objekts, das eine der gewünschten Teilzeichenfolgen im entity_id enthält\nconst co2Object = sensors.find(sensor => \n    sensor.entity_id.includes(\"carbon\") || \n    sensor.entity_id.includes(\"carbondioxide\")\n);\n\n// Extrahieren des Wertes, wenn das Objekt gefunden wurde, sonst null setzen\nconst co2Value = co2Object ? co2Object.value : null;\n\n// Ausgabe des CO2-Wertes zur Überprüfung\n// node.warn(`CO2-Wert: ${co2Value}`);\n\n// Optional: Speichern des CO2-Wertes in msg.co2Value oder einem anderen Feld zur weiteren Verwendung\nmsg.payload = co2Value;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":880,"y":620,"wires":[["61d447a8dd2039a2"]]},{"id":"d63dfedba31e6c03","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Pressure-Get","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Luftdruck-Wertes\nfunction findPressureValue(sensors) {\n    const pressureObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"pressure\") ||\n        sensor.entity_id.includes(\"barometer\") ||\n        sensor.entity_id.includes(\"luftdruck\")\n    );\n    return pressureObject ? pressureObject.value : null;\n}\n\n// Finden des Luftdruck-Wertes\nconst pressureValue = findPressureValue(sensors);\n\n// Ausgabe des Luftdruck-Wertes zur Überprüfung\n// node.warn(`Luftdruck-Wert: ${pressureValue}`);\n\n// Optional: Speichern des Luftdruck-Wertes in msg zur weiteren Verwendung\nmsg.payload = pressureValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":560,"wires":[["921cb4af51950c56"]]},{"id":"d667e426b36be2c9","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Moisture-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Moisture-Wertes\nfunction findMoistureValue(sensors) {\n    const moistureObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"moisture\") ||\n        sensor.entity_id.includes(\"humidity\") ||\n        sensor.entity_id.includes(\"wetness\")\n    );\n    return moistureObject ? moistureObject.value : null;\n}\n\n// Finden des Moisture-Wertes\nconst moistureValue = findMoistureValue(sensors);\n\n// Ausgabe des Moisture-Wertes zur Überprüfung\n// node.warn(`Moisture-Wert: ${moistureValue}`);\n\n// Optional: Speichern des Moisture-Wertes in msg zur weiteren Verwendung\nmsg.payload = moistureValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":380,"wires":[["0a775ad93eb0201a"]]},{"id":"03170a055dee0c18","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"SOIL-EC-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des EC- oder Conductivity-Wertes\nfunction findECValue(sensors) {\n    const ecObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"ec\") ||\n        sensor.entity_id.includes(\"conductivity\")\n    );\n    return ecObject ? ecObject.value : null;\n}\n\n// Finden des EC- oder Conductivity-Wertes\nconst ecValue = findECValue(sensors);\n\n// Ausgabe des EC- oder Conductivity-Wertes zur Überprüfung\n// node.warn(`EC-Wert: ${ecValue}`);\n\n// Optional: Speichern des EC- oder Conductivity-Wertes in msg zur weiteren Verwendung\nmsg.payload = ecValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":500,"wires":[["0b48f34fdeeadbd4"]]},{"id":"bb53d025f4d0e3fa","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"PowerConsum-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Stromverbrauch-Wertes\nfunction findPowerConsumptionValue(sensors) {\n    const powerConsumptionObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"energy_power\") || \n        sensor.entity_id.includes(\"consumption\") || \n        sensor.entity_id.includes(\"watt\") || \n        sensor.entity_id.includes(\"electricity\")\n    );\n    return powerConsumptionObject ? powerConsumptionObject.value : null;\n}\n\n// Finden des Stromverbrauch-Wertes\nconst powerConsumptionValue = findPowerConsumptionValue(sensors);\n\n// Ausgabe des Stromverbrauch-Wertes zur Überprüfung\n// node.warn(`Stromverbrauch-Wert: ${powerConsumptionValue}`);\n\n// Optional: Speichern des Stromverbrauch-Wertes in msg zur weiteren Verwendung\nmsg.payload = powerConsumptionValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":920,"y":800,"wires":[["a968aa9eccbf2d79"]]},{"id":"b0d376be03892225","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Battery-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Batterie-Wertes\nfunction findBatteryValue(sensors) {\n    const batteryObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"battery\") || \n        sensor.entity_id.includes(\"batt\")\n    );\n    return batteryObject ? batteryObject.value : null;\n}\n\n// Finden des Batterie-Wertes\nconst batteryValue = findBatteryValue(sensors);\n\n// Ausgabe des Batterie-Wertes zur Überprüfung\n// node.warn(`Batterie-Wert: ${batteryValue}`);\n\n// Optional: Speichern des Batterie-Wertes in msg zur weiteren Verwendung\nmsg.payload = batteryValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":740,"wires":[["32558d701303ef20"]]},{"id":"71bbf76e3992257f","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Root-Temp-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Root-Temperature-Wertes\nfunction findRootTempValue(sensors) {\n    const rootTempObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"root_temp\") || \n        sensor.entity_id.includes(\"roottemperature\") || \n        sensor.entity_id.includes(\"soiltemp\") || \n        sensor.entity_id.includes(\"root_temp\")\n    );\n    return rootTempObject ? rootTempObject.value : null;\n}\n\n// Finden des Root-Temperature-Wertes\nconst rootTempValue = findRootTempValue(sensors);\n\n// Ausgabe des Root-Temperature-Wertes zur Überprüfung\n// node.warn(`Root-Temperature-Wert: ${rootTempValue}`);\n\n// Optional: Speichern des Root-Temperature-Wertes in msg zur weiteren Verwendung\nmsg.payload = rootTempValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":440,"wires":[["c3cdc89fea6e66dd"]]},{"id":"b2cb416cb6617c7b","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Exhaust-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Abluft-Zustands\nfunction findExhaustState(sensors) {\n    const exhaustStateObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"exhaust\") ||\n        sensor.entity_id.includes(\"abluft\") ||\n        sensor.entity_id.includes(\"ventilation\") ||\n        sensor.entity_id.includes(\"fan\")\n    );\n    return exhaustStateObject ? exhaustStateObject.value : null;\n}\n\n// Funktion zum Finden des Dutycycle-Wertes\nfunction findDutyCycleValue(sensors) {\n    const dutyCycleObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"airctr\") ||\n        sensor.entity_id.includes(\"dutycycle\") ||\n        sensor.entity_id.includes(\"cycle\")\n    );\n    return dutyCycleObject ? dutyCycleObject.value : null;\n}\n\n// Finden des Abluft-Zustands\nconst exhaustState = findExhaustState(sensors);\n\n// Finden des Dutycycle-Wertes\nconst dutyCycleValue = findDutyCycleValue(sensors);\n\n// Ausgabe der Werte zur Überprüfung\n// node.warn(`Abluft-Zustand: ${exhaustState}`);\n// node.warn(`Dutycycle-Wert: ${dutyCycleValue}`);\n\n// Setzen der Outputs\nlet outputs = [\n    { payload: exhaustState }, // Output 1: Zustand (on/off)\n    { payload: dutyCycleValue } // Output 2: Dutycycle\n];\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn outputs;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":980,"wires":[["41834d3741e6a772"],["20ed8422cf5c2d23"]]},{"id":"3f02c178f632f85b","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Humidifier-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Humidifier-Wertes\nfunction findHumidifierValue(sensors) {\n    const humidifierObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"humidifier\") || \n        sensor.entity_id.includes(\"humidity\")\n    );\n    return humidifierObject ? humidifierObject.value : null;\n}\n\n// Finden des Humidifier-Wertes\nconst humidifierValue = findHumidifierValue(sensors);\n\n// Ausgabe des Humidifier-Wertes zur Überprüfung\n// node.warn(`Humidifier-Wert: ${humidifierValue}`);\n\n// Optional: Speichern des Humidifier-Wertes in msg zur weiteren Verwendung\nmsg.payload = humidifierValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":1040,"wires":[[]]},{"id":"921cb4af51950c56","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiPressure","entityConfig":"6aeda981e19a8694","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1180,"y":560,"wires":[[]]},{"id":"0a775ad93eb0201a","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiMoisture","entityConfig":"fdc22e77b0c5dbe3","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1180,"y":380,"wires":[["1124f430fe2c02cc"]]},{"id":"32558d701303ef20","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiBatterieDevices","entityConfig":"3f8ce21d326f8670","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1200,"y":740,"wires":[[]]},{"id":"c3cdc89fea6e66dd","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiRootTemp","entityConfig":"68810d13c01a98ba","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1180,"y":440,"wires":[[]]},{"id":"0b48f34fdeeadbd4","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiEC","entityConfig":"0a689f654f6cfecb","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1160,"y":500,"wires":[["1124f430fe2c02cc"]]},{"id":"09388aae1c81e85e","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"LightIntense_GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Licht-Wertes (Lumen oder Lux)\nfunction findLightValue(sensors) {\n    const lightObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"lumen\") || \n        sensor.entity_id.includes(\"lux\") || \n        sensor.entity_id.includes(\"light\") ||\n        sensor.entity_id.includes(\"illuminance\")\n    );\n    return lightObject ? lightObject.value : null;\n}\n\n// Finden des Licht-Wertes\nconst lightValue = findLightValue(sensors);\n\n// Ausgabe des Licht-Wertes zur Überprüfung\n// node.warn(`Licht-Wert: ${lightValue}`);\n\n// Optional: Speichern des Licht-Wertes in msg zur weiteren Verwendung\nmsg.payload = lightValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":680,"wires":[["502bf442461b61cd"]]},{"id":"502bf442461b61cd","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiLightIntense","entityConfig":"d3a9b3e22cb3c349","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1190,"y":680,"wires":[[]]},{"id":"42ab596fae23920e","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Switch-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Switch-Wertes\nfunction findSwitchValue(sensors) {\n    const switchObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"switch\") || \n        sensor.entity_id.includes(\"toggle\")\n    );\n    return switchObject ? switchObject.state : null;\n}\n\n// Finden des Switch-Wertes\nconst switchValue = findSwitchValue(sensors);\n\n// Ausgabe des Switch-Wertes zur Überprüfung\n// node.warn(`Switch-Wert: ${switchValue}`);\n\n// Optional: Speichern des Switch-Wertes in msg zur weiteren Verwendung\nmsg.payload = switchValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":860,"wires":[[]]},{"id":"a968aa9eccbf2d79","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiPowerConsume","entityConfig":"cd5681d147a94f3e","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1200,"y":800,"wires":[[]]},{"id":"409a33744f657fd1","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Vents-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Ventilation-Wertes\nfunction findVentilationValue(sensors) {\n    const ventilationObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"ventilation\") ||\n        sensor.entity_id.includes(\"fan\") ||\n        sensor.entity_id.includes(\"exhaust\") ||\n        sensor.entity_id.includes(\"airflow\")\n    );\n    return ventilationObject ? ventilationObject.value : null;\n}\n\n// Finden des Ventilation-Wertes\nconst ventilationValue = findVentilationValue(sensors);\n\n// Ausgabe des Ventilation-Wertes zur Überprüfung\n// node.warn(`Ventilation-Wert: ${ventilationValue}`);\n\n// Optional: Speichern des Ventilation-Wertes in msg zur weiteren Verwendung\nmsg.payload = ventilationValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":920,"wires":[[]]},{"id":"2ec8b29e881e1150","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Dehumidifier-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors) {\n    const dehumidifierObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"dehumidifier\") || \n        sensor.entity_id.includes(\"humidity\")\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors);\n\n// Ausgabe des Dehumidifier-Wertes zur Überprüfung\n// node.warn(`Dehumidifier-Wert: ${dehumidifierValue}`);\n\n// Optional: Speichern des Dehumidifier-Wertes in msg zur weiteren Verwendung\nmsg.payload = dehumidifierValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":1100,"wires":[[]]},{"id":"20ed8422cf5c2d23","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiExhaustDuty","entityConfig":"ba8566e09903f293","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1190,"y":1000,"wires":[[]]},{"id":"41834d3741e6a772","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiExhaustState","entityConfig":"c8a22cfdbd11971c","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1190,"y":940,"wires":[[]]},{"id":"b15af587e5fdd218","type":"inject","z":"3752d27d7587c957","g":"fb83b7a26af05fdc","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"300","crontab":"","once":true,"onceDelay":"15","topic":"","payload":"","payloadType":"date","x":2150,"y":160,"wires":[["7cea495731d0be12"]]},{"id":"0249561a3fec1f56","type":"ha-sensor","z":"3752d27d7587c957","g":"fb83b7a26af05fdc","name":"DLI","entityConfig":"a5f1cc19016994d1","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":2750,"y":220,"wires":[["fa1ac2acc7e0b33d"]]},{"id":"4514863886914953","type":"ha-sensor","z":"3752d27d7587c957","g":"fb83b7a26af05fdc","name":"PPFDVegi","entityConfig":"351be2fcdaadc9bd","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":2760,"y":120,"wires":[["fa1ac2acc7e0b33d"]]},{"id":"fa1ac2acc7e0b33d","type":"debug","z":"3752d27d7587c957","g":"fb83b7a26af05fdc","name":"debug 51","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2920,"y":160,"wires":[]},{"id":"d6870c9a6b9ceba0","type":"function","z":"3752d27d7587c957","g":"fb83b7a26af05fdc","name":"Calculate PPFD / DLI GCX4 ","func":"// Der function-Node empfängt eine Nachricht mit einem Watt-Wert\n// Beispiel für die Eingangsnachricht: { payload: 120 } // das entspricht 100% Leistung\n\n// PPF bei 100% Leistung (120 Watt)\nconst fullPowerPPF = 342; // PPF in Mikromol pro Sekunde (μmol/s)\n// Die Fläche, über die der PPF verteilt ist\nconst area = 0.36; // Fläche in Quadratmetern (m²) für eine Fläche von 60x60 cm\n// Maximale Wattzahl für die 100% Leistung\nconst maxWatt = 120;\n// Verlustfaktor (10% Verlust)\nconst lossFactor = 0.9;\n\n// PPFD berechnen basierend auf dem aktuellen Wattwert\nlet ppfd = (msg.payload / maxWatt) * fullPowerPPF / area;\n\n// Berücksichtigung des Verlustes von 10%\nppfd *= lossFactor;\n\n// PPFD auf zwei Nachkommastellen runden\nconst roundedPPFD = parseFloat(ppfd.toFixed(2));\n\n// Berechnung von DLI\nconst secondsPerHour = 3600;\nconst hoursPerDay = 18; // Anzahl der Stunden pro Tag, die das Licht an ist\nlet dli = roundedPPFD * secondsPerHour * hoursPerDay;\n\n// Umrechnung von Mikromol pro Sekunde in Mol pro Tag\ndli /= 1e6;\n\n// DLI auf zwei Nachkommastellen runden\ndli = parseFloat(dli.toFixed(2));\n\n// Erstellen Sie zwei separate Nachrichtenobjekte für die Ausgänge\nconst msg1 = { payload: roundedPPFD }; // für den ersten Output (PPFD), gerundet auf zwei Nachkommastellen\nconst msg2 = { payload: dli };         // für den zweiten Output (DLI), gerundet auf zwei Nachkommastellen\n\n// Rückgabe der Nachrichten in einem Array, wobei jeder Index dem entsprechenden Output entspricht\nreturn [msg1, msg2];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2540,"y":180,"wires":[["ad4ab75f382b18f8","4514863886914953"],["ad4ab75f382b18f8","0249561a3fec1f56"]]},{"id":"ad4ab75f382b18f8","type":"debug","z":"3752d27d7587c957","g":"fb83b7a26af05fdc","name":"debug 58","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2500,"y":120,"wires":[]},{"id":"7cea495731d0be12","type":"api-current-state","z":"3752d27d7587c957","g":"fb83b7a26af05fdc","name":"Veggi LX","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.veggilightintense","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":2300,"y":160,"wires":[["d6870c9a6b9ceba0"]]},{"id":"38358691bf1511a9","type":"comment","z":"3752d27d7587c957","g":"c91e1e1018209c58","name":"NOT IMPLEMNTED RIGHT NOW","info":"","x":3750,"y":1720,"wires":[]},{"id":"fbba94c4d9cbdadb","type":"comment","z":"3752d27d7587c957","g":"9309ba9f15bdd552","name":"NOT READY","info":"","x":3830,"y":1900,"wires":[]},{"id":"db06e129a47a81f9","type":"debug","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"debug 214","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":3920,"y":680,"wires":[]},{"id":"c9de3550e05cf591","type":"link in","z":"3752d27d7587c957","name":"Env","links":["265fe00ebc822be2"],"x":125,"y":1060,"wires":[[]]},{"id":"2f7f44cc5475aa9e","type":"comment","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"VPD-Perfektion","info":"","x":1880,"y":440,"wires":[]},{"id":"a0b3236b810a1d68","type":"link in","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"VPD-Perfektion","links":["128a30397aed36be"],"x":1805,"y":480,"wires":[["b4d17b12450acac5"]]},{"id":"89b4bb0beb9173d1","type":"function","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"VPD State Values","func":"const plantStages = {\n    Germination: [0.42, 0.78], // Optimaler VPD-Bereich für Keimung bei 25-30°C\n    Clones: [0.42, 0.78],      // Optimaler VPD-Bereich für Klone bei 25-30°C\n    EarlyVeg: [0.55, 0.85],    // Optimaler VPD-Bereich für frühe Vegetation bei 20-25°C\n    MidVeg: [0.85, 1.1],      // Optimaler VPD-Bereich für mittlere Vegetation bei 20-25°C\n    LateVeg: [0.85, 1.2],     // Optimaler VPD-Bereich für späte Vegetation bei 20-25°C\n    EarlyFlower: [1, 1.25], // Optimaler VPD-Bereich für frühe Blüte bei 20-25°C\n    MidFlower: [1.1, 1.4],   // Optimaler VPD-Bereich für mittlere Blüte bei 20-25°C\n    LateFlower: [1.2, 1.6],  // Optimaler VPD-Bereich für späte Blüte bei 20-25°C\n};\n\n\n\n// Beispiel, wie msg.payload gesetzt wird\n// msg.payload = \"LateVeg\"; // Kommentieren Sie diese Zeile aus, um den tatsächlichen msg.payload zu verwenden\n\n// Prüfen, ob das Wachstumsstadium im plantStages-Objekt vorhanden ist\nif (plantStages.hasOwnProperty(msg.payload)) {\n    // Setzen des VPD-Wertes aus dem plantStages-Objekt\n    msg.payload = plantStages[msg.payload];\n} else {\n    // Fehlermeldung, wenn das Wachstumsstadium nicht gefunden wurde\n    msg.payload = \"Unbekanntes Wachstumsstadium\";\n\n}\nmsg.perfektion = \"VPDStageValue\"\ndelete msg.data;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2170,"y":480,"wires":[["b41b4e4f56a8bfdd","bcc5756283e66c56"]]},{"id":"b41b4e4f56a8bfdd","type":"join","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"VPDWish","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":2050,"y":580,"wires":[["97bb26a5c0f5bb2b"]]},{"id":"97bb26a5c0f5bb2b","type":"function","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"VPD Handler Array Value","func":"const tolerance = 0.00; // Toleranzwert für die VPD-Anpassung\n\n// Der aktuelle VPD-Wert wird aus dem Payload geholt und in eine Zahl umgewandelt.\nconst currentVPD = parseFloat(msg.payload.currentVPD);\n\n// Ziel-VPD-Bereich wird aus dem Payload geholt.\nconst targetVPDRange = msg.payload.targetVPD;\n\n// Logging der aktuellen VPD und Ziel-VPD-Bereich zur Überprüfung und Debugging.\nnode.warn(`Veggi-VPD array between: ${targetVPDRange[0]} and ${targetVPDRange[1]}`);\n\n// Berechnung der prozentualen Abweichung vom Ziel-VPD und Rundung auf ganze Zahlen\nconst percentDifference = Math.round(currentVPD < targetVPDRange[0] \n    ? ((currentVPD - targetVPDRange[0]) / targetVPDRange[0]) * 100 \n    : ((currentVPD - targetVPDRange[1]) / targetVPDRange[1]) * 100);\n\n// Funktion zur Berechnung der notwendigen Anpassungen basierend auf der Differenz zum VPD-Zielbereich.\nfunction calculateAdjustment(currentVPD, targetVPDRange) {\n    // Wenn der aktuelle VPD unter dem minimalen Zielbereich liegt, Anpassungen vornehmen, um VPD zu erhöhen.\n    if (currentVPD < targetVPDRange[0] - tolerance) {\n        node.warn(`Veggi-VPD:: ${currentVPD} zu gering. Erhöhe Temp oder verringere die Feuchtigkeit`);\n        node.warn(`Veggi % VPD Target: ${percentDifference} %`);\n        return {\n            exhaustSpeed: \"increased\",      // Erhöht die Abluftgeschwindigkeit, um feuchte Luft herauszuziehen\n            humidifier: \"reduced\",          // Schaltet den Luftbefeuchter aus, um Feuchtigkeit zu reduzieren\n            dehumidifier: \"increased\",       // Schaltet den Luftentfeuchter an, um Feuchtigkeit zu reduzieren\n            heaterFan: \"increased\",         // Schaltet den Beheizer an, um die Feuchtigkeit zu reduzieren und Temp zu erhöhen\n            coolerFan: \"reduced\",           // Schaltet den Kühler an, um die Feuchtigkeit zu erhöhen und Temp zu verringern\n            ventsALL: \"increased\",          // Erhöht die Geschwindigkeit der oberen Belüftung, um mehr trockene Luft einzulassen\n            ventsTopSpeed: \"increased\",     // Erhöht die Geschwindigkeit der oberen Belüftung, um mehr trockene Luft einzulassen\n            ventsDownSpeed: \"increased\",    // Erhöht die Geschwindigkeit der unteren Belüftung\n            lightIntensity: \"increased\"     // Erhöht die Lichtintensität, um die Temperatur zu steigern (wenn das die Temperatur beeinflusst)\n        };\n        \n    }\n    // Wenn der aktuelle VPD über dem maximalen Zielbereich liegt, Anpassungen vornehmen, um VPD zu senken.\n    else if (currentVPD > targetVPDRange[1] + tolerance) {\n        node.warn(`Veggi-VPD: ${currentVPD} zu hoch. Verringere Temp oder erhöhe die Feuchtigkeit`);\n        node.warn(`Veggi % VPD Target: ${percentDifference} %`);\n        return {\n            exhaustSpeed: \"reduced\",    // Reduziert die Abluftgeschwindigkeit, hält feuchte Luft im Raum\n            humidifier: \"increased\",    // Schaltet den Luftbefeuchter ein, um Feuchtigkeit zu erhöhen\n            dehumidifier: \"reduced\",    // Schaltet den Luftentfeuchter aus, um Feuchtigkeit zu erhöhen\n            heaterFan: \"reduced\",       // Schaltet den Heizer aus, um die Temperatur zu verringern\n            coolerFan: \"increased\",     // Schaltet den Kühler an, um die Temperatur zu verringern\n            ventsALL: \"reduced\",        // Reduziert die Geschwindigkeit der Belüftung, um mehr feuchte Luft zu halten\n            ventsTopSpeed: \"reduced\",   // Reduziert die Geschwindigkeit der oberen Belüftung\n            ventsDownSpeed: \"reduced\",  // Reduziert die Geschwindigkeit der unteren Belüftung\n            lightIntensity: \"reduced\"   // Verringert die Lichtintensität, um die Temperatur zu senken (wenn das die Temperatur beeinflusst)\n        };\n    }\n    // Wenn der VPD im Zielbereich liegt, sind keine Anpassungen erforderlich.\n    node.warn(`Veggi-VPD: ${currentVPD} im gewünschten Bereich`);\n    return {\n        exhaustSpeed: \"unchanged\",\n        humidifier: \"unchanged\",\n        dehumidifier: \"unchanged\",    \n        heaterFan: \"unchanged\",        \n        coolerFan: \"unchanged\",        \n        ventsALL: \"unchanged\",       \n        ventsTopSpeed: \"unchanged\",\n        ventsDownSpeed: \"unchanged\",\n        lightIntensity: \"unchanged\"\n    };\n}\n\n// Entscheidungslogik zur Steuerung der Umgebungsbedingungen, nutzt die calculateAdjustment Funktion.\nconst adjustments = calculateAdjustment(currentVPD, targetVPDRange);\n\n// Berechnung der prozentualen Abweichung und Hinzufügen zum Payload\nmsg.payload = {\n    exhaustSpeed: adjustments.exhaustSpeed,\n    humidifier: adjustments.humidifier,\n    dehumidifier: adjustments.dehumidifier,\n    heaterFan: adjustments.heaterFan,\n    coolerFan: adjustments.coolerFan,\n    ventsALL: adjustments.ventsALL,\n    ventsTopSpeed: adjustments.ventsTopSpeed,\n    ventsDownSpeed: adjustments.ventsDownSpeed,\n    lightIntensity: adjustments.lightIntensity,\n    percentDifference: percentDifference\n};\n\nmsg.perfektion = \"VPDActions\";\n\n// Rückgabe des modifizierten Payloads für weitere Verwendung im Flow.\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2250,"y":580,"wires":[["50586f7873597b1b","bcc5756283e66c56","792c2d12847b3c30"]]},{"id":"50586f7873597b1b","type":"function","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"Check What Do","func":"let outputs = [null, null, null, null, null, null, null, null, null];\n\nvar percentDifference = msg.payload.percentDifference\n\n// Abluft\nif (msg.payload.exhaustSpeed === \"unchanged\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n} else if (msg.payload.exhaustSpeed === \"increased\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n} else if (msg.payload.exhaustSpeed === \"reduced\") {\n    outputs[0] = { payload: { value: msg.payload.exhaustSpeed, percentDifference: percentDifference }, topic: \"exhaustSet\" };\n}\n\n// Humidifier\nif (msg.payload.humidifier === \"unchanged\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n} else if (msg.payload.humidifier === \"increased\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n} else if (msg.payload.humidifier === \"reduced\") {\n    outputs[1] = { payload: { value: msg.payload.humidifier, percentDifference: percentDifference }, topic: \"humidifierSet\" };\n}\n\n// Dehumidifier\nif (msg.payload.dehumidifier === \"unchanged\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n} else if (msg.payload.dehumidifier === \"increased\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n} else if (msg.payload.dehumidifier === \"reduced\") {\n    outputs[2] = { payload: { value: msg.payload.dehumidifier, percentDifference: percentDifference }, topic: \"dehumidifierSet\" };\n}\n\n// HeaterFan\nif (msg.payload.heaterFan === \"unchanged\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n} else if (msg.payload.heaterFan === \"increased\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n} else if (msg.payload.heaterFan === \"reduced\") {\n    outputs[3] = { payload: { value: msg.payload.heaterFan, percentDifference: percentDifference }, topic: \"heaterSet\" };\n}\n\n// CoolerFan\nif (msg.payload.coolerFan === \"unchanged\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n} else if (msg.payload.coolerFan === \"increased\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n} else if (msg.payload.coolerFan === \"reduced\") {\n    outputs[4] = { payload: { value: msg.payload.coolerFan, percentDifference: percentDifference }, topic: \"coolerSet\" };\n}\n\n// LightIntensity\nif (msg.payload.lightIntensity === \"unchanged\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n} else if (msg.payload.lightIntensity === \"increased\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n} else if (msg.payload.lightIntensity === \"reduced\") {\n    outputs[5] = { payload: { value: msg.payload.lightIntensity, percentDifference: percentDifference }, topic: \"lightIntensitySet\" };\n}\n\n// VentsALL\nif (msg.payload.ventsTopSpeed === \"unchanged\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n} else if (msg.payload.ventsALL === \"increased\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n} else if (msg.payload.ventsALL === \"reduced\") {\n    outputs[6] = { payload: { value: msg.payload.ventsALL, percentDifference: percentDifference }, topic: \"ventsALLSet\" };\n}\n\n// VentsTopSpeed\nif (msg.payload.ventsTopSpeed === \"unchanged\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n} else if (msg.payload.ventsTopSpeed === \"increased\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n} else if (msg.payload.ventsTopSpeed === \"reduced\") {\n    outputs[7] = { payload: { value: msg.payload.ventsTopSpeed, percentDifference: percentDifference }, topic: \"ventsTopSpeedSet\" };\n}\n\n// VentsDownSpeed\nif (msg.payload.ventsDownSpeed === \"unchanged\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n} else if (msg.payload.ventsDownSpeed === \"increased\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n} else if (msg.payload.ventsDownSpeed === \"reduced\") {\n    outputs[8] = { payload: { value: msg.payload.ventsDownSpeed, percentDifference: percentDifference }, topic: \"ventsDownSpeedSet\" };\n}\n\n\n\nreturn outputs;\n","outputs":9,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2240,"y":680,"wires":[["f67b812477b0ee36"],["b418161007dfaaea"],["a41d99da1a516c1a"],["cf371755340339d9"],["f2dbe7f4fc63732c"],["0146bdd163646e65"],["944e631d1a25585e"],["944e631d1a25585e"],["944e631d1a25585e"]]},{"id":"d8ca44ad455dbdcc","type":"poll-state","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"currentVPD","server":"5772bf4c.b461d","version":3,"exposeAsEntityConfig":"","updateInterval":"30","updateIntervalType":"num","updateIntervalUnits":"seconds","outputInitially":true,"outputOnChanged":true,"entityId":"sensor.vpdvegi","stateType":"num","ifState":"","ifStateType":"num","ifStateOperator":"is","outputs":1,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"currentVPD","valueType":"str"},{"property":"perfektion","propertyType":"msg","value":"currentVPD","valueType":"str"}],"x":1970,"y":640,"wires":[["b41b4e4f56a8bfdd","bcc5756283e66c56"]]},{"id":"b4d17b12450acac5","type":"api-current-state","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"PlantState","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"select.veggiplantstageselect","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"targetVPD","valueType":"str"},{"property":"perfektion","propertyType":"msg","value":"targetVPD","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1930,"y":480,"wires":[["89b4bb0beb9173d1","c75be806c71aae08"]]},{"id":"792c2d12847b3c30","type":"debug","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"debug 201","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":2290,"y":540,"wires":[]},{"id":"825ed8cac87f6ba8","type":"link out","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"ExhaustCtrlVeggi","mode":"link","links":["9f42bb9bae27290b","bfaa49e536cfc79a","74627de8274cdc7c"],"x":3075,"y":460,"wires":[]},{"id":"9f42bb9bae27290b","type":"link in","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"ExhaustCtrlVeggi","links":["138c5865040f68a3","2236e755ab8aaf88","825ed8cac87f6ba8","f2f78b1b519cfec4","f67b812477b0ee36"],"x":3535,"y":680,"wires":[["e67e4105200aba9a"]]},{"id":"f67b812477b0ee36","type":"link out","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"ExhaustCtrlVeggi","mode":"link","links":["9f42bb9bae27290b","bfaa49e536cfc79a","74627de8274cdc7c"],"x":2515,"y":560,"wires":[]},{"id":"138c5865040f68a3","type":"link out","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"ExhaustCtrlVeggi","mode":"link","links":["9f42bb9bae27290b","bfaa49e536cfc79a","74627de8274cdc7c"],"x":2505,"y":960,"wires":[]},{"id":"2236e755ab8aaf88","type":"link out","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"ExhaustCtrlVeggi","mode":"link","links":["9f42bb9bae27290b","bfaa49e536cfc79a","74627de8274cdc7c"],"x":2525,"y":1520,"wires":[]},{"id":"a47d72d27f76363f","type":"link out","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"HumidifierCtrlVeggi","mode":"link","links":["a8254bcb0725889b","44693abeb1238a60","78de3f8a44f2643f"],"x":2505,"y":1000,"wires":[]},{"id":"3c8af30af5e1621b","type":"link out","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"DeHumidifierCtrlVeggi","mode":"link","links":["9137501bc6555693","f466171fb84cbf4e"],"x":2505,"y":1040,"wires":[]},{"id":"a8254bcb0725889b","type":"link in","z":"3752d27d7587c957","g":"2651868e58bb1778","name":"HumidifierCtrlVeggi","links":["1bb3dfe91ae46289","a47d72d27f76363f","b418161007dfaaea","b9ad6351e42daadf","f58811e4189b45cc","f782f6849722df96"],"x":3475,"y":860,"wires":[["0eca8b29f89f4926"]]},{"id":"f58811e4189b45cc","type":"link out","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"HumidifierCtrlVeggi","mode":"link","links":["a8254bcb0725889b","44693abeb1238a60","78de3f8a44f2643f"],"x":3075,"y":500,"wires":[]},{"id":"b418161007dfaaea","type":"link out","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"HumidifierCtrlVeggi","mode":"link","links":["a8254bcb0725889b","44693abeb1238a60","78de3f8a44f2643f"],"x":2515,"y":600,"wires":[]},{"id":"1bb3dfe91ae46289","type":"link out","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"HumidifierCtrlVeggi","mode":"link","links":["a8254bcb0725889b","44693abeb1238a60","78de3f8a44f2643f"],"x":2525,"y":1560,"wires":[]},{"id":"3084915b3c3153eb","type":"link out","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"DeHumidifierCtrlVeggi","mode":"link","links":["9137501bc6555693","f466171fb84cbf4e"],"x":3075,"y":540,"wires":[]},{"id":"a41d99da1a516c1a","type":"link out","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"DeHumidifierCtrlVeggi","mode":"link","links":["9137501bc6555693","f466171fb84cbf4e"],"x":2515,"y":640,"wires":[]},{"id":"9137501bc6555693","type":"link in","z":"3752d27d7587c957","g":"ecb02d38c4118377","name":"DeHumidifierCtrlVeggi","links":["0bc7a561ce1902e2","3084915b3c3153eb","3c8af30af5e1621b","9d8c7dcd95cc9c41","a41d99da1a516c1a","b0f6711d749c2fd9"],"x":3475,"y":1020,"wires":[["f81d8c962ee7f1d5"]]},{"id":"b0f6711d749c2fd9","type":"link out","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"DeHumidifierCtrlVeggi","mode":"link","links":["9137501bc6555693","f466171fb84cbf4e"],"x":2525,"y":1600,"wires":[]},{"id":"228540ed8dcab290","type":"link out","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"HeaterCtrlVeggi","mode":"link","links":["d204071a89b51356","f3640ede9c1581a9"],"x":3075,"y":580,"wires":[]},{"id":"d204071a89b51356","type":"link in","z":"3752d27d7587c957","g":"082054cd4a9a0dc1","name":"HeaterCtrlVeggi","links":["15554571e89dc2d6","228540ed8dcab290","24cc24d1f793a1cb","285d7443a92664d8","cf371755340339d9","d01d126af31e972b"],"x":3475,"y":1400,"wires":[["2fe236b6ecf4be1a"]]},{"id":"cf371755340339d9","type":"link out","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"HeaterCtrlVeggi","mode":"link","links":["d204071a89b51356","f3640ede9c1581a9"],"x":2515,"y":680,"wires":[]},{"id":"15554571e89dc2d6","type":"link out","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"HeaterCtrlVeggi","mode":"link","links":["d204071a89b51356","f3640ede9c1581a9"],"x":2505,"y":1080,"wires":[]},{"id":"d01d126af31e972b","type":"link out","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"HeaterCtrlVeggi","mode":"link","links":["d204071a89b51356","f3640ede9c1581a9"],"x":2525,"y":1640,"wires":[]},{"id":"95ed2ef55d637d57","type":"link out","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"CoolerCtrlVeggi","mode":"link","links":["9e528fbb25e69fba"],"x":3075,"y":620,"wires":[]},{"id":"9e528fbb25e69fba","type":"link in","z":"3752d27d7587c957","g":"d634b49c93972c8c","name":"CoolerCtrlVeggi","links":["95ed2ef55d637d57","03c00d49f67a6651","70c88c449da62baf","f2dbe7f4fc63732c"],"x":3475,"y":1200,"wires":[["f0d2d59e9fb71a11"]]},{"id":"70c88c449da62baf","type":"link out","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"CoolerCtrlVeggi","mode":"link","links":["9e528fbb25e69fba"],"x":2505,"y":1120,"wires":[]},{"id":"03c00d49f67a6651","type":"link out","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"CoolerCtrlVeggi","mode":"link","links":["9e528fbb25e69fba"],"x":2525,"y":1680,"wires":[]},{"id":"7968566b6c484c08","type":"link in","z":"3752d27d7587c957","g":"c91e1e1018209c58","name":"LightsCtrlVeggi","links":["0146bdd163646e65","44c482979d3323d4","67864bb87afa5ecf","a6c380ef2d09a380"],"x":3495,"y":1720,"wires":[["bf178d140cd3a947"]]},{"id":"cc32bf965e21b62c","type":"link in","z":"3752d27d7587c957","g":"9309ba9f15bdd552","name":"VentsCtrlVeggi","links":["944e631d1a25585e","c07c821dd022801c","eb30bf3343a316af","fba3fd82020bcd3e"],"x":3495,"y":1900,"wires":[["15db15c7e2de4370"]]},{"id":"67864bb87afa5ecf","type":"link out","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"LightsCtrlVeggi","mode":"link","links":["e7617027bfc9e06c","7968566b6c484c08"],"x":2505,"y":1180,"wires":[]},{"id":"a6c380ef2d09a380","type":"link out","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"LightsCtrlVeggi","mode":"link","links":["e7617027bfc9e06c","7968566b6c484c08"],"x":2525,"y":1720,"wires":[]},{"id":"f2dbe7f4fc63732c","type":"link out","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"ColerCtrlVeggi","mode":"link","links":["9e528fbb25e69fba"],"x":2515,"y":720,"wires":[]},{"id":"44c482979d3323d4","type":"link out","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"LightsCtrlVeggi","mode":"link","links":["e7617027bfc9e06c","7968566b6c484c08"],"x":3075,"y":660,"wires":[]},{"id":"eb30bf3343a316af","type":"link out","z":"3752d27d7587c957","g":"d14fa664d0413a5c","name":"VentsCtrlVeggi","mode":"link","links":["396daedee0600b1e","cc32bf965e21b62c"],"x":2525,"y":1760,"wires":[]},{"id":"c07c821dd022801c","type":"link out","z":"3752d27d7587c957","g":"6dd36616a92a87a4","name":"VentsCtrlVeggi","mode":"link","links":["396daedee0600b1e","cc32bf965e21b62c"],"x":2505,"y":1240,"wires":[]},{"id":"944e631d1a25585e","type":"link out","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"VentsCtrlVeggi","mode":"link","links":["cc32bf965e21b62c"],"x":2515,"y":800,"wires":[]},{"id":"fba3fd82020bcd3e","type":"link out","z":"3752d27d7587c957","g":"077c0666ef9f39f6","name":"VentsCtrlVeggi","mode":"link","links":["396daedee0600b1e","cc32bf965e21b62c"],"x":3075,"y":700,"wires":[]},{"id":"0146bdd163646e65","type":"link out","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"LightsCtrlVeggi","mode":"link","links":["e7617027bfc9e06c","7968566b6c484c08"],"x":2515,"y":760,"wires":[]},{"id":"a9ce176894e4219e","type":"comment","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"change this to the other if you want stepped","info":"","x":3630,"y":560,"wires":[]},{"id":"297a909f94262fbd","type":"comment","z":"3752d27d7587c957","g":"8ecdceb2353f84e1","name":"Percent Increase","info":"\nIncrease by calculated % Difference to target","x":3740,"y":500,"wires":[]},{"id":"18cbb2d076da7f4e","type":"function","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"Exhaust Setup","func":"// Hilfsfunktion zur Überprüfung, ob ein Wert numerisch ist\nconst isNumeric = (value) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n\n// Funktion zur Bestimmung des dutyCycle-Werts\nconst findDutyCycle = (exhaustArray) => {\n    if (exhaustArray.length === 0) {\n        return null; // Keine Werte zu verarbeiten, wenn das Array leer ist\n    }\n    for (let i = 0; i < exhaustArray.length; i++) {\n        if (isNumeric(exhaustArray[i].value)) {\n            return parseInt(exhaustArray[i].value, 10);\n        }\n    }\n    return null; // Falls kein numerischer Wert gefunden wurde\n};\n\nlet outputs = [null, null, null, null]; // Array für vier Ausgänge\n\n// Zustand der Abluft und Geschwindigkeit aus der Payload extrahieren\nconst exhaustSpeed = msg.payload.exhaustSet.value || 'unchanged'; // Anpassung hier: falls kein Wert vorhanden ist, setze auf 'unchanged'\nlet exhaustState = 'off'; // Standardwert setzen, falls kein Zustand gefunden wird\nif (msg.payload.Exhaust && msg.payload.Exhaust.length > 0) {\n    const exhaustSwitch = msg.payload.Exhaust.find(e => e.entity_id && e.entity_id.toLowerCase().includes(\"switch\"));\n    if (exhaustSwitch && exhaustSwitch.value) {\n        exhaustState = exhaustSwitch.value;\n    }\n}\n\nconst dutyCycle = findDutyCycle(msg.payload.Exhaust) || 10; // Anpassung hier: falls kein Wert vorhanden ist, setze auf 10\n\nlet newDutyCycle = dutyCycle;\n\n// Berechnung des neuen Duty Cycle basierend auf festen Schritten\nif (exhaustSpeed === 'increased') {\n    newDutyCycle = dutyCycle + 5;\n} else if (exhaustSpeed === 'reduced') {\n    newDutyCycle = dutyCycle - 5;\n}\n\n// Stellen Sie sicher, dass der neue Duty Cycle innerhalb der Grenzen liegt\nnewDutyCycle = Math.min(95, Math.max(10, newDutyCycle));\n\n// Abluft starten auf dem ersten Ausgang, wenn sie aus ist und erhöht werden muss\nif (exhaustSpeed === \"increased\" && exhaustState === \"off\") {\n    outputs[0] = { payload: \"Starte Abluft\", topic: \"Start\" };\n    return outputs;\n}\n\n// Abluft-Geschwindigkeit erhöhen, wenn sie bereits eingeschaltet ist\nif (exhaustSpeed === \"increased\" && exhaustState === \"on\") {\n    outputs[2] = { payload: newDutyCycle.toString(), topic: \"Increase\" };\n    return outputs;\n}\n\n// Abluft stoppen auf dem zweiten Ausgang, wenn die Geschwindigkeit reduziert wird und der Duty Cycle sehr niedrig ist\nif (exhaustSpeed === \"reduced\" && exhaustState === \"on\" && newDutyCycle <= 10) {\n    outputs[1] = { payload: \"Stoppe Abluft\", topic: \"Stop\" };\n    return outputs;\n} else if (exhaustSpeed === \"reduced\" && exhaustState === \"on\") {\n    outputs[2] = { payload: newDutyCycle.toString(), topic: \"Decrease\" };\n    return outputs;\n}\n\n// Warnung ausgeben, wenn versucht wird, die Abluftgeschwindigkeit zu reduzieren, obwohl sie bereits aus ist\nif (exhaustSpeed === \"reduced\" && exhaustState === \"off\") {\n    outputs[1] = { payload: \"Abluft bereits gestoppt, kann nicht weiter reduziert werden\", topic: \"AlreadyStopped\" };\n    return outputs;\n}\n\n// Nichts tun, wenn keine Änderung erforderlich ist\nif (exhaustSpeed === \"unchanged\") {\n    outputs[3] = { payload: \"Abluft unverändert, keine Aktion erforderlich\", topic: \"Nothing\" };\n    return outputs;\n}\n\nreturn outputs; // Rückgabe des Ausgangsarrays\n","outputs":4,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":4100,"y":300,"wires":[["8670816afac14164","72f5c3bdfb3190bc"],["8670816afac14164","533b7f798734327f"],["edf09569bc23fb4f","8670816afac14164"],["8670816afac14164"]]},{"id":"25559f8f74dbacc5","type":"http request","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"DutyPostChange","method":"POST","ret":"txt","paytoqs":"ignore","url":"http://10.1.1.235:5533/air/ctrl","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[{"keyType":"other","keyValue":"Content-Type","valueType":"other","valueValue":"application/json"}],"x":4510,"y":320,"wires":[[]]},{"id":"edf09569bc23fb4f","type":"function","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"DutyChanger","func":"\nconst NewDuty = msg.payload\n\nmsg.payload = { \"newDuty\": NewDuty}\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":4310,"y":320,"wires":[["25559f8f74dbacc5"]]},{"id":"b4d4b90fe3a6ec9c","type":"join","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"exhasutData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":3900,"y":380,"wires":[["18cbb2d076da7f4e","8670816afac14164","d952d70aed5c4421"]]},{"id":"01b7df04eed13a74","type":"link in","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"ExhasutData","links":[],"x":3845,"y":300,"wires":[["b4d4b90fe3a6ec9c"]]},{"id":"72f5c3bdfb3190bc","type":"link out","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"ExhaustVeggiON","mode":"link","links":["09f51aa364202656"],"x":4265,"y":260,"wires":[]},{"id":"533b7f798734327f","type":"link out","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"ExhaustVeggiOFF","mode":"link","links":["95404f058f30b296"],"x":4315,"y":280,"wires":[]},{"id":"8670816afac14164","type":"debug","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"debug 272","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":4090,"y":240,"wires":[]},{"id":"d952d70aed5c4421","type":"debug","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"debug 273","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":4100,"y":380,"wires":[]},{"id":"2e2215015fc0b3bd","type":"comment","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"change this to the other if you want stepped","info":"","x":3630,"y":280,"wires":[]},{"id":"74627de8274cdc7c","type":"link in","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"ExhaustCtrlVeggi","links":["138c5865040f68a3","2236e755ab8aaf88","825ed8cac87f6ba8","f2f78b1b519cfec4","f67b812477b0ee36"],"x":3705,"y":380,"wires":[["b4d4b90fe3a6ec9c"]]},{"id":"e51b97599d8ebb10","type":"comment","z":"3752d27d7587c957","g":"b377a7d2d8154846","name":"Steped Increase Disabled BY default ","info":"\nSteps by 5% increase on any input  - & + ","x":3700,"y":200,"wires":[]},{"id":"f7adc2a82d261c1c","type":"debug","z":"3752d27d7587c957","name":"Cooler","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":430,"y":800,"wires":[]},{"id":"406716c4908964f0","type":"debug","z":"3752d27d7587c957","name":"Heater","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":430,"y":840,"wires":[]},{"id":"53744e9d23f8df14","type":"link out","z":"3752d27d7587c957","name":"Cooler","mode":"link","links":["695c16207afdcdaa"],"x":575,"y":800,"wires":[]},{"id":"9cebbdc13963270f","type":"link out","z":"3752d27d7587c957","name":"Heater","mode":"link","links":["548fd1b0ea533144"],"x":575,"y":840,"wires":[]},{"id":"1124f430fe2c02cc","type":"join","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"SoilDataFlower","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":false,"accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1370,"y":400,"wires":[["ec6f92f6a77bd82b"]]},{"id":"d062b4edfee7bd40","type":"link out","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"SoilDataVeggi","mode":"link","links":["0b16177f66a2192b"],"x":1665,"y":400,"wires":[]},{"id":"0b16177f66a2192b","type":"link in","z":"3752d27d7587c957","name":"SoilDataVeggi","links":["d062b4edfee7bd40"],"x":65,"y":1320,"wires":[["056d5cc6f75ccd6a"]]},{"id":"2d1d43cca2adc804","type":"link out","z":"3752d27d7587c957","name":"VeggiSwitches","mode":"link","links":["e4376c576a7cc952"],"x":575,"y":600,"wires":[]},{"id":"e4376c576a7cc952","type":"link in","z":"3752d27d7587c957","name":"VeggiSwitches","links":["2d1d43cca2adc804"],"x":125,"y":1140,"wires":[["28aadf7d5abb0caa"]]},{"id":"28aadf7d5abb0caa","type":"debug","z":"3752d27d7587c957","name":"debug 277","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":250,"y":1140,"wires":[]},{"id":"b5f61a40cd90bf16","type":"debug","z":"3752d27d7587c957","name":"Pump","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":430,"y":880,"wires":[]},{"id":"f3a93cd22e692bd5","type":"link out","z":"3752d27d7587c957","name":"VegPump","mode":"link","links":["6c16f887274bdb5a"],"x":575,"y":880,"wires":[]},{"id":"6c16f887274bdb5a","type":"link in","z":"3752d27d7587c957","name":"VegPump","links":["f3a93cd22e692bd5"],"x":65,"y":1280,"wires":[["056d5cc6f75ccd6a"]]},{"id":"81252048b9753437","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Heater-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors) {\n    const dehumidifierObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"dehumidifier\") || \n        sensor.entity_id.includes(\"humidity\")\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors);\n\n// Ausgabe des Dehumidifier-Wertes zur Überprüfung\n// node.warn(`Dehumidifier-Wert: ${dehumidifierValue}`);\n\n// Optional: Speichern des Dehumidifier-Wertes in msg zur weiteren Verwendung\nmsg.payload = dehumidifierValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":1180,"wires":[[]]},{"id":"174996762a37d6ac","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Cooler-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors) {\n    const dehumidifierObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"dehumidifier\") || \n        sensor.entity_id.includes(\"humidity\")\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors);\n\n// Ausgabe des Dehumidifier-Wertes zur Überprüfung\n// node.warn(`Dehumidifier-Wert: ${dehumidifierValue}`);\n\n// Optional: Speichern des Dehumidifier-Wertes in msg zur weiteren Verwendung\nmsg.payload = dehumidifierValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":1140,"wires":[[]]},{"id":"54915a0b42cbb531","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"Pump-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Sensorwertes\nfunction findSensorValue(sensors, filter) {\n    const sensorObject = sensors.find(sensor =>\n        sensor.entity_id.includes(filter)\n    );\n    return sensorObject ? sensorObject.value : null;\n}\n\n// Funktion zum Konvertieren des Sensorwertes in den entsprechenden Typ\nfunction convertType(value, type) {\n    switch (type) {\n        case \"number\":\n            return Number(value);\n        case \"boolean\":\n            return value === \"on\" || value === \"true\";\n        case \"string\":\n            return String(value);\n        default:\n            return value;\n    }\n}\n\n// Filterwerte und zugehörige Typen für die einzelnen Sensoren\nconst filterValues = [\n    { filter: \"nextpumpingaction\", type: \"number\" },\n    { filter: \"pumpinglefttime\", type: \"number\" },\n    { filter: \"pumpon\", type: \"boolean\" },\n    { filter: \"pumpautorun\", type: \"boolean\" },\n    { filter: \"pumpwatteringduration\", type: \"number\" },\n    { filter: \"pumpinghours\", type: \"number\" }\n];\n\n// Erstellen eines Arrays von Nachrichten für die verschiedenen Ausgänge\nlet outputMsgs = filterValues.map(item => {\n    const value = findSensorValue(sensors, item.filter);\n    // Node.warn kann verwendet werden, um den Wert vor der Umwandlung zu überprüfen\n    //node.warn(`Filter: ${item.filter}, Value: ${value}, Type: ${item.type}`);\n    return { payload: convertType(value, item.type) };\n});\n\n// Rückgabe der Nachrichten zur Weiterverarbeitung im Flow\nreturn outputMsgs;\n","outputs":6,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":1360,"wires":[["b5493a3f55459205","55581d4b6f9bb716"],["b5493a3f55459205","836058dea98edfbb"],["b5493a3f55459205","1b2af9e442403c55"],["b5493a3f55459205","c2dafe1ccb11a237"],["b5493a3f55459205","f84213a3ac3c506d"],["b5493a3f55459205","9f481796c50b24ca"]]},{"id":"b5493a3f55459205","type":"debug","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"debug 282","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":930,"y":1460,"wires":[]},{"id":"9f481796c50b24ca","type":"ha-number","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiWateringIntervall","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"48655aeb6b0aa1e8","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1360,"y":1580,"wires":[[]]},{"id":"f84213a3ac3c506d","type":"ha-number","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiWateringDuration","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"e447ef302f778fa1","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1360,"y":1520,"wires":[[]]},{"id":"eed4272deb53836f","type":"ha-switch","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiAutoPump","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"23c38aaab340822f","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1340,"y":1460,"wires":[[],[]]},{"id":"063773e3770ed023","type":"ha-switch","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiPumpOn","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"97a4402c3b7ed861","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1330,"y":1400,"wires":[[],[]]},{"id":"0045e4e34e996967","type":"ha-text","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiNextPumpingIntervall","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"a10204452fe11d95","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1370,"y":1280,"wires":[[]]},{"id":"bb4422cb843fa184","type":"ha-text","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiPumpingDuration","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"af44ccc93e488cc4","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1360,"y":1340,"wires":[[]]},{"id":"55581d4b6f9bb716","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"Add Min String","func":"let data = msg.payload\n\nmsg.payload = `${data} Minutes`\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1120,"y":1280,"wires":[["0045e4e34e996967"]]},{"id":"836058dea98edfbb","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"Add Sec String","func":"let data = msg.payload\n\nmsg.payload = `${data} Seconds`\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1120,"y":1340,"wires":[["bb4422cb843fa184"]]},{"id":"1b2af9e442403c55","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"set Enable","func":"msg.enable = msg.payload\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":1380,"wires":[["063773e3770ed023"]]},{"id":"c2dafe1ccb11a237","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"set Enable","func":"msg.enable = msg.payload\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":1420,"wires":[["eed4272deb53836f"]]},{"id":"ec6f92f6a77bd82b","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"SetTopic","func":"msg.topic = \"SoilData\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1560,"y":400,"wires":[["d062b4edfee7bd40"]]},{"id":"056d5cc6f75ccd6a","type":"join","z":"3752d27d7587c957","name":"WatteringData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":false,"accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":240,"y":1300,"wires":[["f406cd1624d2e03f","eac37633fbb21e3c"]]},{"id":"f406cd1624d2e03f","type":"debug","z":"3752d27d7587c957","name":"debug 284","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":510,"y":1360,"wires":[]},{"id":"eac37633fbb21e3c","type":"function","z":"3752d27d7587c957","name":"MinMax_SoilWattering","func":"// Function Node\nconst nextPump = parseInt(msg.payload.pump[0].value); // In Minuten bis zur nächsten Bewässerung\nconst pumpingLeftTime = parseInt(msg.payload.pump[1].value); // Verbleibende Zeit der Pumpenphase\n\nconst isPumpOn = msg.payload.pump[3].value === 'on'; // Pumpe an oder aus\nconst isAutoRunOn = msg.payload.pump[4].value === 'on'; // Automatischer Modus an oder aus\n\nconst wateringDuration = parseInt(msg.payload.pump[5].value); // Bewässerungsdauer in Minuten\nconst wateringInterval = parseInt(msg.payload.pump[6].value) * 60; // Bewässerungsintervall in Minuten (umgerechnet in Stunden)\n\nconst soilMoisture = parseInt(msg.payload.SoilData.moisture); // Bodenfeuchtigkeit\nconst soilEC = parseInt(msg.payload.SoilData.conductivity); // Leitfähigkeit des Bodens\n\nconst minSoilMoisture = 10; // Mindestbodenfeuchtigkeit für sofortige Bewässerung\nconst maxSoilMoisture = 50; // Maximale Bodenfeuchtigkeit zum Stoppen der Bewässerung\n\nlet command = 'OFF'; // Standardkommando\nlet newAutoRunOn = isAutoRunOn; // Standardmäßig aktueller Auto-Run-Zustand\n\nif (isAutoRunOn) {\n    // Automatischer Modus ist aktiv\n    if (soilMoisture < minSoilMoisture) {\n        command = 'ON'; // Sofort bewässern\n    } else if (soilMoisture >= maxSoilMoisture && isPumpOn) {\n        command = 'OFF'; // Bewässerung stoppen, wenn Bodenfeuchtigkeit ausreichend ist\n    }\n} else {\n    // Automatischer Modus ist nicht aktiv\n    if (soilMoisture < minSoilMoisture) {\n        command = 'ON'; // Sofort bewässern\n        newAutoRunOn = true; // Auto-Modus nach Bewässerung aktivieren\n    }\n}\n\nmsg.payload = {\n    soilMoisture,\n    soilEC,\n    command: command,\n    nextPump: nextPump,\n    pumpingLeftTime: pumpingLeftTime,\n    wateringDuration: wateringDuration,\n    wateringInterval: wateringInterval,\n    isAutoRunOn: newAutoRunOn ? 'on' : 'off'\n};\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":340,"y":1400,"wires":[["f406cd1624d2e03f"]]},{"id":"c75be806c71aae08","type":"debug","z":"3752d27d7587c957","g":"2f16034c5088356b","name":"debug 285","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1890,"y":520,"wires":[]},{"id":"5de3d083be69c9ff","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"vpdVegi","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"vpdVegi"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"pressure"},{"property":"unit_of_measurement","value":"kPa"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"fbd2ef51e597d808","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VegiAVGTemp","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VegiAVGTemp"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"temperature"},{"property":"unit_of_measurement","value":"°C"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"c918d481d80ee2dc","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VegiAVGHum","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VegiAVGHum"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"humidity"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"5772bf4c.b461d","type":"server","name":"OpenGrowBox","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true},{"id":"bb585a7e9b14d52e","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiAVGDewPoint","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiAVGDewPoint"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"temperature"},{"property":"unit_of_measurement","value":"°C"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"3bf46a3f240b688e","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiCO2","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiCO2"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"carbon_dioxide"},{"property":"unit_of_measurement","value":"ppm"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"6aeda981e19a8694","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiPressure","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiPressure"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"pressure"},{"property":"unit_of_measurement","value":"kPa"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"fdc22e77b0c5dbe3","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiMoisture","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiMoisture"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"moisture"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"3f8ce21d326f8670","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiBatterieDevices","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiBatterieDevices"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"battery"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"68810d13c01a98ba","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiRootTemp","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiRootTemp"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"temperature"},{"property":"unit_of_measurement","value":"°C"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"0a689f654f6cfecb","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiEC","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiEC"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"µS/cm"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"d3a9b3e22cb3c349","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiLightIntense","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiLightIntense"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":"illuminance"},{"property":"unit_of_measurement","value":"lx"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"cd5681d147a94f3e","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiPowerConsume","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiPowerConsume"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":"power"},{"property":"unit_of_measurement","value":"W"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"ba8566e09903f293","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiExhaustDuty","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiExhaustDuty"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":"battery"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"c8a22cfdbd11971c","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiExhaustState","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiExhaustState"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false},{"id":"a5f1cc19016994d1","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"DLIVegi","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"DLIVegi"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"mol/m²/d"},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false},{"id":"351be2fcdaadc9bd","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"PPFD_VEGI","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"PPFDVegi"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"µmol/m²s"},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false},{"id":"48655aeb6b0aa1e8","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiWateringIntervall","version":"6","entityType":"number","haConfig":[{"property":"name","value":"VeggiWateringIntervall"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"Hours"},{"property":"min_value","value":""},{"property":"max_value","value":""},{"property":"step_value","value":""},{"property":"mode","value":"auto"}],"resend":false,"debugEnabled":false},{"id":"e447ef302f778fa1","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiWateringDuration","version":"6","entityType":"number","haConfig":[{"property":"name","value":"VeggiWateringDuration"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"Seconds"},{"property":"min_value","value":20},{"property":"max_value","value":300},{"property":"step_value","value":""},{"property":"mode","value":"auto"}],"resend":false,"debugEnabled":false},{"id":"23c38aaab340822f","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiAutoPump","version":"6","entityType":"switch","haConfig":[{"property":"name","value":"VeggiAutoPump"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"97a4402c3b7ed861","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiPumpOn","version":"6","entityType":"switch","haConfig":[{"property":"name","value":"VeggiPumpOn"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"a10204452fe11d95","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiNextPumpingIntervall","version":"6","entityType":"text","haConfig":[{"property":"name","value":"VeggiNextPumpingIntervall"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"mode","value":"text"},{"property":"min_length","value":""},{"property":"max_length","value":""},{"property":"pattern","value":""}],"resend":false,"debugEnabled":false},{"id":"af44ccc93e488cc4","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiPumpingDuration","version":"6","entityType":"text","haConfig":[{"property":"name","value":"VeggiPumpingDuration"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"mode","value":"text"},{"property":"min_length","value":""},{"property":"max_length","value":""},{"property":"pattern","value":""}],"resend":false,"debugEnabled":false}]