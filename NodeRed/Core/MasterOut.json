[{"id":"4ad106a4cfadd543","type":"tab","label":"MasterOut","disabled":false,"info":"","env":[]},{"id":"3c29ef5865ef5803","type":"group","z":"4ad106a4cfadd543","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["1b0f8eda23cb1d17","585ff1a6d924abed","f3fa7c8da50ee432","c9878f71af57f6c4","e141c5f654712be3"],"x":174,"y":1299,"w":512,"h":202},{"id":"6f8c641581426212","type":"junction","z":"4ad106a4cfadd543","x":560,"y":600,"wires":[["d4dbed9115a15488"]]},{"id":"1ea3df0af8459869","type":"junction","z":"4ad106a4cfadd543","x":580,"y":980,"wires":[[]]},{"id":"a175202c75d55747","type":"junction","z":"4ad106a4cfadd543","x":40,"y":600,"wires":[["af1aa666ca6fb17e","1b0f8eda23cb1d17"]]},{"id":"02701e85ddace028","type":"link in","z":"4ad106a4cfadd543","name":"RoomControl","links":["6fe72eaf1d2902f0"],"x":45,"y":320,"wires":[["ba7a732e01beeb87","b3f9fade8f2c3cc2","a175202c75d55747"]]},{"id":"af1aa666ca6fb17e","type":"function","z":"4ad106a4cfadd543","name":"Sort Sensor Types","func":"// Hauptschlüssel in `msg.payload` extrahieren (z.B., \"flowertent\", \"ambient\", etc.)\nlet mainKey = Object.keys(msg.payload)[0];\nlet data = msg.payload[mainKey];  // Hol das innere Objekt mit den eigentlichen Daten\nlet room = msg.topic;\n\n// Sicherstellen, dass die OpenGrowBox-Klasse geladen ist\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    return new Error(\"OpenGrowBox class not found in globals.\");\n}\n// Sicherstellen, dass die Raum-Instanz geladen ist\nconst roomInstance = global.get(room);\nif (!roomInstance) {\n    node.status({ fill: \"red\", shape: \"ring\", text: `No Room Data!` });\n    return new Error(`Room instance for \"${msg.topic}\" not found.`);\n}\n\nif (roomInstance) {\n    node.status({ fill: \"blue\", shape: \"ring\", text: `Start VPD Creation for ${roomInstance.tentName || room}` });\n}\n\n// Arrays für verschiedene Sensortypen initialisieren\nlet wish = [];\nlet temperatures = [];\nlet humidity = [];\nlet dewpoints = [];\nlet moisture = [];\nlet pressures = [];\nlet battery = [];\nlet power = [];\nlet co2 = [];\nlet lumen = [];\nlet conductivity = [];\nlet switches = [];\nlet dutyCycleExhaust = [];\nlet vents = [];\nlet humidifier = [];\nlet dehumidifier = [];\nlet root = [];\nlet cooler = [];\nlet heater = [];\nlet tank = [];\nlet pump = [];\nlet climate = [];\n\n// Funktion zur Verarbeitung verschachtelter Objekte\nfunction processEntity(sensorName, sensorData) {\n    let entity_id = sensorName.toLowerCase();\n    let entity = { entity_id: entity_id, value: sensorData };\n\n    // Sortiere die Entitäten in die entsprechenden Kategorien\n    if (entity_id.includes('wish') || entity_id.includes('number.') || entity_id.includes('weigth') || entity_id.includes('level')|| entity_id.includes('avg') || entity_id.includes('current')||  entity_id.includes('target')|| entity_id.includes('ambient') || entity_id.includes('outsite')) {\n        wish.push(entity);\n    } else if (entity_id.includes('root') || entity_id.includes('wurzel')) {\n        root.push(entity);\n    } else if (entity_id.includes('temperature') || entity_id.includes('tempe')) {\n        temperatures.push(entity);\n    } else if (entity_id.includes('humidity') || entity_id.includes('feuchtigkeit') || entity_id.includes('rh')) {\n        humidity.push(entity);\n    } else if (entity_id.includes('dewpoint') || entity_id.includes('dew')) {\n        dewpoints.push(entity);\n    } else if (entity_id.includes('moisture') || entity_id.includes('mois')) {\n        moisture.push(entity);\n    } else if (entity_id.includes('pressure') || entity_id.includes('press')) {\n        pressures.push(entity);\n    } else if (entity_id.includes('carbondioxide') || entity_id.includes('co2') || entity_id.includes('carbon')) {\n        co2.push(entity);\n    } else if (entity_id.includes('conductivity')) {\n        conductivity.push(entity);\n    } else if (entity_id.includes('illuminance')) {\n        lumen.push(entity);\n    } else if (entity_id.includes('climate.')) {\n        climate.push(entity);\n    } else if (entity_id.includes('dehumidifier') || entity_id.includes('entfeuchter')) {\n        dehumidifier.push(entity);\n    } else if (entity_id.includes('humidifier') || entity_id.includes('befeuchter')) {\n        humidifier.push(entity);\n    } else if (entity_id.includes('cooler') || entity_id.includes('klima')) {\n        cooler.push(entity);\n    } else if (entity_id.includes('heater') || entity_id.includes('heizung')) {\n        heater.push(entity);\n    } else if (entity_id.includes('tank')) {\n        tank.push(entity);\n    } else if (entity_id.includes('pump') || entity_id.includes('pumping')) {\n        pump.push(entity);\n    } else if (entity_id.includes('ruck') || entity_id.includes('airctrl') || entity_id.includes('exhaust') || entity_id.includes('abluft')) {\n        dutyCycleExhaust.push(entity);\n    } else if (entity_id.includes('vent')) {\n        vents.push(entity);\n    } else if (entity_id.includes('switch')) {\n        switches.push(entity);\n    } else if (entity_id.includes('power') || entity_id.includes('energy')) {\n        power.push(entity);\n    } else if (entity_id.includes('battery') || entity_id.includes('batt')) {\n        battery.push(entity);\n    }\n}\n\n// Hauptschleife zum Durchlaufen aller Gruppen und Sensoren in data\nfor (let group in data) {\n    if (data.hasOwnProperty(group)) {\n        for (let sensor in data[group]) {\n            if (data[group].hasOwnProperty(sensor)) {\n                processEntity(sensor, data[group][sensor]);\n            }\n        }\n    }\n}\n\n// Durchschnitt für Temperatur und Feuchtigkeit berechnen und an die Raum-Instanz setzen\nfunction calculateAvgValue(entities) {\n    let sum = 0;\n    let count = 0;\n\n    entities.forEach((entry) => {\n        let value = parseFloat(entry.value);\n        if (!isNaN(value)) {\n            sum += value;\n            count++;\n        }\n    });\n\n    return count === 0 ? null : parseFloat((sum / count).toFixed(2));\n}\n\n// Durchschnittliche Temperatur und Luftfeuchtigkeit berechnen und setzen\nconst avgTemp = calculateAvgValue(temperatures);\nconst avgHumidity = calculateAvgValue(humidity);\n\nif (avgTemp !== null) {\n    roomInstance.setCurrentTemp(avgTemp);\n}\nif (avgHumidity !== null) {\n    roomInstance.setCurrentHumidity(avgHumidity);\n}\n\n// Berechnungen für Dewpoint und VPD explizit aufrufen\nconst currentDew = roomInstance.calculateDewPoint();\nconst currentVPD = roomInstance.calculateCurrentVPD();\n\nconst Room = {\n    Temp: roomInstance.tentData.temperature,\n    Humidity: roomInstance.tentData.humidity,\n    Dewpoint: roomInstance.tentData.dewpoint,\n    VPD: roomInstance.vpd.current,\n}\n\n// Nachrichtenausgabe auf verschiedenen Outputs\nreturn [\n    { payload: Room, topic: `${room}` },\n    { payload: wish, topic: 'Wish', room: `${room}` },\n    { payload: temperatures, topic: 'temperature', room: `${room}` },\n    { payload: humidity, topic: 'humidity', room: `${room}` },\n    { payload: currentDew, topic: 'dewpoint', room: `${room}` },\n    { payload: moisture, topic: 'moisture', room: `${room}` },\n    { payload: root, topic: 'roottemp', room: `${room}` },\n    { payload: conductivity, topic: 'conductivity', room: `${room}`},\n    { payload: pressures, topic: 'pressure', room: `${room}` },\n    { payload: co2, topic: 'carbon_dioxide', room: `${room}` },\n    { payload: lumen, topic: 'illuminance', room: `${room}` },\n    { payload: battery, topic: 'battery', room: `${room}` },\n    { payload: power, topic: 'power', room: `${room}` },\n    { payload: switches, topic: 'switch', room: `${room}` },\n    { payload: vents, topic: 'Vents', room: `${room}` },\n    { payload: dutyCycleExhaust, topic: 'Exhaust', room: `${room}` },\n    { payload: humidifier, topic: 'humidifier', room: `${room}` },\n    { payload: dehumidifier, topic: 'dehumidifier', room: `${room}` },\n    { payload: cooler, topic: 'cooler', room: `${room}` },\n    { payload: heater, topic: 'heater', room: `${room}` },\n    { payload: climate, topic: 'climate', room: `${room}`},\n    { payload: tank, topic: 'tank',room:`${room}`},\n    { payload: pump, topic: 'pump',room:`${room}`},\n];\n","outputs":23,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":600,"wires":[["6fc066d05044b231"],["376e5c5f3c81f85f"],["e964b99777b25b6b"],["e964b99777b25b6b"],["e964b99777b25b6b"],["409f5d956baf5669"],["1ab95c253ff886fb"],["97588977b4ef11a3"],["39a5487be0ee0334"],["5ce583bc1cb7595e"],["d6b2185b32829de9"],["cad40b99f90f92e9"],["0dc1712260c48bc5"],["db550c364f0f87ce"],["fed952a497e65171"],["d7d06609eb105d27"],["83f8209da434683b"],["b6462402d7fb5db2"],["291baa502230d0d3"],["5906e2049995721b"],["532da08368c7202c"],["184f9297c204f90a"],["5a89a361e1399ede"]]},{"id":"ba7a732e01beeb87","type":"debug","z":"4ad106a4cfadd543","name":"CurrentData","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":170,"y":320,"wires":[]},{"id":"77b47604fac64d57","type":"function","z":"4ad106a4cfadd543","name":"Setze Aktion EIN","func":"const entityType = msg.payload.entity_id.split('.')[0]; // Extrahiere Domain\n\nmsg.payload = {\n    domain: entityType, // Dynamische Domain (light, switch, fan, etc.)\n    service: \"turn_on\", // Aktion ist \"EIN\"\n    data: {\n        entity_id: msg.payload.entity_id // Entität-ID übergeben\n    }\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: `Turn ON: ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":320,"wires":[["0960fc80c97a7e6a"]]},{"id":"1abe9480672951a4","type":"function","z":"4ad106a4cfadd543","name":"Setze Aktion AUS","func":"const entityType = msg.payload.entity_id.split('.')[0]; // Extrahiere Domain\nmsg.payload = {\n    domain: entityType, // Dynamische Domain (light, switch, fan, etc.)\n    service: \"turn_off\", // Aktion ist \"AUS\"\n    data: {\n        entity_id: msg.payload.entity_id // Entität-ID übergeben\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Turn OFF: ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":380,"wires":[["547155ef6ab4ecb5"]]},{"id":"0960fc80c97a7e6a","type":"api-call-service","z":"4ad106a4cfadd543","name":"Schalte EIN","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"output_location":"payload","output_location_type":"msg","x":1410,"y":320,"wires":[[]]},{"id":"547155ef6ab4ecb5","type":"api-call-service","z":"4ad106a4cfadd543","name":"Schalte AUS","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"output_location":"payload","output_location_type":"msg","x":1410,"y":380,"wires":[[]]},{"id":"8bb461eacaa5cc2d","type":"function","z":"4ad106a4cfadd543","name":"Setze Helligkeit oder Duty Cycle","func":"const entityType = msg.payload.entity_id.split('.')[0];\nconst value = msg.payload.dutycycle || 0;\n\nif (entityType === 'light') {\n    msg.payload = {\n        action: \"light.turn_on\",\n        data: {\n            entity_id: msg.payload.entity_id,\n            brightness_pct: value\n        }\n    };\n} else if (entityType === 'fan') {\n    msg.payload = {\n        action: \"fan.set_percentage\",\n        data: {\n            entity_id: msg.payload.entity_id,\n            percentage: value\n        }\n    };\n}\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set new Value ${value}: -> ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1170,"y":260,"wires":[["b74023821b77b8ee"]]},{"id":"c75c34096c753787","type":"function","z":"4ad106a4cfadd543","name":"Setze Climate Mode","func":"const entity = msg.payload.entity_id;\nconst havocMode = msg.payload.climate_mode\nmsg.payload = {\n    action: \"climate.set_hvac_mode\",\n    data: {\n        entity_id: entity,\n        hvac_mode: havocMode\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set Climate ${msg.payload.data.entity_id} -> to ${havocMode}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1140,"y":200,"wires":[["bf48a27815898885"]]},{"id":"bf48a27815898885","type":"api-call-service","z":"4ad106a4cfadd543","name":"Setze Climate Mode","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{    \"entity_id\": \"{{payload.data.entity_id}}\",    \"hvac_mode\": \"{{payload.data.hvac_mode}}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1440,"y":200,"wires":[[]]},{"id":"6685a93abbc0f329","type":"http request","z":"4ad106a4cfadd543","name":"Weather_API","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":670,"y":60,"wires":[["32272ec2bcc57061"]]},{"id":"164dcba264dc1a97","type":"api-current-state","z":"4ad106a4cfadd543","name":"GrowPlace","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"zone.home","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"triggerId"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":250,"y":60,"wires":[["1434dd31631d6bc1"]]},{"id":"1434dd31631d6bc1","type":"function","z":"4ad106a4cfadd543","name":"Create URL with Coordinates","func":"const latitude = msg.data.attributes.latitude;\nconst longitude = msg.data.attributes.longitude;\n\nmsg.url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,rain,showers,snowfall&timezone=Europe%2FBerlin&forecast_days=1&models=best_match`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":460,"y":60,"wires":[["6685a93abbc0f329"]]},{"id":"5706bb19aad160de","type":"comment","z":"4ad106a4cfadd543","name":"OutSiteTemp_basedon_GPS","info":"","x":160,"y":20,"wires":[]},{"id":"c5a4bb7985db5b7e","type":"debug","z":"4ad106a4cfadd543","name":"Actions_log","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":670,"y":240,"wires":[]},{"id":"049f3d9f5b8db0f4","type":"inject","z":"4ad106a4cfadd543","name":"Init","props":[{"p":"topic","vt":"str"},{"p":"payload"}],"repeat":"300","crontab":"","once":true,"onceDelay":"6","topic":"","payload":"WinterIsComming","payloadType":"str","x":90,"y":60,"wires":[["164dcba264dc1a97"]]},{"id":"b3f9fade8f2c3cc2","type":"function","z":"4ad106a4cfadd543","name":"GetTent","func":"\n// Sicherstellen, dass die Raum-Instanz geladen ist\nconst roomInstance = global.get(msg.topic);\nif (!roomInstance) {\n    return new Error(`Room instance for \"${msg.topic}\" not found.`);\n}\n\nmsg.payload = roomInstance\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":140,"y":280,"wires":[["4f82c925353323f5","1aaf11431d72fdc5"]]},{"id":"1f1ed397e3c30251","type":"debug","z":"4ad106a4cfadd543","name":"DeviceAciton","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":670,"y":380,"wires":[]},{"id":"6fd8c24d7450e107","type":"function","z":"4ad106a4cfadd543","name":"Setze Number-Wert","func":"const value = msg.payload.value;\nmsg.payload = {\n    action: \"number.set_value\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        value: value\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set Value ${value}: -> ${msg.payload.data.entity_id}` });\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":440,"wires":[["a2422ad3191db2e8"]]},{"id":"a2422ad3191db2e8","type":"api-call-service","z":"4ad106a4cfadd543","name":"Setze Number-Wert","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{    \"entity_id\": \"{{payload.data.entity_id}}\",    \"value\": {{payload.data.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1430,"y":440,"wires":[[]]},{"id":"45fa43f3b0c3380c","type":"function","z":"4ad106a4cfadd543","name":"SetupRoomSensors","func":"// Extrahiere die aktuellen Werte\nconst vpd = msg.payload.VPD;\nconst temp = msg.payload.Temp;\nconst hum = msg.payload.Humidity;\nconst dew = msg.payload.Dewpoint;\n\n// Funktion, um eine Nachricht im gewünschten Format zu erstellen\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Erstelle Nachrichten für die einzelnen Sensorwerte\nconst messages = [\n    createMessage(`sensor.ogb_currentvpd_${msg.topic}`, vpd),\n    createMessage(`sensor.ogb_avgtemperature_${msg.topic}`, temp),\n    createMessage(`sensor.ogb_avghumidity_${msg.topic}`, hum),\n    createMessage(`sensor.ogb_avgdewpoint_${msg.topic}`, dew),\n];\n\n// Sende die Nachrichten einzeln\nmessages.forEach((message, index) => {\n    node.status({ fill: \"green\", shape: \"ring\", text: `Sending message ${index + 1}: ${message.payload.entity_id}` });\n    node.send(message); // Send each message individually\n});\n\n// Return null to avoid sending duplicate messages\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":180,"wires":[["ff75ecac788ac2f5","974cb99a09aa8ce4"]]},{"id":"b8de3efc886baffc","type":"function","z":"4ad106a4cfadd543","name":"Ambient & Outsite DataLoader","func":"const roomName = msg.topic;\nconst outsiteTemps = flow.get(\"outsitetemps\");\n\nif (!roomName) {\n    node.error(\"Room name is missing in the payload.\");\n    return null;\n}\n\n// Format the room name (lowercase, remove spaces and special characters)\nconst formattedRoomName = roomName.toLowerCase().replace(/\\s+/g, \"_\").replace(/[^a-z0-9_]/g, \"\");\n\n// If the room is \"ambient\", store the data in context\nif (formattedRoomName.startsWith(\"ambient\")) {\n    const roomInstance = global.get(formattedRoomName);\n\n    if (!roomInstance || !roomInstance.tentData || !roomInstance.vpd) {\n        node.error(\"Ambient room instance is incomplete or missing.\");\n        return null;\n    }\n\n    const AmbientData = {\n        ambientTemp: Number(roomInstance.tentData.temperature),\n        ambientHumidity: Number(roomInstance.tentData.humidity),\n        ambientDewpoint: Number(roomInstance.tentData.dewpoint),\n        ambientVPD: Number(roomInstance.vpd.current)\n    };\n\n    context.set(\"AmbientData\", AmbientData);\n\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Ambient Data Stored\" });\n    return null; // No further actions for \"ambient\" rooms\n}\n\n// Retrieve Ambient Data from context for other rooms\nconst AmbientData = context.get(\"AmbientData\");\n\nif (!AmbientData) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Ambient Data Missing\" });\n    return null;\n}\n\n// Ensure the OpenGrowBox class is loaded\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    node.error(\"OpenGrowBox class not found in globals.\");\n    return null;\n}\n\n// Retrieve room instance\nconst roomInstance = global.get(formattedRoomName);\nif (!roomInstance) {\n    node.error(`Room instance not found for ${formattedRoomName}`);\n    return null;\n}\n\n// Apply Ambient Data\nroomInstance.setAmbientData(\n    Number(AmbientData.ambientTemp),\n    Number(AmbientData.ambientHumidity),\n    Number(AmbientData.ambientDewpoint)\n);\n\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: `Ambient Data Applied to ${formattedRoomName}`\n});\n\n// Apply Outsite Data\nroomInstance.setOutsiteData(\n    Number(outsiteTemps.temp),\n    Number(outsiteTemps.hum),\n    Number(outsiteTemps.dew)\n);\n\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: `Outsite Data Applied to ${formattedRoomName}`\n});\n\n// Function to create a message with a number payload\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: Number(value) // Ensure the value is a number\n        }\n    };\n}\n\n// Create messages for all data\nconst messages = [\n    createMessage(`sensor.ogb_ambientvpd_${formattedRoomName}`, AmbientData.ambientVPD),\n    createMessage(`sensor.ogb_ambienttemperature_${formattedRoomName}`, AmbientData.ambientTemp),\n    createMessage(`sensor.ogb_ambienthumidity_${formattedRoomName}`, AmbientData.ambientHumidity),\n    createMessage(`sensor.ogb_ambientdewpoint_${formattedRoomName}`, AmbientData.ambientDewpoint),\n    createMessage(`sensor.ogb_outsitetemperature_${formattedRoomName}`, Number(outsiteTemps.temp)),\n    createMessage(`sensor.ogb_outsitehumidity_${formattedRoomName}`, Number(outsiteTemps.hum)),\n    createMessage(`sensor.ogb_outsitedewpoint_${formattedRoomName}`, Number(outsiteTemps.dew))\n];\n\n// Send messages individually\nmessages.forEach((message) => {\n    node.send(message);\n});\n\n// Return null to prevent further output from this function node\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":250,"y":120,"wires":[["53ef2b596ba18627","a5e26993929a4599"]]},{"id":"4f82c925353323f5","type":"debug","z":"4ad106a4cfadd543","name":"debug 467","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":170,"y":240,"wires":[]},{"id":"32272ec2bcc57061","type":"function","z":"4ad106a4cfadd543","name":"SetOutSiteData","func":"// Hole Außentemperaturdaten aus der Nachricht\nconst currentData = msg.payload.current;\nconst temp = msg.payload.current.temperature_2m;\nconst hum = msg.payload.current.relative_humidity_2m;\n\n// Funktion zur Berechnung des Taupunkts\nconst calculateDewPoint = (temperature, humidity) => {\n    const temp = parseFloat(temperature);\n    const hum = parseFloat(humidity);\n\n    if (isNaN(temp) || isNaN(hum)) {\n        return \"unavailable\";\n    }\n\n    const a = 17.27;\n    const b = 237.7;\n\n    // Berechnung der Hilfsvariable γ(T, RH)\n    const gamma = (a * temp) / (b + temp) + Math.log(hum / 100);\n\n    // Berechnung des Taupunkts\n    const dewPoint = (b * gamma) / (a - gamma);\n\n    return parseFloat(dewPoint.toFixed(2));\n};\n\n// Berechnung des Taupunkts\nconst dew = calculateDewPoint(temp, hum);\n\n// Speichern der Außentemperaturdaten im Kontext\nconst outsiteTemps = {\n    temp: Number(temp),\n    hum: Number(hum),\n    dew: Number(dew)\n};\nflow.set(\"outsitetemps\", outsiteTemps);\n\n// Zeitstempel und Status-Update\nconst timestamp = new Date().toLocaleString();\nnode.status({ fill: \"green\", shape: \"dot\", text: `Loaded OutsiteData  ${timestamp}` });\n\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":840,"y":60,"wires":[[]]},{"id":"1aaf11431d72fdc5","type":"link out","z":"4ad106a4cfadd543","name":"GetTent","mode":"link","links":["a891291be3c02972","a25a55f5d6ba8c8e"],"x":285,"y":280,"wires":[]},{"id":"a891291be3c02972","type":"link in","z":"4ad106a4cfadd543","name":"GetTent","links":["1aaf11431d72fdc5"],"x":65,"y":120,"wires":[["b8de3efc886baffc"]]},{"id":"6fc066d05044b231","type":"link out","z":"4ad106a4cfadd543","name":"RoomEnv","mode":"link","links":["61718212e298a3ae"],"x":315,"y":340,"wires":[]},{"id":"61718212e298a3ae","type":"link in","z":"4ad106a4cfadd543","name":"RoomEnv","links":["6fc066d05044b231"],"x":65,"y":180,"wires":[["45fa43f3b0c3380c"]]},{"id":"a25a55f5d6ba8c8e","type":"link in","z":"4ad106a4cfadd543","name":"RoomEnv","links":["1aaf11431d72fdc5"],"x":455,"y":320,"wires":[["b1f2d7975d145a5c"]]},{"id":"ff75ecac788ac2f5","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":560,"y":180,"wires":[[]]},{"id":"53ef2b596ba18627","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":560,"y":120,"wires":[[]]},{"id":"409f5d956baf5669","type":"function","z":"4ad106a4cfadd543","name":"Moisture","func":"const sensors = msg.payload;\nconst room = msg.room;\n\n// Funktion zum Finden des passenden Moisture-Wertes\nfunction findMoistureValue(sensors, targetSensor) {\n    const moistureObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"moisture\") ||\n            sensor.entity_id.includes(\"humidity\") ||\n            sensor.entity_id.includes(\"wetness\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return moistureObject ? moistureObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Ziel-Sensorname, den wir nicht überschreiben wollen\nconst targetSensor = `sensor.ogb_soilmoisture_${room}`;\n\n// Finden des Moisture-Wertes\nconst moistureValue = findMoistureValue(sensors, targetSensor);\n\nif(moistureValue === \"NaN\")return\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (moistureValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(moistureValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Moisture-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":440,"wires":[["6f8c641581426212"]]},{"id":"5ce583bc1cb7595e","type":"function","z":"4ad106a4cfadd543","name":"CO2","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_co2_${room}`;\n\n// Funktion zum Filtern der richtigen Sensoren\nfunction findValidSensor(sensors, targetSensor) {\n    return sensors.find(sensor => \n        sensor.entity_id !== targetSensor && // Nicht der Ziel-Sensor\n        Number(sensor.value) > 400          // Wert muss größer als 400 sein\n    );\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Prüfen und Nachricht erstellen\nconst validSensor = findValidSensor(sensors, targetSensor);\n\nif (validSensor) {\n    const message = createMessage(targetSensor, Number(validSensor.value));\n    return [message]; // Nachricht zurückgeben\n} else {\n    // Kein gültiger Sensor gefunden\n    //node.warn(\"Kein gültiger CO2-Sensor gefunden oder Wert ist zu niedrig\");\n    return null; // Keine Nachricht zurückgeben\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":600,"wires":[["6f8c641581426212"]]},{"id":"39a5487be0ee0334","type":"function","z":"4ad106a4cfadd543","name":"Pressure","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensorname, den wir nicht überschreiben wollen\nconst targetSensor = `sensor.ogb_pressure_${room}`;\n\n// Funktion zum Finden des Luftdruck-Wertes\nfunction findPressureValue(sensors, targetSensor) {\n    const pressureObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"pressure\") ||\n            sensor.entity_id.includes(\"barometer\") ||\n            sensor.entity_id.includes(\"luftdruck\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return pressureObject ? pressureObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Luftdruck-Wertes\nconst pressureValue = findPressureValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (pressureValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(pressureValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Pressure-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":560,"wires":[["6f8c641581426212"]]},{"id":"97588977b4ef11a3","type":"function","z":"4ad106a4cfadd543","name":"SOIL-EC","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensorname, den wir nicht überschreiben wollen\nconst targetSensor = `sensor.ogb_soilec_${room}`;\n\n// Funktion zum Finden des EC- oder Conductivity-Wertes\nfunction findECValue(sensors, targetSensor) {\n    const ecObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"ec\") || sensor.entity_id.includes(\"conductivity\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return ecObject ? ecObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des EC-Wertes\nconst soilEC = findECValue(sensors, targetSensor);\n\nif(soilEC === \"NaN\")return\n\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (soilEC !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(soilEC));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger EC-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":520,"wires":[["6f8c641581426212"]]},{"id":"1ab95c253ff886fb","type":"function","z":"4ad106a4cfadd543","name":"Root-Temp","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensorname, den wir nicht überschreiben wollen\nconst targetSensor = `sensor.ogb_roottemp_${room}`;\n\n// Funktion zum Finden des Root-Temperature-Wertes\nfunction findRootTempValue(sensors, targetSensor) {\n    const rootTempObject = sensors.find(sensor => \n        (sensor.entity_id.includes(\"root_temp\") || \n         sensor.entity_id.includes(\"roottemperature\") || \n         sensor.entity_id.includes(\"soiltemp\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return rootTempObject ? rootTempObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Root-Temperature-Wertes\nconst rootTempValue = findRootTempValue(sensors, targetSensor);\n\nif(rootTempValue === \"NaN\")return\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (rootTempValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(rootTempValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Root-Temperature-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":480,"wires":[["6f8c641581426212"]]},{"id":"d6b2185b32829de9","type":"function","z":"4ad106a4cfadd543","name":"LightIntense","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_lightintensity_${room}`;\n\n// Funktion zum Finden des Licht-Wertes (Lumen oder Lux)\nfunction findLightValue(sensors, targetSensor) {\n    const lightObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"lumen\") ||\n            sensor.entity_id.includes(\"lux\") ||\n            sensor.entity_id.includes(\"light\") ||\n            sensor.entity_id.includes(\"illuminance\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return lightObject ? lightObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Licht-Wertes\nconst lxValue = findLightValue(sensors, targetSensor);\nif(lxValue === \"Nan\")return\n// Überprüfen, ob ein Wert gefunden wurde\nif (lxValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(lxValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Light-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":640,"wires":[["6f8c641581426212"]]},{"id":"cad40b99f90f92e9","type":"function","z":"4ad106a4cfadd543","name":"Battery","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_battery_${room}`;\n\n// Funktion zum Finden des Batterie-Wertes\nfunction findBatteryValue(sensors, targetSensor) {\n    const batteryObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"battery\") ||\n            sensor.entity_id.includes(\"batt\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return batteryObject ? batteryObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Batterie-Wertes\nconst batValue = findBatteryValue(sensors, targetSensor);\nif(batValue === \"NaN\")return\n// Überprüfen, ob ein Wert gefunden wurde\nif (batValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(batValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Batterie-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":680,"wires":[["6f8c641581426212"]]},{"id":"0dc1712260c48bc5","type":"function","z":"4ad106a4cfadd543","name":"PowerConsum","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_lightpower_${room}`;\n\n// Funktion zum Finden des Stromverbrauch-Wertes\nfunction findPowerConsumptionValue(sensors, targetSensor) {\n    const powerConsumptionObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"energy_power\") ||\n            sensor.entity_id.includes(\"consumption\") ||\n            sensor.entity_id.includes(\"watt\") ||\n            sensor.entity_id.includes(\"electricity\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return powerConsumptionObject ? powerConsumptionObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Stromverbrauch-Wertes\nconst powerValue = findPowerConsumptionValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (powerValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(powerValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Stromverbrauch-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":720,"wires":[["6f8c641581426212"]]},{"id":"db550c364f0f87ce","type":"function","z":"4ad106a4cfadd543","name":"Switch","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.${room}_switch`;\n\n// Funktion zum Finden des Switch-Wertes\nfunction findSwitchValue(sensors, targetSensor) {\n    const switchObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"switch\") ||\n            sensor.entity_id.includes(\"toggle\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return switchObject ? switchObject.state : null; // Rückgabe des Switch-Zustands oder null\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Switch-Wertes\nconst switchValue = findSwitchValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (switchValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, switchValue);\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Switch-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":820,"wires":[[]]},{"id":"fed952a497e65171","type":"function","z":"4ad106a4cfadd543","name":"Vents","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_ventilation_${room}`;\n\n// Funktion zum Finden des Ventilation-Wertes\nfunction findVentilationValue(sensors, targetSensor) {\n    const ventilationObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"ventilation\") ||\n         sensor.entity_id.includes(\"fan\") ||\n         sensor.entity_id.includes(\"exhaust\") ||\n         sensor.entity_id.includes(\"airflow\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return ventilationObject ? ventilationObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Ventilation-Wertes\nconst ventilationValue = findVentilationValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (ventilationValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(ventilationValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Ventilation-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":880,"wires":[["1ea3df0af8459869"]]},{"id":"d7d06609eb105d27","type":"function","z":"4ad106a4cfadd543","name":"Exhaust","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensoren, die wir nicht überschreiben möchten\nconst targetExhaustSensor = `sensor.ogb_exhauststate_${room}`;\nconst targetDutyCycleSensor = `sensor.ogb_dutycycle_${room}`;\n\n// Funktion zum Finden des Abluft-Zustands\nfunction findExhaustState(sensors, targetSensor) {\n    const exhaustStateObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"exhaust\") ||\n            sensor.entity_id.includes(\"abluft\") ||\n            sensor.entity_id.includes(\"ventilation\") ||\n            sensor.entity_id.includes(\"fan\") ||\n            sensor.entity_id.includes(\"switch\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return exhaustStateObject ? exhaustStateObject.value : null;\n}\n\n// Funktion zum Finden des Dutycycle-Wertes\nfunction findDutyCycleValue(sensors, targetSensor) {\n    const dutyCycleObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"airctr\") ||\n            sensor.entity_id.includes(\"dutycycle\") ||\n            sensor.entity_id.includes(\"cycle\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dutyCycleObject ? dutyCycleObject.value : null;\n}\n\n// Funktion zum Erstellen einer Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden der Sensorwerte\nconst exhaustState = findExhaustState(sensors, targetExhaustSensor);\nconst dutyCycleValue = findDutyCycleValue(sensors, targetDutyCycleSensor);\n\n// Nachrichten erstellen\nlet messages = [];\nif (exhaustState !== null) {\n    messages.push(createMessage(targetExhaustSensor, exhaustState));\n} else {\n    //node.warn(\"Kein gültiger Abluft-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n}\n\nif (dutyCycleValue !== null) {\n    messages.push(createMessage(targetDutyCycleSensor, dutyCycleValue));\n} else {\n    //node.warn(\"Kein gültiger Dutycycle-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n}\n\n// Rückgabe der Nachrichten\nreturn messages;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":920,"wires":[["1ea3df0af8459869"],["1ea3df0af8459869"]]},{"id":"83f8209da434683b","type":"function","z":"4ad106a4cfadd543","name":"Humidifier","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_humidifier_${room}`;\n\n// Funktion zum Finden des Humidifier-Wertes\nfunction findHumidifierValue(sensors, targetSensor) {\n    const humidifierObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"humidifier\") ||\n            sensor.entity_id.includes(\"humidity\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return humidifierObject ? humidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Humidifier-Wertes\nconst humidifierValue = findHumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (humidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(humidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Humidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":960,"wires":[["1ea3df0af8459869"]]},{"id":"b6462402d7fb5db2","type":"function","z":"4ad106a4cfadd543","name":"Dehumidifier","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_dehumidifier_${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor => \n        (sensor.entity_id.includes(\"dehumidifier\") || \n         sensor.entity_id.includes(\"humidity\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":1000,"wires":[["1ea3df0af8459869"]]},{"id":"291baa502230d0d3","type":"function","z":"4ad106a4cfadd543","name":"Cooler","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_cooler_${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"cold\") ||\n            sensor.entity_id.includes(\"cool\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":1040,"wires":[["1ea3df0af8459869"]]},{"id":"5906e2049995721b","type":"function","z":"4ad106a4cfadd543","name":"Heater","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_heater_${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor => \n        (sensor.entity_id.includes(\"heat\") || \n         sensor.entity_id.includes(\"hot\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":1080,"wires":[["1ea3df0af8459869"]]},{"id":"5a89a361e1399ede","type":"function","z":"4ad106a4cfadd543","name":"Pump-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Sensorwertes\nfunction findSensorValue(sensors, filter) {\n    const sensorObject = sensors.find(sensor =>\n        sensor.entity_id.includes(filter)\n    );\n    return sensorObject ? sensorObject.value : null;\n}\n\n// Funktion zum Konvertieren des Sensorwertes in den entsprechenden Typ\nfunction convertType(value, type) {\n    switch (type) {\n        case \"number\":\n            return Number(value);\n        case \"boolean\":\n            return value === \"on\" || value === \"true\";\n        case \"string\":\n            return String(value);\n        default:\n            return value;\n    }\n}\n\n// Filterwerte und zugehörige Typen für die einzelnen Sensoren\nconst filterValues = [\n    { filter: \"pump_nextaction\", type: \"number\" },\n    { filter: \"pump_lefttime\", type: \"number\" },\n    { filter: \"pump_on\", type: \"boolean\" },\n    { filter: \"pump_autorun\", type: \"boolean\" },\n    { filter: \"pump_wateringduration\", type: \"number\" },\n    { filter: \"pump_hours\", type: \"number\" }\n];\n\n// Erstellen eines Arrays von Nachrichten für die verschiedenen Ausgänge\nlet outputMsgs = filterValues.map(item => {\n    const value = findSensorValue(sensors, item.filter);\n\n    if (value === null || value === undefined) {\n        // Node.warn kann verwendet werden, um zu debuggen, falls ein Wert fehlt\n        //node.warn(`Kein gültiger Wert gefunden für Filter: ${item.filter}`);\n        return { payload: null }; // Rückgabe von `null`, um den Wert explizit als nicht verfügbar zu markieren\n    }\n\n    return { payload: convertType(value, item.type) };\n});\n\n// Rückgabe der Nachrichten zur Weiterverarbeitung im Flow\nreturn outputMsgs;\n","outputs":6,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":1200,"wires":[[],[],[],[],[],[]]},{"id":"532da08368c7202c","type":"function","z":"4ad106a4cfadd543","name":"Climate","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_climate_${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"climate\") ||\n            sensor.entity_id.includes(\"klima\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":1120,"wires":[["1ea3df0af8459869"]]},{"id":"f5db36c6af871da6","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":700,"y":600,"wires":[[]]},{"id":"ac62cd9c47f045db","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":700,"y":980,"wires":[[]]},{"id":"b74023821b77b8ee","type":"api-call-service","z":"4ad106a4cfadd543","name":"Setze Helligkeit oder Duty Cycle","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{   \"entity_id\": \"{{payload.data.entity_id}}\",   {{#payload.data.brightness_pct}}   \"brightness_pct\": {{payload.data.brightness_pct}}{{/payload.data.brightness_pct}}   {{^payload.data.brightness_pct}}{{#payload.data.percentage}}   \"percentage\": {{payload.data.percentage}}{{/payload.data.percentage}}{{/payload.data.brightness_pct}} }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1470,"y":260,"wires":[[]]},{"id":"184f9297c204f90a","type":"function","z":"4ad106a4cfadd543","name":"Tank","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_tank${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"climate\") ||\n            sensor.entity_id.includes(\"klima\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":760,"wires":[[]]},{"id":"e964b99777b25b6b","type":"debug","z":"4ad106a4cfadd543","name":"debug 472","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":410,"y":400,"wires":[]},{"id":"376e5c5f3c81f85f","type":"debug","z":"4ad106a4cfadd543","name":"debug 473","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":410,"y":360,"wires":[]},{"id":"7c9afc5ea09e31d3","type":"function","z":"4ad106a4cfadd543","name":"Add Min String","func":"let data = msg.payload\n\nmsg.payload = `${data} Minutes`\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":1140,"wires":[[]]},{"id":"133d9fdea88eaac8","type":"function","z":"4ad106a4cfadd543","name":"Add Sec String","func":"let data = msg.payload\n\nmsg.payload = `${data} Seconds`\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":1180,"wires":[[]]},{"id":"bd8e75a43da59b99","type":"function","z":"4ad106a4cfadd543","name":"set Enable","func":"msg.enable = msg.payload\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":1220,"wires":[[]]},{"id":"cd15ad902a40728c","type":"function","z":"4ad106a4cfadd543","name":"set Enable","func":"msg.enable = msg.payload\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":1260,"wires":[[]]},{"id":"1b0f8eda23cb1d17","type":"function","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"OwnDevices","func":"let mainKey = Object.keys(msg.payload)[0];\nlet data = msg.payload[mainKey]; // Hol die inneren Daten des Raumes\nlet room = msg.topic;\n\n// Funktion, um eine Nachricht im gewünschten Format zu erstellen\nfunction createMessage(entityId, value) {\n    // Sicherstellen, dass der Wert ein String ist\n    let safeValue = typeof value === \"string\" ? value : JSON.stringify(value);\n\n    // Prüfen, ob safeValue ungültig ist (enthält 'ogb_')\n    if (safeValue.includes(\"ogb_\")) {\n        return null; // Filtere ungültige Werte\n    }\n\n    // Rückgabe der korrekt formatierten Nachricht\n    return {\n        domain: \"opengrowbox\",\n        service: \"add_select_options\",\n        payload: {\n            entity_id: entityId,\n            options: [safeValue] // Immer ein Array mit Strings\n        }\n    };\n}\n\n// Array für selektierbare Geräte\nlet deviceMessages = [];\n\n// Hilfsfunktion zur Extraktion der Geräte\nfunction processDevice(key, value) {\n    let lowerKey = key.toLowerCase();\n\n    // OGB-spezifische Filterung: Ausschließen von Schaltern, die mit \"ogb_\" beginnen\n    if (lowerKey.includes(\"switch.\") && lowerKey.includes(\"ogb_\")) {\n        return; // Überspringe diese Schalter\n    }\n\n    if (lowerKey.includes(\"sensor.\") || lowerKey.includes(\"number.\") || lowerKey.includes(\"time.\")) {\n        return; // Überspringe diese Typen\n    }\n\n    // Identifiziere die Geräte und erstelle Nachrichten\n    if (lowerKey.includes(\"switch.\")) {\n        deviceMessages.push(createMessage(`select.ogb_switchselect_${room}`, key));\n    } else if (lowerKey.includes(\"fan.\")) {\n        deviceMessages.push(createMessage(`select.ogb_exhaustselect_${room}`, key));\n    } else if (lowerKey.includes(\"light.\")) {\n        deviceMessages.push(createMessage(`select.ogb_lightselect_${room}`, key));\n    } else if (lowerKey.includes(\"humidifier\")) {\n        deviceMessages.push(createMessage(`select.ogb_humidifierselect_${room}`, key));\n    } else if (lowerKey.includes(\"dehumidifier\")) {\n        deviceMessages.push(createMessage(`select.ogb_dehumidifierselect_${room}`, key));\n    } else if (lowerKey.includes(\"heater\")) {\n        deviceMessages.push(createMessage(`select.ogb_heaterselect_${room}`, key));\n    } else if (lowerKey.includes(\"cooler\")) {\n        deviceMessages.push(createMessage(`select.ogb_coolerselect_${room}`, key));\n    } else if (lowerKey.includes(\"climate.\")) {\n        deviceMessages.push(createMessage(`select.ogb_climateselect_${room}`, key));\n    } else if (lowerKey.includes(\"co2\")) {\n        deviceMessages.push(createMessage(`select.ogb_co2select_${room}`, key));\n    }\n}\n\n// Hauptschleife, um alle Gruppen und Geräte zu durchlaufen\nfor (let group in data) {\n    if (data.hasOwnProperty(group)) {\n        for (let deviceKey in data[group]) {\n            if (data[group].hasOwnProperty(deviceKey)) {\n                let value = data[group][deviceKey];\n                processDevice(deviceKey, value);\n            }\n        }\n    }\n}\n\n// Statusmeldung und Nachrichten einzeln senden\nlet index = 0;\n\n// Nachrichten einzeln senden\ndeviceMessages.forEach((message) => {\n    if (message) { // Prüfe, ob die Nachricht gültig ist\n        index++; // Zähle die gesendeten Nachrichten\n\n        // Statusanzeige in der Node-RED Oberfläche\n        node.status({\n            fill: \"green\",\n            shape: \"dot\",\n            text: `Sende Nachricht ${index}: ${message.payload.entity_id}`\n        });\n\n        // Nachricht senden\n        node.send({\n            ...msg, // Erhalte den ursprünglichen Kontext\n            payload: message.payload, // Überschreibe den Payload\n            domain: message.domain,\n            service: message.service\n        });\n    }\n});\n\n// Status zurücksetzen, wenn alle Nachrichten gesendet wurden\nnode.status({\n    fill: \"green\",\n    shape: \"ring\",\n    text: `${index} Nachrichten gesendet`\n});\n\n// Rückgabe null, um keine weiteren Nachrichten zu senden\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":1460,"wires":[["585ff1a6d924abed"]]},{"id":"585ff1a6d924abed","type":"debug","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"Devices","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":280,"y":1400,"wires":[]},{"id":"f3fa7c8da50ee432","type":"api-call-service","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"Update Selected Device","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.add_select_options","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.entity_id}}\",     \"options\": {{payload.options}} }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"add_select_options","mergecontext":"","x":550,"y":1400,"wires":[[]]},{"id":"c9878f71af57f6c4","type":"api-call-service","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"Update Selected Device","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.add_select_options","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"options\":{{payload.options}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"add_select_options","mergecontext":"","x":550,"y":1460,"wires":[[]]},{"id":"e141c5f654712be3","type":"comment","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"NotReadyRightNow","info":"","x":330,"y":1340,"wires":[]},{"id":"b1f2d7975d145a5c","type":"function","z":"4ad106a4cfadd543","name":"Create_Action_with_borrow","func":"// Initialisiere die Outputs\nlet outputs = [null, null];\nlet deviceRequests = flow.get(\"deviceRequests\") || [];\nlet ambientDevices = flow.get(\"ambientDevices\") || []; // Neue Liste, um verfügbare Geräte zu verfolgen\nlet devActions = [];\n\n// Sicherstellen, dass die OpenGrowBox-Klasse geladen ist\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    return null;\n}\n\n// Instanz für den Raum basierend auf dem Topic abrufen\nlet roomInstance = global.get(msg.topic);\nif (!roomInstance) {\n    return null;\n}\n\n// Falls roomInstance ein Array ist, greife auf das erste Element zu\nif (Array.isArray(roomInstance)) {\n    roomInstance = roomInstance[0];\n}\n\n// Sicherstellen, dass roomInstance die erwarteten Methoden und Eigenschaften besitzt\nif (typeof roomInstance.selectAction !== \"function\" || !roomInstance.devices) {\n    return null;\n}\n\n// Funktion, um die Anforderung an den flow zu setzen\nfunction registerDeviceRequest(deviceName, deviceType, roomName) {\n    const existingRequest = deviceRequests.find(d => d.deviceName === deviceName);\n\n    if (!existingRequest) {\n        deviceRequests.push({\n            deviceName,\n            deviceType,\n            roomName,\n            requestedAt: new Date().toISOString()\n        });\n        flow.set(\"deviceRequests\", deviceRequests);\n    }\n}\n\n// Funktion zur Filterung der Gerätetypen\nfunction isDeviceAllowed(device) {\n    const allowedTypes = [\"climate\", \"humidifier\", \"dehumidifier\", \"heater\", \"switch\", \"fan\"];\n    return allowedTypes.includes(device.deviceType);\n}\n\n// Sicherstellen, dass der Tent-Modus korrekt ist\nfunction isControlSetValid(roomInstance) {\n    return roomInstance.controlSet === \"Ambient\";\n}\n\n// Geräte aus dem ambient-Raum anfordern (andere Räume)\nif (isControlSetValid(roomInstance) && msg.topic !== \"ambient\") {\n    const ambientRoom = global.get(\"ambient\");\n    if (!ambientRoom) {\n        node.error(\"Ambient room instance not found in global context.\");\n        return;\n    }\n\n    // Geräteanforderungen stellen\n    ambientRoom.devices.forEach(device => {\n        if (isDeviceAllowed(device) && !device.isLocked) {\n            roomInstance.borrowDevice(device, roomInstance.tentName);\n        }\n    });\n\n    flow.set(\"deviceRequests\", deviceRequests);\n}\n\n// Geräte zurückgeben\nif (!isControlSetValid(roomInstance) && msg.topic !== \"ambient\") {\n    if (!roomInstance) {\n        node.error(\"Ambient room instance not found in global context.\");\n        return;\n    }\n\n    roomInstance.devices.forEach(device => {\n        if (isDeviceAllowed(device) && device.isLocked) {\n            const offAction = roomInstance.returnDevice(device);\n            if (offAction) {\n                devActions.push(offAction); // Direkt zu devActions hinzufügen\n            }\n        }\n    });\n}\n\n// ambient-Raum: Geräteverarbeitung und Anfragen beantworten\nif (msg.topic === \"ambient\") {\n    // Geräte in der Liste aktualisieren\n    roomInstance.devices.forEach(device => {\n        let isBorrowed = roomInstance.devices.some(d => d.name === device.name);\n        let isInAmbientList = ambientDevices.some(d => d.name === device.name);\n\n        if (!isBorrowed && !device.isLocked && isDeviceAllowed(device) && !isInAmbientList) {\n            ambientDevices.push(device);\n        }\n    });\n\n    flow.set(\"ambientDevices\", ambientDevices);\n\n    // Geräteanforderungen abarbeiten\n    deviceRequests = deviceRequests.filter(request => {\n        const device = ambientDevices.find(d => d.name === request.deviceName);\n        if (device && !device.isLocked) {\n            const requestingRoom = global.get(request.roomName);\n            if (!requestingRoom) {\n                return true; // Behalte die Anfrage, wenn der Raum nicht existiert\n            }\n\n            requestingRoom.borrowDevice(device, roomInstance.tentName);\n\n            const borrowedDevices = global.get(\"borrowedDevices\") || [];\n            borrowedDevices.push(device);\n            global.set(\"borrowedDevices\", borrowedDevices);\n\n            ambientDevices = ambientDevices.filter(d => d.name !== device.name);\n            flow.set(\"ambientDevices\", ambientDevices);\n\n            return false; // Entferne die abgearbeitete Anfrage\n        } else {\n            return true; // Behalte die nicht abgearbeitete Anfrage\n        }\n    });\n\n    flow.set(\"deviceRequests\", deviceRequests);\n\n    // Geräte zurückgeben\n    roomInstance.devices.forEach(device => {\n        if (device.lockedFor === roomInstance.tentName) {\n            const offAction = roomInstance.returnDevice(device);\n            if (offAction) {\n                devActions.push(offAction); // Direkt zu devActions hinzufügen\n            }\n        }\n    });\n}\n\nif(roomInstance.tentMode === \"Disabled\")return null\n\n// Aktionen für den Raum Prüfen und Ausführen\nlet actions;\ntry {\n    if (roomInstance.tentName === \"ambient\" || msg.topic === \"ambient\") return;\n\n    actions = roomInstance.selectAction(roomInstance);\n    if (!actions) {\n        node.warn(\"No actions returned from selectAction method.\");\n        return;\n    }\n} catch (err) {\n    node.warn(\"Error during selectAction.\");\n    return;\n}\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: `Select Action for ${roomInstance.tentName}` });\n\n// Gerätaktionen vorbereiten\nif (actions.deviceActions) {\n    devActions = [...actions.deviceActions, ...devActions]; // Combine deviceActions and offActions\n}\n\n// Debug-Log für alle Aktionen (inklusive OFF_Action_ROOM)\n//node.warn(`Final Combined Actions: ${JSON.stringify(devActions, null, 2)}`);\n\n// Nachrichten für den zweiten Output vorbereiten\nlet messages = [];\n\n// Verarbeitung aller Aktionen für den zweiten Output\nfunction processDeviceActions(actions) {\n    actions.forEach((action) => {\n        if (Array.isArray(action)) {\n            // Rekursion: Bearbeite verschachtelte Arrays\n            processDeviceActions(action);\n        } else if (action && typeof action === \"object\") {\n            // Objekt hinzufügen\n            messages.push({ payload: action });\n        }\n    });\n}\n\n// Verarbeitung aller Aktionen für den zweiten Output\nprocessDeviceActions(devActions);\n\n// Jede Nachricht einzeln an den zweiten Output senden\nmessages.forEach(message => {\n    node.send([null, message]);\n});\n\n// Nachricht für den ersten Output zurückgeben\nconst msg1 = { payload: { ...actions } };\noutputs[0] = msg1;\n\nreturn outputs;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":320,"wires":[["cf1c3b2a7d7a6ed1"],["1f1ed397e3c30251","4b6a8ff776b4d80a"]]},{"id":"48fea790fb90fba4","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":700,"y":820,"wires":[[]]},{"id":"cf1c3b2a7d7a6ed1","type":"function","z":"4ad106a4cfadd543","name":"ActionLogger","func":"if (msg.payload.tentMode !== \"Unchanged\"){\n    return msg;\n}else{\n    return\n}\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":280,"wires":[["c5a4bb7985db5b7e"]]},{"id":"974cb99a09aa8ce4","type":"debug","z":"4ad106a4cfadd543","name":"debug 478","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":770,"y":180,"wires":[]},{"id":"a5e26993929a4599","type":"debug","z":"4ad106a4cfadd543","name":"debug 479","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":770,"y":120,"wires":[]},{"id":"d4dbed9115a15488","type":"debug","z":"4ad106a4cfadd543","name":"debug 480","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":650,"y":540,"wires":[]},{"id":"cc3f3ed06bb6badf","type":"function","z":"4ad106a4cfadd543","name":"SetzeSelectOption","func":"// Überprüfen, ob die erforderlichen Felder vorhanden sind\nif (!msg.payload.entity_id || !msg.payload.option) {\n    node.error(\"Fehlende entity_id oder option im Payload\");\n    return null;\n}\n\n// Erstellen des neuen Payloads für den Dienstaufruf\nmsg.payload = {\n    domain: \"select\",\n    service: \"select_option\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        option: msg.payload.option // Option korrekt als String belassen\n    }\n};\n\n// Statusmeldung für Debugging-Zwecke\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `Setze ${msg.payload.data.entity_id} auf ${msg.payload.data.option}`\n});\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":520,"wires":[["a497b6a7ac4b8029"]]},{"id":"a497b6a7ac4b8029","type":"api-call-service","z":"4ad106a4cfadd543","name":"Setze Number-Wert","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\",     \"option\": \"{{payload.data.option}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1430,"y":520,"wires":[[]]},{"id":"4b6a8ff776b4d80a","type":"switch","z":"4ad106a4cfadd543","name":"Prüfe Aktion","property":"payload.action","propertyType":"msg","rules":[{"t":"eq","v":"climate","vt":"str"},{"t":"eq","v":"dutycycle","vt":"str"},{"t":"eq","v":"on","vt":"str"},{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"number","vt":"str"},{"t":"eq","v":"select","vt":"str"}],"checkall":"true","repair":false,"outputs":6,"x":870,"y":340,"wires":[["c75c34096c753787"],["8bb461eacaa5cc2d"],["77b47604fac64d57"],["1abe9480672951a4"],["6fd8c24d7450e107"],["cc3f3ed06bb6badf"]]},{"id":"5772bf4c.b461d","type":"server","name":"OpenGrowBox","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true}]