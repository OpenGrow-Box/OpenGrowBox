[{"id":"4ad106a4cfadd543","type":"tab","label":"MasterOut","disabled":false,"info":"","env":[]},{"id":"8a6fdf8c2c02ea8d","type":"group","z":"4ad106a4cfadd543","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["77b47604fac64d57","1abe9480672951a4","0960fc80c97a7e6a","547155ef6ab4ecb5","8bb461eacaa5cc2d","c75c34096c753787","bf48a27815898885","6fd8c24d7450e107","a2422ad3191db2e8","b74023821b77b8ee","cc3f3ed06bb6badf","a497b6a7ac4b8029","4b6a8ff776b4d80a","f08a236d8a71dbde","3370cbd2dcd72539","d74131598c744811","ef6106847bbdb6a0","b939ed832e996185","79fa58f1866dc302","ec029e020f48d5d4"],"x":34,"y":499,"w":1092,"h":382},{"id":"4c1919317692abf7","type":"group","z":"4ad106a4cfadd543","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["ab06268559afb241","02701e85ddace028","af1aa666ca6fb17e","c5a4bb7985db5b7e","6fc066d05044b231","a25a55f5d6ba8c8e","493ee3fe79b168d5","1f1ed397e3c30251","0e6a0d6b40505901","2f0d71e6a9233dbd","ff75ecac788ac2f5","45fa43f3b0c3380c","61718212e298a3ae"],"x":34,"y":219,"w":872,"h":262},{"id":"59446e8ae1b4e67b","type":"group","z":"4ad106a4cfadd543","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["6685a93abbc0f329","164dcba264dc1a97","1434dd31631d6bc1","5706bb19aad160de","049f3d9f5b8db0f4","b8de3efc886baffc","32272ec2bcc57061","a891291be3c02972","53ef2b596ba18627"],"x":34,"y":19,"w":972,"h":182},{"id":"77b47604fac64d57","type":"function","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Aktion EIN","func":"const entityType = msg.payload.entity_id.split('.')[0]; // Extrahiere Domain\n\nmsg.payload = {\n    domain: entityType, // Dynamische Domain (light, switch, fan, etc.)\n    service: \"turn_on\", // Aktion ist \"EIN\"\n    data: {\n        entity_id: msg.payload.entity_id // Entität-ID übergeben\n    }\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: `Turn ON: ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":660,"wires":[["0960fc80c97a7e6a"]]},{"id":"1abe9480672951a4","type":"function","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Aktion AUS","func":"const entityType = msg.payload.entity_id.split('.')[0]; // Extrahiere Domain\nmsg.payload = {\n    domain: entityType, // Dynamische Domain (light, switch, fan, etc.)\n    service: \"turn_off\", // Aktion ist \"AUS\"\n    data: {\n        entity_id: msg.payload.entity_id // Entität-ID übergeben\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Turn OFF: ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":720,"wires":[["547155ef6ab4ecb5"]]},{"id":"0960fc80c97a7e6a","type":"api-call-service","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Schalte EIN","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"output_location":"payload","output_location_type":"msg","x":710,"y":660,"wires":[["d74131598c744811"]]},{"id":"547155ef6ab4ecb5","type":"api-call-service","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Schalte AUS","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"output_location":"payload","output_location_type":"msg","x":710,"y":720,"wires":[["3370cbd2dcd72539"]]},{"id":"8bb461eacaa5cc2d","type":"function","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Helligkeit oder Duty Cycle","func":"const entityType = msg.payload.entity_id.split('.')[0];\nconst value = msg.payload.dutycycle || 0;\n\nif (entityType === 'light') {\n    msg.payload = {\n        action: \"light.turn_on\",\n        data: {\n            entity_id: msg.payload.entity_id,\n            brightness_pct: value\n        }\n    };\n} else if (entityType === 'fan') {\n    msg.payload = {\n        action: \"fan.set_percentage\",\n        data: {\n            entity_id: msg.payload.entity_id,\n            percentage: value\n        }\n    };\n}\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set new Value ${value}: -> ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":470,"y":600,"wires":[["b74023821b77b8ee"]]},{"id":"c75c34096c753787","type":"function","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Climate Mode","func":"const entity = msg.payload.entity_id;\nconst havocMode = msg.payload.climate_mode\nmsg.payload = {\n    action: \"climate.set_hvac_mode\",\n    data: {\n        entity_id: entity,\n        hvac_mode: havocMode\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set Climate ${msg.payload.data.entity_id} -> to ${havocMode}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":540,"wires":[["bf48a27815898885"]]},{"id":"bf48a27815898885","type":"api-call-service","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Climate Mode","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{    \"entity_id\": \"{{payload.data.entity_id}}\",    \"hvac_mode\": \"{{payload.data.hvac_mode}}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":740,"y":540,"wires":[["b939ed832e996185"]]},{"id":"6685a93abbc0f329","type":"http request","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"Weather_API","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":710,"y":100,"wires":[["32272ec2bcc57061"]]},{"id":"164dcba264dc1a97","type":"api-current-state","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"GrowPlace","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"zone.home","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"triggerId"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":270,"y":100,"wires":[["1434dd31631d6bc1"]]},{"id":"1434dd31631d6bc1","type":"function","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"Create URL with Coordinates","func":"const latitude = msg.data.attributes.latitude;\nconst longitude = msg.data.attributes.longitude;\n\nmsg.url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,rain,showers,snowfall&timezone=Europe%2FBerlin&forecast_days=1&models=best_match`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":480,"y":100,"wires":[["6685a93abbc0f329"]]},{"id":"5706bb19aad160de","type":"comment","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"OutSiteTemp_basedon_GPS","info":"","x":520,"y":60,"wires":[]},{"id":"049f3d9f5b8db0f4","type":"inject","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"Init","props":[{"p":"topic","vt":"str"},{"p":"payload"}],"repeat":"300","crontab":"","once":true,"onceDelay":"6","topic":"","payload":"WinterIsComming","payloadType":"str","x":130,"y":100,"wires":[["164dcba264dc1a97"]]},{"id":"6fd8c24d7450e107","type":"function","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Number-Wert","func":"const value = msg.payload.value;\nmsg.payload = {\n    action: \"number.set_value\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        value: value\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set Value ${value}: -> ${msg.payload.data.entity_id}` });\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":780,"wires":[["a2422ad3191db2e8"]]},{"id":"a2422ad3191db2e8","type":"api-call-service","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Number-Wert","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{    \"entity_id\": \"{{payload.data.entity_id}}\",    \"value\": {{payload.data.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":730,"y":780,"wires":[["f08a236d8a71dbde"]]},{"id":"45fa43f3b0c3380c","type":"function","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"SetupRoomSensors","func":"// Extrahiere die aktuellen Werte\nconst vpd = msg.payload.VPD;\nconst temp = msg.payload.Temp;\nconst hum = msg.payload.Humidity;\nconst dew = msg.payload.Dewpoint;\n\n// Hole den Flow-Context\nconst previousValues = flow.get('sensorValues') || {};\n\n// Funktion, um eine Nachricht im gewünschten Format zu erstellen\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Funktion, um Werte zu prüfen und zu senden, falls sie sich geändert haben\nfunction checkAndSend(entityId, newValue, key) {\n    if (previousValues[key] !== newValue) {\n        node.status({ fill: \"green\", shape: \"ring\", text: `Value changed: ${key} -> ${newValue}` });\n        previousValues[key] = newValue; // Update den Flow-Context mit dem neuen Wert\n        return createMessage(entityId, newValue);\n    }\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Value unchanged: ${key}` });\n    return null;\n}\n\n// Erstelle Nachrichten nur, wenn sich Werte geändert haben\nconst messages = [\n    checkAndSend(`sensor.ogb_currentvpd_${msg.topic}`, vpd, 'vpd'),\n    checkAndSend(`sensor.ogb_avgtemperature_${msg.topic}`, temp, 'temp'),\n    checkAndSend(`sensor.ogb_avghumidity_${msg.topic}`, hum, 'hum'),\n    checkAndSend(`sensor.ogb_avgdewpoint_${msg.topic}`, dew, 'dew'),\n].filter(msg => msg !== null); // Filtere null-Werte heraus\n\n// Speichere die aktuellen Werte im Flow-Context\nflow.set('sensorValues', previousValues);\n\n// Sende die Nachrichten\nif (messages.length > 0) {\n    messages.forEach((message, index) => {\n        node.send(message); // Sende jede Nachricht einzeln\n    });\n} else {\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"No changes detected\" });\n}\n\n// Return null to vermeiden, dass Standardnachrichten gesendet werden\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":280,"y":260,"wires":[["ff75ecac788ac2f5"]]},{"id":"b8de3efc886baffc","type":"function","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"Ambient & Outsite DataLoader","func":"const roomName = msg.topic;\nconst outsiteTemps = flow.get(\"outsitetemps\");\n\nif (!roomName) {\n    node.error(\"Room name is missing in the payload.\");\n    return null;\n}\n\n// Format the room name (lowercase, remove spaces and special characters)\nconst formattedRoomName = roomName.toLowerCase().replace(/\\s+/g, \"_\").replace(/[^a-z0-9_]/g, \"\");\n\n// If the room is \"ambient\", store the data in context\nif (formattedRoomName.startsWith(\"ambient\")) {\n    const roomInstance = global.get(formattedRoomName);\n\n    if (!roomInstance || !roomInstance.tentData || !roomInstance.vpd) {\n        node.error(\"Ambient room instance is incomplete or missing.\");\n        return null;\n    }\n\n    const AmbientData = {\n        ambientTemp: Number(roomInstance.tentData.temperature),\n        ambientHumidity: Number(roomInstance.tentData.humidity),\n        ambientDewpoint: Number(roomInstance.tentData.dewpoint),\n        ambientVPD: Number(roomInstance.vpd.current)\n    };\n\n    context.set(\"AmbientData\", AmbientData);\n\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Ambient Data Stored\" });\n    return null; // No further actions for \"ambient\" rooms\n}\n\n// Retrieve Ambient Data from context for other rooms\nconst AmbientData = context.get(\"AmbientData\");\n\nif (!AmbientData) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Ambient Data Missing\" });\n    return null;\n}\n\n// Ensure the OpenGrowBox class is loaded\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    node.error(\"OpenGrowBox class not found in globals.\");\n    return null;\n}\n\n// Retrieve room instance\nconst roomInstance = global.get(formattedRoomName);\nif (!roomInstance) {\n    node.error(`Room instance not found for ${formattedRoomName}`);\n    return null;\n}\n\n// Apply Ambient Data\nroomInstance.setAmbientData(\n    Number(AmbientData.ambientTemp),\n    Number(AmbientData.ambientHumidity),\n    Number(AmbientData.ambientDewpoint)\n);\n\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: `Ambient Data Applied to ${formattedRoomName}`\n});\n\n// Apply Outsite Data\nroomInstance.setOutsiteData(\n    Number(outsiteTemps.temp),\n    Number(outsiteTemps.hum),\n    Number(outsiteTemps.dew)\n);\n\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: `Outsite Data Applied to ${formattedRoomName}`\n});\n\n// Retrieve previous values from context\nconst previousValues = flow.get(`sensorValues_${formattedRoomName}`) || {};\n\n// Function to create a message with a number payload\nfunction createMessage(entityId, value, key) {\n    if (previousValues[key] !== value) {\n        previousValues[key] = value; // Update context with the new value\n        return {\n            domain: \"opengrowbox\",\n            service: \"update_sensor\",\n            payload: {\n                entity_id: entityId,\n                value: Number(value) // Ensure the value is a number\n            }\n        };\n    }\n    return null;\n}\n\n// Create messages for all data if they changed\nconst messages = [\n    createMessage(`sensor.ogb_ambientvpd_${formattedRoomName}`, AmbientData.ambientVPD, \"ambientVPD\"),\n    createMessage(`sensor.ogb_ambienttemperature_${formattedRoomName}`, AmbientData.ambientTemp, \"ambientTemp\"),\n    createMessage(`sensor.ogb_ambienthumidity_${formattedRoomName}`, AmbientData.ambientHumidity, \"ambientHumidity\"),\n    createMessage(`sensor.ogb_ambientdewpoint_${formattedRoomName}`, AmbientData.ambientDewpoint, \"ambientDewpoint\"),\n    createMessage(`sensor.ogb_outsitetemperature_${formattedRoomName}`, Number(outsiteTemps.temp), \"outsiteTemp\"),\n    createMessage(`sensor.ogb_outsitehumidity_${formattedRoomName}`, Number(outsiteTemps.hum), \"outsiteHum\"),\n    createMessage(`sensor.ogb_outsitedewpoint_${formattedRoomName}`, Number(outsiteTemps.dew), \"outsiteDew\")\n].filter(msg => msg !== null); // Filter out unchanged messages\n\n// Save the current values to the context\nflow.set(`sensorValues_${formattedRoomName}`, previousValues);\n\n// Send messages individually\nif (messages.length > 0) {\n    messages.forEach((message) => {\n        node.send(message);\n    });\n    node.status({ fill: \"green\", shape: \"dot\", text: `${messages.length} Messages Sent` });\n} else {\n    node.status({ fill: \"blue\", shape: \"dot\", text: \"No Changes Detected\" });\n}\n\n// Return null to prevent further output from this function node\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":160,"wires":[["53ef2b596ba18627"]]},{"id":"32272ec2bcc57061","type":"function","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"SetOutSiteData","func":"// Hole Außentemperaturdaten aus der Nachricht\nconst currentData = msg.payload.current;\nconst temp = msg.payload.current.temperature_2m;\nconst hum = msg.payload.current.relative_humidity_2m;\n\n// Funktion zur Berechnung des Taupunkts\nconst calculateDewPoint = (temperature, humidity) => {\n    const temp = parseFloat(temperature);\n    const hum = parseFloat(humidity);\n\n    if (isNaN(temp) || isNaN(hum)) {\n        return \"unavailable\";\n    }\n\n    const a = 17.27;\n    const b = 237.7;\n\n    // Berechnung der Hilfsvariable γ(T, RH)\n    const gamma = (a * temp) / (b + temp) + Math.log(hum / 100);\n\n    // Berechnung des Taupunkts\n    const dewPoint = (b * gamma) / (a - gamma);\n\n    return parseFloat(dewPoint.toFixed(2));\n};\n\n// Berechnung des Taupunkts\nconst dew = calculateDewPoint(temp, hum);\n\n// Speichern der Außentemperaturdaten im Kontext\nconst outsiteTemps = {\n    temp: Number(temp),\n    hum: Number(hum),\n    dew: Number(dew)\n};\nflow.set(\"outsitetemps\", outsiteTemps);\n\n// Zeitstempel und Status-Update\nconst timestamp = new Date().toLocaleString();\nnode.status({ fill: \"green\", shape: \"dot\", text: `Loaded OutsiteData  ${timestamp}` });\n\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":100,"wires":[[]]},{"id":"a891291be3c02972","type":"link in","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"GetTent","links":["6fc066d05044b231"],"x":75,"y":160,"wires":[["b8de3efc886baffc"]]},{"id":"61718212e298a3ae","type":"link in","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"RoomEnv","links":["6fc066d05044b231","f282e8151d0b95db"],"x":75,"y":260,"wires":[["45fa43f3b0c3380c"]]},{"id":"ff75ecac788ac2f5","type":"api-call-service","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":600,"y":260,"wires":[[]]},{"id":"53ef2b596ba18627","type":"api-call-service","z":"4ad106a4cfadd543","g":"59446e8ae1b4e67b","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":600,"y":160,"wires":[[]]},{"id":"b74023821b77b8ee","type":"api-call-service","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Helligkeit oder Duty Cycle","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{   \"entity_id\": \"{{payload.data.entity_id}}\",   {{#payload.data.brightness_pct}}   \"brightness_pct\": {{payload.data.brightness_pct}}{{/payload.data.brightness_pct}}   {{^payload.data.brightness_pct}}{{#payload.data.percentage}}   \"percentage\": {{payload.data.percentage}}{{/payload.data.percentage}}{{/payload.data.brightness_pct}} }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":770,"y":600,"wires":[["ef6106847bbdb6a0"]]},{"id":"cc3f3ed06bb6badf","type":"function","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"SetzeSelectOption","func":"// Überprüfen, ob die erforderlichen Felder vorhanden sind\nif (!msg.payload.entity_id || !msg.payload.option) {\n    node.error(\"Fehlende entity_id oder option im Payload\");\n    return null;\n}\n\n// Erstellen des neuen Payloads für den Dienstaufruf\nmsg.payload = {\n    domain: \"select\",\n    service: \"select_option\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        option: msg.payload.option // Option korrekt als String belassen\n    }\n};\n\n// Statusmeldung für Debugging-Zwecke\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `Setze ${msg.payload.data.entity_id} auf ${msg.payload.data.option}`\n});\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":840,"wires":[["a497b6a7ac4b8029"]]},{"id":"a497b6a7ac4b8029","type":"api-call-service","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Setze Number-Wert","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\",     \"option\": \"{{payload.data.option}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":730,"y":840,"wires":[["79fa58f1866dc302"]]},{"id":"4b6a8ff776b4d80a","type":"switch","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"Prüfe Aktion","property":"payload.action","propertyType":"msg","rules":[{"t":"eq","v":"climate","vt":"str"},{"t":"eq","v":"dutycycle","vt":"str"},{"t":"eq","v":"on","vt":"str"},{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"number","vt":"str"},{"t":"eq","v":"select","vt":"str"}],"checkall":"true","repair":false,"outputs":6,"x":190,"y":700,"wires":[["c75c34096c753787"],["8bb461eacaa5cc2d"],["77b47604fac64d57"],["1abe9480672951a4"],["6fd8c24d7450e107"],["cc3f3ed06bb6badf"]]},{"id":"f08a236d8a71dbde","type":"debug","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"debug 486","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1010,"y":780,"wires":[]},{"id":"3370cbd2dcd72539","type":"debug","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"debug 487","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1010,"y":720,"wires":[]},{"id":"d74131598c744811","type":"debug","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"debug 488","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1010,"y":660,"wires":[]},{"id":"ef6106847bbdb6a0","type":"debug","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"debug 489","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1010,"y":600,"wires":[]},{"id":"b939ed832e996185","type":"debug","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"debug 490","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1010,"y":540,"wires":[]},{"id":"79fa58f1866dc302","type":"debug","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"debug 491","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1010,"y":840,"wires":[]},{"id":"ec029e020f48d5d4","type":"link in","z":"4ad106a4cfadd543","g":"8a6fdf8c2c02ea8d","name":"DeviceActions","links":["2f0d71e6a9233dbd"],"x":75,"y":700,"wires":[["4b6a8ff776b4d80a"]]},{"id":"ab06268559afb241","type":"function","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"SelectActionUlitmate","func":"// Initialisiere die Outputs\nlet outputs = [null, null];\nlet deviceRequests = flow.get(\"deviceRequests\") || [];\nlet ambientDevices = flow.get(\"ambientDevices\") || []; // Neue Liste, um verfügbare Geräte zu verfolgen\nlet devActions = [];\n\n// Sicherstellen, dass die OpenGrowBox-Klasse geladen ist\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    return null;\n}\n\n// Instanz für den Raum basierend auf dem Topic abrufen\nlet roomInstance = global.get(msg.topic);\nif (!roomInstance) {\n    return null;\n}\n\n// Falls roomInstance ein Array ist, greife auf das erste Element zu\nif (Array.isArray(roomInstance)) {\n    roomInstance = roomInstance[0];\n}\n\n// Sicherstellen, dass roomInstance die erwarteten Methoden und Eigenschaften besitzt\nif (typeof roomInstance.selectAction !== \"function\" || !roomInstance.devices) {\n    return null;\n}\n\n// Funktion, um die Anforderung an den flow zu setzen\nfunction registerDeviceRequest(deviceName, deviceType, roomName) {\n    const existingRequest = deviceRequests.find(d => d.deviceName === deviceName);\n\n    if (!existingRequest) {\n        deviceRequests.push({\n            deviceName,\n            deviceType,\n            roomName,\n            requestedAt: new Date().toISOString()\n        });\n        flow.set(\"deviceRequests\", deviceRequests);\n    }\n}\n\n// Funktion zur Filterung der Gerätetypen\nfunction isDeviceAllowed(device) {\n    const allowedTypes = [\"climate\", \"humidifier\", \"dehumidifier\", \"heater\", \"switch\", \"fan\"];\n    return allowedTypes.includes(device.deviceType);\n}\n\n// Sicherstellen, dass der Tent-Modus korrekt ist\nfunction isControlSetValid(roomInstance) {\n    return roomInstance.controlSet === \"Ambient\";\n}\n\n// Geräte aus dem ambient-Raum anfordern (andere Räume)\nif (isControlSetValid(roomInstance) && msg.topic !== \"ambient\") {\n    const ambientRoom = global.get(\"ambient\");\n    if (!ambientRoom) {\n        node.error(\"Ambient room instance not found in global context.\");\n        return;\n    }\n\n    // Geräteanforderungen stellen\n    ambientRoom.devices.forEach(device => {\n        if (isDeviceAllowed(device) && !device.isLocked) {\n            roomInstance.borrowDevice(device, roomInstance.tentName);\n        }\n    });\n\n    flow.set(\"deviceRequests\", deviceRequests);\n}\n\n// Geräte zurückgeben\nif (!isControlSetValid(roomInstance) && msg.topic !== \"ambient\") {\n    if (!roomInstance) {\n        node.error(\"Ambient room instance not found in global context.\");\n        return;\n    }\n\n    roomInstance.devices.forEach(device => {\n        if (isDeviceAllowed(device) && device.isLocked) {\n            const offAction = roomInstance.returnDevice(device);\n            if (offAction) {\n                devActions.push(offAction); // Direkt zu devActions hinzufügen\n            }\n        }\n    });\n}\n\n// ambient-Raum: Geräteverarbeitung und Anfragen beantworten\nif (msg.topic === \"ambient\") {\n    // Geräte in der Liste aktualisieren\n    roomInstance.devices.forEach(device => {\n        let isBorrowed = roomInstance.devices.some(d => d.name === device.name);\n        let isInAmbientList = ambientDevices.some(d => d.name === device.name);\n\n        if (!isBorrowed && !device.isLocked && isDeviceAllowed(device) && !isInAmbientList) {\n            ambientDevices.push(device);\n        }\n    });\n\n    flow.set(\"ambientDevices\", ambientDevices);\n\n    // Geräteanforderungen abarbeiten\n    deviceRequests = deviceRequests.filter(request => {\n        const device = ambientDevices.find(d => d.name === request.deviceName);\n        if (device && !device.isLocked) {\n            const requestingRoom = global.get(request.roomName);\n            if (!requestingRoom) {\n                return true; // Behalte die Anfrage, wenn der Raum nicht existiert\n            }\n\n            requestingRoom.borrowDevice(device, roomInstance.tentName);\n\n            const borrowedDevices = global.get(\"borrowedDevices\") || [];\n            borrowedDevices.push(device);\n            global.set(\"borrowedDevices\", borrowedDevices);\n\n            ambientDevices = ambientDevices.filter(d => d.name !== device.name);\n            flow.set(\"ambientDevices\", ambientDevices);\n\n            return false; // Entferne die abgearbeitete Anfrage\n        } else {\n            return true; // Behalte die nicht abgearbeitete Anfrage\n        }\n    });\n\n    flow.set(\"deviceRequests\", deviceRequests);\n\n    // Geräte zurückgeben\n    roomInstance.devices.forEach(device => {\n        if (device.lockedFor === roomInstance.tentName) {\n            const offAction = roomInstance.returnDevice(device);\n            if (offAction) {\n                devActions.push(offAction); // Direkt zu devActions hinzufügen\n            }\n        }\n    });\n}\n\nif(roomInstance.tentMode === \"Disabled\")return null\n\n// Aktionen für den Raum Prüfen und Ausführen\nlet actions;\ntry {\n    if (roomInstance.tentName === \"ambient\" || msg.topic === \"ambient\") return;\n\n    actions = roomInstance.selectModeAction();\n    //node.warn(`${roomInstance.tentName} Final Actions: ${JSON.stringify(actions, null, 2)}`);\n    if (!actions) {\n        node.warn(\"No actions returned from selectAction method.\");\n        return;\n    }\n} catch (err) {\n    node.warn(`Error during selectAction. ${err}`);\n    return;\n}\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: `Select Action for ${roomInstance.tentName}` });\n\n// Gerätaktionen vorbereiten\nif (actions.deviceActions) {\n    devActions = [...actions.deviceActions, ...devActions]; // Combine deviceActions and offActions\n}\n\n// Debug-Log für alle Aktionen (inklusive OFF_Action_ROOM)\n//node.warn(`Final Combined Actions: ${JSON.stringify(devActions, null, 2)}`);\n\n// Nachrichten für den zweiten Output vorbereiten\nlet messages = [];\n\n// Verarbeitung aller Aktionen für den zweiten Output\nfunction processDeviceActions(actions) {\n    actions.forEach((action) => {\n        if (Array.isArray(action)) {\n            // Rekursion: Bearbeite verschachtelte Arrays\n            processDeviceActions(action);\n        } else if (action && typeof action === \"object\") {\n            // Objekt hinzufügen\n            messages.push({ payload: action });\n        }\n    });\n}\n\n// Verarbeitung aller Aktionen für den zweiten Output\nprocessDeviceActions(devActions);\n\n// Jede Nachricht einzeln an den zweiten Output senden\nmessages.forEach(message => {\n    node.send([null, message]);\n});\n\n// Nachricht für den ersten Output zurückgeben\nconst msg1 = { payload: { ...actions } };\noutputs[0] = msg1;\n\nreturn outputs;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":560,"y":380,"wires":[["493ee3fe79b168d5","0e6a0d6b40505901"],["1f1ed397e3c30251","2f0d71e6a9233dbd"]]},{"id":"02701e85ddace028","type":"link in","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"RoomControl","links":["6fe72eaf1d2902f0"],"x":75,"y":380,"wires":[["af1aa666ca6fb17e"]]},{"id":"af1aa666ca6fb17e","type":"function","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"Sort Sensor Types","func":"// Hauptschlüssel in `msg.payload` extrahieren (z.B., \"flowertent\", \"ambient\", etc.)\nlet mainKey = Object.keys(msg.payload)[0];\nlet data = msg.payload[mainKey];  // Hol das innere Objekt mit den eigentlichen Daten\nlet room = msg.topic;\n\n// Sicherstellen, dass die OpenGrowBox-Klasse geladen ist\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    return new Error(\"OpenGrowBox class not found in globals.\");\n}\n// Sicherstellen, dass die Raum-Instanz geladen ist\nconst roomInstance = global.get(room);\nif (!roomInstance) {\n    node.status({ fill: \"red\", shape: \"ring\", text: `No Room Data!` });\n    return new Error(`Room instance for \"${msg.topic}\" not found.`);\n}\n\nif (roomInstance) {\n    node.status({ fill: \"blue\", shape: \"ring\", text: `Start VPD Creation for ${roomInstance.tentName || room}` });\n}\n\n// Arrays für verschiedene Sensortypen initialisieren\nlet wish = [];\nlet temperatures = [];\nlet humidity = [];\nlet dewpoints = [];\n\n\n// Funktion zur Verarbeitung verschachtelter Objekte\nfunction processEntity(sensorName, sensorData) {\n    let entity_id = sensorName.toLowerCase();\n    let entity = { entity_id: entity_id, value: sensorData };\n\n    // Sortiere die Entitäten in die entsprechenden Kategorien\n    if (entity_id.includes('wish') || entity_id.includes('wurzel') || entity_id.includes('root') || entity_id.includes('number.') || entity_id.includes('weigth') || entity_id.includes('level')|| entity_id.includes('avg') || entity_id.includes('current')||  entity_id.includes('target')|| entity_id.includes('ambient') || entity_id.includes('outsite')) {\n        wish.push(entity);\n    }else if (entity_id.includes('temperature') || entity_id.includes('temp')) {\n        temperatures.push(entity);\n    } else if (entity_id.includes('humidity') || entity_id.includes('feuchtigkeit') || entity_id.includes('rh')) {\n        humidity.push(entity);\n    } else if (entity_id.includes('dewpoint') || entity_id.includes('dew')) {\n        dewpoints.push(entity);\n    }\n}\n\n// Hauptschleife zum Durchlaufen aller Gruppen und Sensoren in data\nfor (let group in data) {\n    if (data.hasOwnProperty(group)) {\n        for (let sensor in data[group]) {\n            if (data[group].hasOwnProperty(sensor)) {\n                processEntity(sensor, data[group][sensor]);\n            }\n        }\n    }\n}\n\n// Durchschnitt für Temperatur und Feuchtigkeit berechnen und an die Raum-Instanz setzen\nfunction calculateAvgValue(entities) {\n    let sum = 0;\n    let count = 0;\n\n    entities.forEach((entry) => {\n        let value = parseFloat(entry.value);\n        if (!isNaN(value)) {\n            sum += value;\n            count++;\n        }\n    });\n\n    return count === 0 ? null : parseFloat((sum / count).toFixed(2));\n}\n\n// Durchschnittliche Temperatur und Luftfeuchtigkeit berechnen und setzen\nconst avgTemp = calculateAvgValue(temperatures);\nconst avgHumidity = calculateAvgValue(humidity);\n\nif (avgTemp !== null) {\n    roomInstance.setCurrentTemp(avgTemp);\n}\nif (avgHumidity !== null) {\n    roomInstance.setCurrentHumidity(avgHumidity);\n}\n\n// Berechnungen für Dewpoint und VPD explizit aufrufen\nconst currentDew = roomInstance.calculateDewPoint();\nconst currentVPD = roomInstance.calculateCurrentVPD();\n\nconst Room = {\n    Temp: roomInstance.tentData.temperature,\n    Humidity: roomInstance.tentData.humidity,\n    Dewpoint: roomInstance.tentData.dewpoint,\n    VPD: roomInstance.vpd.current,\n}\n\n// Nachrichtenausgabe auf verschiedenen Outputs\nreturn [\n    { payload: Room, topic: `${room}` },\n];\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":210,"y":380,"wires":[["6fc066d05044b231"]]},{"id":"c5a4bb7985db5b7e","type":"debug","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"Actions_log","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":790,"y":320,"wires":[]},{"id":"6fc066d05044b231","type":"link out","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"RoomEnv","mode":"link","links":["61718212e298a3ae","a891291be3c02972","a25a55f5d6ba8c8e"],"x":345,"y":380,"wires":[]},{"id":"a25a55f5d6ba8c8e","type":"link in","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"RoomEnv","links":["6fc066d05044b231"],"x":415,"y":380,"wires":[["ab06268559afb241"]]},{"id":"493ee3fe79b168d5","type":"function","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"ActionLogger","func":"if (msg.payload.Action === \"Unchanged\"){\n    return\n}else{\n    return msg;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":580,"y":320,"wires":[["c5a4bb7985db5b7e"]]},{"id":"1f1ed397e3c30251","type":"debug","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"DeviceAciton","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":790,"y":400,"wires":[]},{"id":"0e6a0d6b40505901","type":"debug","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"All Actions","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":790,"y":360,"wires":[]},{"id":"2f0d71e6a9233dbd","type":"link out","z":"4ad106a4cfadd543","g":"4c1919317692abf7","name":"DeviceActions","mode":"link","links":["ec029e020f48d5d4"],"x":725,"y":440,"wires":[]},{"id":"5772bf4c.b461d","type":"server","name":"OpenGrowBox","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true}]