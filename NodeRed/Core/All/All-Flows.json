[{"id":"5b9485aa95f0d129","type":"tab","label":"Master","disabled":false,"info":"","env":[]},{"id":"4ad106a4cfadd543","type":"tab","label":"MasterOut","disabled":false,"info":"","env":[]},{"id":"f5bdabf9af8c96ce","type":"tab","label":"Debug","disabled":false,"info":"","env":[]},{"id":"3c29ef5865ef5803","type":"group","z":"4ad106a4cfadd543","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["1b0f8eda23cb1d17","585ff1a6d924abed","f3fa7c8da50ee432","c9878f71af57f6c4","e141c5f654712be3"],"x":174,"y":1299,"w":512,"h":202},{"id":"81caf0ba5f875f89","type":"group","z":"f5bdabf9af8c96ce","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["2a541c91b2edba04","d6bca54ccf754d08","3a64bf26e682bab7","0d3f1a0acbabae8e","04ba01fcc61d9fc4","14a4eaa73e6b6453","749d5e2dbe5289a9","1f5fe4d6f90331f7","9ec6703d8253a352","8fef476bf10e6fcf","6e35954e90ce2a8a","caa148810e754899","146f25cd91ba67f9","d1a5a4452c341d20","57be2e89a4c5946a","a41029a330095cae","d7073a729789afe0","61525fec6bada3b4","f990cbfdf5827615","0215c92604836be8","127435cf61527b56","7a7518394a08bff3","c392b81025eabb2e","c0effa66bbe94a36","5c751838e52317b9","6e90d968be86f209","7073f75ad2ae1166","47b7046b0603a181","490484754f2b8584","6f8125e2f53a6bda","571f573dca265454","3542a09bf6efb48a","08dc49d22afd91db","8f8384735fcc7d22"],"x":54,"y":119,"w":1372,"h":622},{"id":"3523f89ec9c2c676","type":"group","z":"5b9485aa95f0d129","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["f918483e39cca146","002d11c9c357103a","e8932288657b06b0","216fd3f0b8d840e8","2ab6344485625dcd","6fe72eaf1d2902f0","fabadc4d4be7d4e0","99978d5c67470d93","d5304206f52a55b7","d55ff9409b336801","6bcddff9e4459ebe","30e734dbde9b993e","9243695e03284f5a","c806a9566fb660e3","ef80caba76d3b5d2"],"x":14,"y":519,"w":992,"h":242},{"id":"43457bccef542a7d","type":"group","z":"5b9485aa95f0d129","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["ff31217e40ad4b05","7c87b0ddef19c485","544a86e20ad408b7","830ae29ab82e7324","e169760164875f0d","475e1c236aeba4d1","e2d1060d7f9a6441","9626681e71699287","8fe9c92afc561145","9967ec5e0edd8865","51e259473c842217","7972042b37655b19","1f613600601fde7a","cbd6c91073fd88a5","43d31f16658453c9","4760488940785c7b","47e4915877639ef5","10e3067fe685efa7","cfef77bffb098c25","21dd9af34945132e","64cb926c237c0102","139015f29bc3dd89","090ae69011847e65","06edd4eb472d3731","f539391e66f50ccf","3173745ac1f6be42"],"x":14,"y":199,"w":1432,"h":302},{"id":"ef62895c84290225","type":"group","z":"5b9485aa95f0d129","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["ec276734748d6829","04f5f1cb8930332f","46fe411f25a067ab","5b6a82d0293eb58e","9e924b8b3bf85b05","a43ba85d9f0563c4","40afa2a7ef46e38a"],"x":14,"y":39,"w":712,"h":142},{"id":"6f8c641581426212","type":"junction","z":"4ad106a4cfadd543","x":560,"y":600,"wires":[["d4dbed9115a15488"]]},{"id":"1ea3df0af8459869","type":"junction","z":"4ad106a4cfadd543","x":580,"y":980,"wires":[[]]},{"id":"a175202c75d55747","type":"junction","z":"4ad106a4cfadd543","x":40,"y":600,"wires":[["af1aa666ca6fb17e","1b0f8eda23cb1d17"]]},{"id":"64cb926c237c0102","type":"junction","z":"5b9485aa95f0d129","g":"43457bccef542a7d","x":440,"y":340,"wires":[["51e259473c842217","7c87b0ddef19c485"]]},{"id":"c806a9566fb660e3","type":"junction","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","x":640,"y":680,"wires":[["fabadc4d4be7d4e0","216fd3f0b8d840e8"]]},{"id":"5772bf4c.b461d","type":"server","name":"OpenGrowBox","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true},{"id":"home-assistant-server","type":"server","name":"Home Assistant","addon":true},{"id":"36688185ea945bf4","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey","palette":"light"}},"site":{"name":"Node-RED Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD.MM.YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"7c87b0ddef19c485","type":"ha-api","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"areas","server":"5772bf4c.b461d","version":1,"debugenabled":false,"protocol":"websocket","method":"get","path":"","data":"{\"type\": \"config/area_registry/list\"}","dataType":"json","responseType":"json","outputProperties":[{"property":"areas","propertyType":"msg","value":"","valueType":"results"},{"property":"topic","propertyType":"msg","value":"areas","valueType":"str"}],"x":510,"y":380,"wires":[["43d31f16658453c9","4760488940785c7b"]]},{"id":"544a86e20ad408b7","type":"inject","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"Manual Update","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"15","topic":"","payload":"","payloadType":"date","x":160,"y":240,"wires":[["64cb926c237c0102"]]},{"id":"830ae29ab82e7324","type":"ha-api","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"entities","server":"5772bf4c.b461d","version":1,"debugenabled":false,"protocol":"websocket","method":"get","path":"","data":"{\"type\": \"config/entity_registry/list\"}","dataType":"json","responseType":"json","outputProperties":[{"property":"entities","propertyType":"msg","value":"","valueType":"results"}],"x":1040,"y":380,"wires":[["cbd6c91073fd88a5"]]},{"id":"e169760164875f0d","type":"server-events","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"On Connect","server":"5772bf4c.b461d","version":3,"exposeAsEntityConfig":"","eventType":"home_assistant_client","eventData":"","waitForRunning":true,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"},{"property":"event_type","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"}],"x":110,"y":460,"wires":[["475e1c236aeba4d1"]]},{"id":"475e1c236aeba4d1","type":"switch","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"con","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"connected","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":330,"y":420,"wires":[["64cb926c237c0102"]]},{"id":"e2d1060d7f9a6441","type":"server-events","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"entity_registry_updated","server":"5772bf4c.b461d","version":3,"exposeAsEntityConfig":"","eventType":"entity_registry_updated","eventData":"","waitForRunning":true,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"},{"property":"event_type","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"}],"x":140,"y":280,"wires":[["9967ec5e0edd8865"]]},{"id":"9626681e71699287","type":"server-events","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"device_registry_updated","server":"5772bf4c.b461d","version":3,"exposeAsEntityConfig":"","eventType":"device_registry_updated","eventData":"","waitForRunning":true,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"},{"property":"event_type","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"}],"x":150,"y":340,"wires":[["9967ec5e0edd8865"]]},{"id":"8fe9c92afc561145","type":"server-events","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"area_registry_updated","server":"5772bf4c.b461d","version":3,"exposeAsEntityConfig":"","eventType":"area_registry_updated","eventData":"","waitForRunning":true,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"},{"property":"event_type","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"}],"x":140,"y":400,"wires":[["9967ec5e0edd8865"]]},{"id":"9967ec5e0edd8865","type":"trigger","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"Update","op1":"","op2":"","op1type":"nul","op2type":"payl","duration":"1","extend":false,"overrideDelay":false,"units":"min","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":340,"y":340,"wires":[["64cb926c237c0102"]]},{"id":"51e259473c842217","type":"ha-get-entities","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"Get All Entities","server":"home-assistant-server","version":1,"rules":[],"outputType":"array","outputEmptyResults":false,"outputLocationType":"msg","outputLocation":"payload","x":540,"y":300,"wires":[["7972042b37655b19"]]},{"id":"7972042b37655b19","type":"function","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"AllData","func":"msg.topic=\"AllData\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":720,"y":300,"wires":[["ff31217e40ad4b05","139015f29bc3dd89"]]},{"id":"1f613600601fde7a","type":"function","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"GroupFilledRoom","func":"let data = msg.payload;\nlet allData = data.AllData;\ndelete data.AllData;\n\n// Erstelle ein Mapping von entity_id zu state aus dem AllData-Array\nlet entityIdToStateMap = {};\nallData.forEach(item => {\n    entityIdToStateMap[item.entity_id] = item.state;\n});\n\n// Erstelle ein neues Objekt zur Gruppierung der Daten, das die gleiche Struktur wie das Ursprungsobjekt beibehält\nlet groupedData = {};\n\n// Iteriere über die Hauptgruppen in data (z.B., flowertent, vegittent, dryingtent, ambient)\nfor (let group in data) {\n    if (data.hasOwnProperty(group)) {\n        groupedData[group] = {}; // Behalte den Gruppennamen wie flowertent\n\n        // Iteriere über die Untergruppen in der Hauptgruppe (z.B., light, plant, co2, ...)\n        for (let subGroup in data[group]) {\n            if (data[group].hasOwnProperty(subGroup)) {\n                groupedData[group][subGroup] = {};\n\n                // Iteriere über die Sensoren in der Untergruppe\n                for (let sensor in data[group][subGroup]) {\n                    if (data[group][subGroup].hasOwnProperty(sensor)) {\n                        // Hole den Wert aus entityIdToStateMap, falls vorhanden, andernfalls behalte den bestehenden Wert\n                        let value = entityIdToStateMap[sensor] !== undefined ? entityIdToStateMap[sensor] : data[group][subGroup][sensor];\n\n                        // Speichere den Sensor-Schlüssel mit dem gefüllten Wert in groupedData\n                        groupedData[group][subGroup][sensor] = value;\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Setze das gefüllte Objekt als msg.payload\nmsg.payload = groupedData;\nmsg.tentData = true\n// Entferne nicht benötigte Eigenschaften aus msg\ndelete msg.devices;\ndelete msg.entities;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1230,"y":300,"wires":[["47e4915877639ef5","06edd4eb472d3731"]]},{"id":"cbd6c91073fd88a5","type":"function","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"DynamicCollectData","func":"// Erster Teil: Erstellen des `entities`-Objekts mit `area_id` und `name`\nconst entities = {};\n\nmsg.entities.forEach(e => {\n    // Überprüfe, ob entweder `device_id` gefüllt ist oder `area_id` gefüllt ist, aber `device_id` null ist\n    if (!e.device_id && e.area_id) {\n        const area = msg.areas.find(a => a.area_id === e.area_id);\n        if (area) {\n            entities[e.entity_id] = {\n                area_id: area.area_id,\n                name: area.name\n            };\n        }\n    } else if (e.device_id) {\n        const device = msg.devices.find(d => d.id === e.device_id);\n        const area = msg.areas.find(a => a.area_id === device.area_id);\n        if (area) {\n            entities[e.entity_id] = {\n                area_id: area.area_id,\n                name: area.name\n            };\n        }\n    }\n});\n\n// Erzeuge die nicht gruppierte Nachricht für den zweiten Output\nlet ungroupedOutput = { payload: entities, update: true };\n\n// Zweiter Teil: Gruppierung von `entities` nach `area_id` und `name`\nlet output = {};\n\nfor (let key in entities) {\n    let area_id = entities[key].area_id;\n    let entityName = entities[key].name;\n\n    // Falls der `area_id`-Bereich noch nicht existiert, erstelle ihn\n    if (!output[area_id]) {\n        output[area_id] = {};\n    }\n\n    // Teile den Sensor-String in `name` und `type` auf\n    let [prefix, suffix] = key.split('.'); // Trenne bei Punkt, z.B. \"sensor.light_ip\"\n    let [name, type] = suffix.split('_'); // Trenne bei Unterstrich, z.B. \"light_ip\"\n\n    // Falls der Name-Bereich noch nicht existiert, erstelle ihn\n    if (!output[area_id][name]) {\n        output[area_id][name] = {};\n    }\n\n    // Speichere den vollständigen Sensor-Schlüssel mit `null` als Wert\n    output[area_id][name][key] = null;\n}\n\n// Erzeugung von Nachrichten für jeden `area_id`-Bereich (erster Output)\nlet messages = [];\n\nfor (let area_id in output) {\n    if (output.hasOwnProperty(area_id)) {\n        // Erzeuge eine Nachricht für jede Gruppe mit `area_id` als `topic`\n        messages.push({\n            topic: area_id,\n            payload: output[area_id]\n        });\n    }\n}\n\n// Rückgabe der beiden Outputs: erster Output für die gruppierten Daten, zweiter für die ungruppierten\nreturn [messages, ungroupedOutput];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1220,"y":380,"wires":[["cfef77bffb098c25","f539391e66f50ccf"],["10e3067fe685efa7","3173745ac1f6be42"]]},{"id":"f918483e39cca146","type":"server-events","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"newEvent","server":"5772bf4c.b461d","version":3,"exposeAsEntityConfig":"","eventType":"state_changed","eventData":"","waitForRunning":true,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"},{"property":"event_type","propertyType":"msg","value":"$outputData(\"eventData\").event_type","valueType":"jsonata"}],"x":100,"y":600,"wires":[["002d11c9c357103a"]]},{"id":"ff31217e40ad4b05","type":"function","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"DynamicCombinedRoomData","func":"// Überprüfe, ob die Nachricht `AllData` ist und speichere sie im Kontext\nif (msg.topic === \"AllData\") {\n    context.set(\"AllData\", msg.payload);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"AllData Loaded\", })\n    return null; // `AllData` wird nur gespeichert und nicht sofort ausgegeben\n}\n\n// Hole `AllData` aus dem Kontext\nlet allData = context.get(\"AllData\");\n\n// Wenn `AllData` noch nicht geladen ist, warte auf weitere Nachrichten\nif (!allData) {\n    node.warn(\"AllData noch nicht im Kontext vorhanden. Warte auf AllData.\");\n    node.status({fill:\"red\", shape: \"ring\", text: \"No Data Available\", })\n    return null;\n}\n\n// Kombiniere `AllData` mit der aktuellen Nachricht\nlet combinedData = {\n    AllData: allData,\n    [msg.topic]: msg.payload\n};\n\n// Setze das kombinierte Objekt als `msg.payload`\nmsg.payload = combinedData;\n\n// Gib die kombinierte Nachricht zurück\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":990,"y":300,"wires":[["1f613600601fde7a","090ae69011847e65"]]},{"id":"002d11c9c357103a","type":"function","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"SetArea","func":"if(msg.update) {\n    node.status({fill:\"green\", shape: \"dot\", text: \"Area Data Loaded\", })\n    context.set(\"data\", msg.payload);\n    return;\n}\nconst data = context.get(\"data\");\n\nif(!data) {\n    node.status({fill:\"red\", shape: \"ring\", text: \"No Area Data\", })\n    return;\n}\n\nconst area = data[msg.payload.entity_id];\nif(!area) return;\n\nmsg.area = area.name.toLowerCase();\n\n\n// Extrahiere `entity_id`, z.B. \"sensor.h5179_485d_temperature\"\nconst entity_id = msg.payload.entity_id;\n\n// Zerlege den `entity_id`-String, um den Gerätetyp zu extrahieren\nconst parts = entity_id.split('.')[1]; // Entfernt den Präfix (z.B., \"sensor.\")\nconst device = parts.split('_')[0]; // Entfernt den Suffix nach dem ersten Unterstrich\n\n// Extrahiere alten und neuen Zustand\nconst oldState = msg.payload.event.old_state.state;\nconst newState = msg.payload.event.new_state.state;\n\n// Erstelle ein Objekt `updateData` für das Update\nconst updateData = {\n    room: msg.area,\n    device: device,\n    entity_id: entity_id,\n    oldState: oldState,\n    newState: newState\n};\nnode.status({ text: `Update for: ${msg.area}`});\nmsg.payload = updateData\nmsg.update = true\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":600,"wires":[["2ab6344485625dcd","6bcddff9e4459ebe"]]},{"id":"e8932288657b06b0","type":"function","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"GetRoomInstance","func":"// Hole den Raumnamen aus `msg.area`\nconst room = msg.topic;\n\n// Lade die Instanz der OpenGrowBox für den Raum\nconst roomInstance = global.get(room);\nif (!roomInstance) {\n    node.warn(`Keine Instanz für Raum ${room} gefunden.`);\n    return null;\n}\nmsg.payload = [roomInstance]\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":680,"wires":[["c806a9566fb660e3"]]},{"id":"216fd3f0b8d840e8","type":"debug","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"RoomObject","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":790,"y":680,"wires":[]},{"id":"43d31f16658453c9","type":"ha-api","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"devices","server":"5772bf4c.b461d","version":1,"debugenabled":false,"protocol":"websocket","method":"get","path":"","data":"{\"type\": \"config/device_registry/list\"}","dataType":"json","responseType":"json","outputProperties":[{"property":"devices","propertyType":"msg","value":"","valueType":"results"}],"x":820,"y":380,"wires":[["830ae29ab82e7324"]]},{"id":"ec276734748d6829","type":"inject","z":"5b9485aa95f0d129","g":"ef62895c84290225","name":"Init","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":"1","topic":"","payload":"OpenGrowBox Start","payloadType":"str","x":490,"y":80,"wires":[["04f5f1cb8930332f"]]},{"id":"04f5f1cb8930332f","type":"function","z":"5b9485aa95f0d129","g":"ef62895c84290225","name":"ClearGlobals","func":"// Alle globalen Schlüssel abrufen\nconst keys = global.keys();\n\nif (keys.length === 0) {\n    node.warn(\"Keine globalen Variablen vorhanden, nichts zu löschen.\");\n    return null; // Keine Variablen zum Löschen\n}\n\n// Alle globalen Schlüssel löschen\nkeys.forEach(key => {\n    global.set(key, undefined); // Setzt den Schlüssel auf undefined, was ihn effektiv löscht\n    node.warn(`Globale Variable gelöscht: ${key}`);\n});\n\nnode.status({\n    fill: \"green\",\n    shape: \"ring\",\n    text: `Alle ${keys.length} globalen Variablen gelöscht`\n});\n\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":630,"y":80,"wires":[[]]},{"id":"2ab6344485625dcd","type":"function","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"CombinedUpdated_RoomData","func":"// Hole die gespeicherten Basisdaten aus dem globalen Speicher\nlet tentsData = global.get(\"tentsData\") || {};\n\n// Prüfen, ob die Nachricht ein Update enthält (msg.update = true)\nif (msg.update === true) {\n    // Extrahiere die Update-Informationen\n    const update = msg.payload;\n    const room = update.room; // Welcher Raum soll aktualisiert werden\n    const device = update.device; // Welches Gerät im Raum\n    const entityId = update.entity_id; // Entität, die aktualisiert wird\n    const newValue = update.newState; // Neuer Wert\n\n    // Sicherstellen, dass der Raum in den Daten existiert\n    if (tentsData[room]) {\n        // Sicherstellen, dass das Gerät im Raum existiert\n        if (tentsData[room][device]) {\n            // Prüfen, ob die Entität existiert\n            if (tentsData[room][device][entityId] !== undefined) {\n                const oldValue = tentsData[room][device][entityId];\n\n                // Aktualisieren, wenn der Wert unterschiedlich ist\n                if (oldValue !== newValue) {\n                    tentsData[room][device][entityId] = newValue;\n                    node.status({ fill: \"green\", shape: \"dot\", text: `Updated: ${room} -> ${device} -> ${entityId}` });\n                } else {\n                    node.status({ fill: \"blue\", shape: \"ring\", text: `No change: ${room} -> ${device} -> ${entityId}` });\n                }\n            } else {\n                node.status({ fill: \"yellow\", shape: \"ring\", text: `Entity not found: ${room} -> ${device} -> ${entityId}` });\n            }\n        } else {\n            node.status({ fill: \"red\", shape: \"ring\", text: `Device not found: ${room} -> ${device}` });\n        }\n    } else {\n        node.status({ fill: \"red\", shape: \"ring\", text: `Room not found: ${room}` });\n    }\n\n    // Setze den msg.topic auf den Raum-Namen\n    msg.topic = room;\n\n    // Gib nur den aktualisierten Raum zurück\n    msg.payload = { [room]: tentsData[room] };\n} else {\n    // Basisdaten speichern\n    const newTentsData = msg.payload;\n\n    // Räume in die globale Datenstruktur hinzufügen oder aktualisieren\n    for (const room in newTentsData) {\n        if (newTentsData.hasOwnProperty(room)) {\n            tentsData[room] = { ...tentsData[room], ...newTentsData[room] };\n        }\n    }\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Base data updated\" });\n\n    // Setze den msg.topic auf den Raum-Namen, falls ein einzelner Raum geladen wurde\n    msg.topic = \"all_rooms\";\n\n    // Gib die gesamte Struktur zurück, wenn es keine Updates sind\n    //msg.payload = tentsData;\n}\n\n// Speichere die aktualisierten Daten im globalen Speicher\nglobal.set(\"tentsData\", tentsData);\n\n// Debugging: Zeige die vollständige Struktur\n//node.warn(`Updated tents data: ${JSON.stringify(tentsData, null, 2)}`);\n\n// Rückgabe des aktualisierten Raums oder der gesamten Struktur\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":570,"y":600,"wires":[["30e734dbde9b993e","ef80caba76d3b5d2"]]},{"id":"46fe411f25a067ab","type":"inject","z":"5b9485aa95f0d129","g":"ef62895c84290225","name":"Init","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"1","topic":"","payload":"OpenGrowBox Start","payloadType":"str","x":110,"y":80,"wires":[["40afa2a7ef46e38a"]]},{"id":"6fe72eaf1d2902f0","type":"link out","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"MasterLink","mode":"link","links":["02701e85ddace028","e9fc73b86d447581"],"x":965,"y":600,"wires":[]},{"id":"5b6a82d0293eb58e","type":"inject","z":"5b9485aa95f0d129","g":"ef62895c84290225","name":"Load Data on Start","props":[],"repeat":"","crontab":"","once":true,"onceDelay":"2","topic":"","x":150,"y":140,"wires":[[]]},{"id":"9e924b8b3bf85b05","type":"file in","z":"5b9485aa95f0d129","g":"ef62895c84290225","name":"Read from File","filename":"/data/openGrowBox.json","filenameType":"str","format":"utf8","chunk":false,"sendError":false,"encoding":"none","x":380,"y":140,"wires":[["a43ba85d9f0563c4"]]},{"id":"a43ba85d9f0563c4","type":"function","z":"5b9485aa95f0d129","g":"ef62895c84290225","name":"Initialize Instances","func":"// Prüfen, ob die Klasse OpenGrowBox im globalen Kontext verfügbar ist\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    node.error(\"OpenGrowBox class not found in global context\");\n    return null;\n} \nif (msg.payload) {\n    const storedData = JSON.parse(msg.payload);\n    storedData.forEach(roomData => {\n        const roomName = roomData.roomName;\n        const roomInstance = new OpenGrowBox(roomName);\n        roomInstance.tentData = roomData.tentData;\n        global.set(roomName, roomInstance);\n    });\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Instances Loaded\" });\n} else {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"No Data Found\" });\n}\nreturn null;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":590,"y":140,"wires":[[]]},{"id":"fabadc4d4be7d4e0","type":"function","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"Prepare Data","func":"const allInstances = global.keys().map(roomName => {\n    const roomInstance = global.get(roomName);\n    return {\n        roomName: roomName,\n        tentData: roomInstance ? roomInstance.tentData : null\n    };\n});\n\nmsg.payload = JSON.stringify(allInstances, null, 2);\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":720,"wires":[["99978d5c67470d93"]]},{"id":"99978d5c67470d93","type":"file","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"Write to File","filename":"/data/openGrowBox.json","appendNewline":false,"createDir":true,"overwriteFile":"true","encoding":"utf8","x":810,"y":720,"wires":[[]]},{"id":"4760488940785c7b","type":"function","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"RoomManager","func":"// Hole aktuelle Räume aus Home Assistant\nconst currentAreas = msg.areas; // Räume von Home Assistant\nconst currentAreaIds = currentAreas.map(area => area.area_id.toLowerCase()); // IDs der aktuellen Räume\n\n// Hole gespeicherte Räume aus tentsData\nlet tentsData = global.get(\"tentsData\") || {};\nlet removedRooms = [];\n\n// Iteriere über gespeicherte Räume und entferne verwaiste\nfor (let roomName in tentsData) {\n    if (!currentAreaIds.includes(roomName)) {\n        // Raum aus tentsData entfernen\n        delete tentsData[roomName];\n        removedRooms.push(roomName);\n\n        // Globale Rauminstanz entfernen\n        global.set(roomName, null);\n    }\n}\n\n// Aktualisiere tentsData im globalen Speicher\nglobal.set(\"tentsData\", tentsData);\n\n// Logge die entfernten Räume\nif (removedRooms.length > 0) {\n    node.warn(`Removed orphaned rooms: ${removedRooms.join(', ')}`);\n} else {\n    node.status({ fill: \"green\", shape: \"dot\", text: \"No orphaned rooms found\" });\n}\n\n// Rückgabe der aktualisierten Daten\nmsg.payload = { removedRooms, remainingRooms: Object.keys(tentsData) };\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":360,"wires":[[]]},{"id":"47e4915877639ef5","type":"link out","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"GroupFilledRoom","mode":"link","links":["d5304206f52a55b7"],"x":1375,"y":300,"wires":[]},{"id":"d5304206f52a55b7","type":"link in","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"link in 87","links":["47e4915877639ef5"],"x":415,"y":580,"wires":[["2ab6344485625dcd"]]},{"id":"10e3067fe685efa7","type":"link out","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"CollectedRooms","mode":"link","links":["d55ff9409b336801"],"x":1375,"y":400,"wires":[]},{"id":"d55ff9409b336801","type":"link in","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"link in 88","links":["10e3067fe685efa7"],"x":215,"y":580,"wires":[["002d11c9c357103a"]]},{"id":"cfef77bffb098c25","type":"link out","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"DataNeededRoom","mode":"link","links":["21dd9af34945132e"],"x":1375,"y":360,"wires":[]},{"id":"21dd9af34945132e","type":"link in","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"DataNeededRoom","links":["cfef77bffb098c25"],"x":825,"y":280,"wires":[["ff31217e40ad4b05"]]},{"id":"40afa2a7ef46e38a","type":"function","z":"5b9485aa95f0d129","g":"ef62895c84290225","name":"OpenGrowBox","func":"class OpenGrowBox {\n    constructor(tentName = \"\", plantStage = \"\", tentMode = \"\", perfectionTolerance = 0.025) {\n\n        // Tent Environment        \n        this.tentName = tentName;\n        this.tentMode = tentMode;\n        this.plantStage = plantStage;\n        this.controlSet = \"\";\n\n        this.devices = [];\n        this.ownSetttetDevices = []\n\n        this.needchange = false\n        this.previousActions = [];\n\n        this.controls = {\n            ownWeights: false,\n            weights: {\n                temp: null,\n                hum: null,\n            },\n            co2Control: false,\n            co2ppm: {\n                minPPM: 400,\n                maxPPM: 1200,\n            },\n            ownDeviceSetup: false,\n            experimental: false,\n            modes: {\n                vpdPerfection: \"VPD Perfection\",\n                inRangeVPD: \"IN-VPD-Range\",\n                targetedVDP: \"Targeted VPD\",\n                drying: \"Drying\",\n                experimentel: \"Experimentel\",\n                disabled: \"Disabled\"\n            }\n        }\n\n        this.expMods = {\n            current: \"\",\n            plantType: \"\",\n        }\n\n        this.isPlantDay = {\n            nightVPDHold: false,\n            lightOn: false,\n            lightOnTime: \"\",\n            lightOffTime: \"\",\n            lightbyOGBControl: false,\n            sunRiseTimes: \"\",\n            sunSetTimes: \"\",\n        }\n\n        this.enviorment = {\n            ambientTemp: 0.0,\n            ambientHumidity: 0.0,\n            ambientDewpoint: 0.0,\n            outsiteTemp: 0.0,\n            outsiteHumidity: 0.0,\n            outsiteDewpoint: 0.0,\n        };\n\n        this.tentData = {\n            temperature: null,\n            humidity: null,\n            leafTempOffset: 0,\n            dewpoint: 0.0,\n            maxTemp: 0,\n            minTemp: 0,\n            maxHumidity: 0,\n            minHumidity: 0,\n            co2Level: 400,\n        };\n\n        this.plantStages = {\n            Germination: { vpdRange: [0.412, 0.7], minTemp: 20, maxTemp: 26, minHumidity: 65, maxHumidity: 80 },\n            Clones: { vpdRange: [0.42, 0.75], minTemp: 20, maxTemp: 26, minHumidity: 65, maxHumidity: 80 },\n            EarlyVeg: { vpdRange: [0.7, 0.85], minTemp: 20, maxTemp: 28, minHumidity: 55, maxHumidity: 70 },\n            MidVeg: { vpdRange: [0.85, 1.1], minTemp: 22, maxTemp: 30, minHumidity: 50, maxHumidity: 65 },\n            LateVeg: { vpdRange: [0.933, 1.2], minTemp: 22, maxTemp: 30, minHumidity: 50, maxHumidity: 60 },\n            EarlyFlower: { vpdRange: [1.0, 1.25], minTemp: 22, maxTemp: 28, minHumidity: 45, maxHumidity: 60 },\n            MidFlower: { vpdRange: [1.1, 1.4], minTemp: 22, maxTemp: 26, minHumidity: 40, maxHumidity: 55 },\n            LateFlower: { vpdRange: [1.3, 1.7], minTemp: 20, maxTemp: 24, minHumidity: 40, maxHumidity: 50 }\n        };\n\n        this.vpd = {\n            current: null,\n            // RANGE VPD\n            range: [],\n            rangeTolerance: 0.0,\n            diffRange: null,\n            // VPD PERFECTION\n            perfection: 0.0,\n            perfectMin: 0.0,\n            perfectMax: 0.0,\n            perfectTolerance: perfectionTolerance,\n            diffPerfection: null,\n            // TARGETED VPD\n            targeted: 0.0,\n            targetedTolerance: 0.0,\n            diffTargeted: null,\n            ecotarget: [0.55, 0.88]\n        };\n\n        this.watering = {\n            autoWatering: false,\n            isRunning: false,\n            pumpInvervall: \"\",\n            pumpTime: \"\",\n            nextPumpAction: \"\",\n            waterTemp: 0,\n            nutrients: {\n                PH: 0,\n                PPM: 0,\n                EC: 0,\n                Temp: 0,\n                N: 0,\n                P: 0,\n                K: 0,\n            }\n        }\n\n        this.dryStartTime = null;\n        this.drying = {\n            currentDryMode: \"\",\n            isEnabled: false,\n            isRunning: false,\n            waterActivity: 0.0,\n            dewpointVPD: 0.0,\n            vaporPressureActual: 0.0,\n            vaporPressureSaturation: 0.0,\n            sharkMouseVPD:0.0,\n            modes: {\n                elClassico: {\n                    isActive: false,\n                    phase: {\n                        start: {\n                            targetTemp: 20, targetHumidity: 62, durationHours: 72\n                        },\n                        halfTime: {\n                            targetTemp: 20, targetHumidity: 60, durationHours: 72\n                        },\n                        endTime: {\n                            targetTemp: 20, targetHumidity: 58, durationHours: 72\n                        }\n                    }\n                },\n                sharkMouse: {\n                    isActive: false,\n                    phase: {\n                        start: {\n                            targetTemp: 22.2, targetHumidity: 55, targetVPD: 1.2, durationHours: 48\n                        },\n                        halfTime: {\n                            maxTemp: 23.3, targetHumidity: 52, targetVPD: 1.39, durationHours: 24\n                        },\n                        endTime: {\n                            maxTemp: 23.9, targetHumidity: 50, targetVPD: 1.5, durationHours: 48\n                        }\n                    }\n                },\n                dewBased: {\n                    isActive: false,\n                    phase: {\n                        start: {\n                            targetTemp: 20, targetDewPoint: 12.25, durationHours: 96\n                        },\n                        halfTime: {\n                            targetTemp: 20, targetDewPoint: 11.1, durationHours: 96\n                        },\n                        endTime: {\n                            targetTemp: 20, targetDewPoint: 11.1, durationHours: 48\n                        }\n                    }\n                }\n            }\n\n        }\n\n        this.addons = {\n            GasLanternRoutine: {\n                Veg: {\n                    LightOnPhase: 12,\n                    LightOffPhase: 5,\n                    LightAddon: 1,\n                },\n                Flower: {\n                    Sativa: {\n                        LightOnPhase: 8,\n                        LightOffPhase: 16,\n                    },\n                    Indica: {\n                        LightOnPhase: 6,\n                        LightOffPhase: 18,\n                    }\n                }\n            },\n            GLR_NaturalSunshine: {\n                Veg: {\n                    LightOnPhase: 12,\n                    LightOffPhase: 5,\n                    LightAddon: 1,\n                },\n                Flower: {\n                    Sativa: {\n                        LightOnStartPhase: 12,\n                        LightOnEndPhase: 8,\n                        LightOffPhase: 0,\n                        LightSteps: 0,\n                        LightStepTime: 0,\n\n                    },\n                    Indica: {\n                        LightOnStartPhase: 12,\n                        LightOnEndPhase: 6,\n                        LightOffPhase: 0,\n                        LightSteps: 0,\n                        LightStepTime: 0,\n\n                    }\n                }\n            }\n        }\n\n        //Actions\n        this.actions = {\n            Increased: {\n                exhaust: \"increased\",\n                humidifier: \"reduced\",\n                dehumidifier: \"increased\",\n                heater: \"increased\",\n                cooler: \"reduced\",\n                ventilation: \"increased\",\n                light: \"increased\",\n                co2: \"increased\",\n                climate: {\n                    cool: \"reduced\",\n                    dry: \"increased\",\n                    heat: \"increased\",\n                }\n            },\n            Reduced: {\n                exhaust: \"reduced\",\n                humidifier: \"increased\",\n                dehumidifier: \"reduced\",\n                heater: \"reduced\",\n                cooler: \"increased\",\n                ventilation: \"reduced\",\n                light: \"reduced\",\n                co2: \"reduced\",\n                climate: {\n                    cool: \"increased\",\n                    dry: \"reduced\",\n                    heat: \"reduced\",\n                }\n            },\n            Unchanged: {\n                exhaust: \"unchanged\",\n                humidifier: \"unchanged\",\n                dehumidifier: \"unchanged\",\n                heater: \"unchanged\",\n                cooler: \"unchanged\",\n                ventilation: \"unchanged\",\n                light: \"unchanged\",\n                climate: {\n                    cool: \"unchanged\",\n                    dry: \"unchanged\",\n                    heat: \"unchanged\"\n                }\n            },\n        }\n\n        this.init();\n    }\n\n    init() {\n\n    }\n\n    // DATA SETTER/GETTER ******************************\n    setTentName(tentName = \"\") {\n        if (tentName !== this.tentName) {\n            this.tentName = tentName;\n        }\n\n    }\n\n    // Setze ob Ausleih funktion für Ambient aktiv ist. \n    setControlSet(controlSet) {\n        if (this.controlSet !== controlSet) {\n            this.controlSet = controlSet\n        }\n    }\n\n    // erhalte ob Ambient Steuerung aktiv ist.\n    getControlSet() {\n        return this.controlSet\n    }\n\n    // Setze Aktiven ZeltMode\n    setTentMode(tentMode = \"\") {\n        if (this.tentMode !== tentMode) { // Vergleiche auf Gleichheit\n            node.warn(`TentMode geändert von ${this.tentMode} auf ${tentMode} in ${this.tentName}`);\n\n            // Prüfe, ob der neue Modus nicht \"Drying\" ist\n            if (tentMode !== \"Drying\") {\n                this.drying.isRunning = false;\n                this.drying.isEnabled = false;\n                this.drying.currentDryMode = \"\"; // Drying-Mode zurücksetzen\n                this.dryStartTime = null;        // Timer zurücksetzen\n                node.warn(\"Drying-Modus deaktiviert und Timer zurückgesetzt.\");\n            }\n\n            this.tentMode = tentMode; // Neuen Modus setzen\n        } else {\n            return; // Keine Änderung notwendig\n        }\n    }\n\n    getTentMode() {\n        return this.tentMode\n    }\n\n    // Setze Targeted VPD wenn Mode aktiv!\n    setTargetedVPD(targetVPD) {\n        if (targetVPD !== this.vpd.targeted) {\n            if (this.tentMode === \"Targeted VPD\") {\n                this.vpd.targeted = parseFloat(targetVPD)\n            }\n        }\n    }\n\n    // Ehalte Targeted VPD wenn Mode aktiv!\n    getTargetedVPD() {\n        return this.vpd.targeted;\n    }\n\n\n\n    // Setze Plant Stage\n    setPlantStageValue(plantStage = \"\") {\n        if (this.plantStages.hasOwnProperty(plantStage)) {\n            const stage = this.plantStages[plantStage];\n            this.vpd.range = stage.vpdRange;\n            this.tentData.maxTemp = stage.maxTemp;\n            this.tentData.minTemp = stage.minTemp;\n            this.tentData.maxHumidity = stage.maxHumidity;\n            this.tentData.minHumidity = stage.minHumidity;\n            this.calculatePerfectVPD();\n            this.plantStage = plantStage; // Stelle sicher, dass plantStage gesetzt wird\n            //node.warn(`PlantStage innerhalb der Instanz aktualisiert: ${this.plantStage}`);\n        } else {\n            //node.warn(`Ungültige PlantStage: ${plantStage}`);\n        }\n    }\n\n    getPlantStageValue() {\n        return this.plantStage\n    }\n\n    // Setze aktuelle Temp\n    setCurrentTemp(temp) {\n        let newTemp = null;\n\n        // Überprüfen, ob temp ein Array ist und den Durchschnitt berechnen\n        if (Array.isArray(temp)) {\n            newTemp = parseFloat(this.calculateAvgValue(temp));\n        } else if (typeof temp === 'number') {\n            newTemp = temp;\n        } else if (typeof temp === 'string') {\n            newTemp = parseFloat(temp);\n        } else {\n            throw new Error(\"Invalid temperature data. Must be an array, number, or string.\");\n        }\n\n        if (newTemp === this.tentData.temperature) return;\n\n        this.tentData.temperature = newTemp;\n\n        if (this.tentData.humidity != null && this.tentData.temperature != null) {\n            this.calculatePerfectVPD();\n        }\n    }\n\n    // Setze Blatt Temp Offset\n    setLeafOffset(offset) {\n        if (parseFloat(offset) !== parseFloat(this.tentData.leafTempOffset)) {\n            this.tentData.leafTempOffset = parseFloat(offset)\n        }\n    }\n\n    getLeafOffset() {\n        return this.tentData.leafTempOffset\n    }\n\n    // Setze aktuelle Feuchtigkeit\n    setCurrentHumidity(humidity) {\n        let newHumidity = null;\n\n        // Überprüfen, ob humidity ein Array ist und den Durchschnitt berechnen\n        if (Array.isArray(humidity)) {\n            newHumidity = parseFloat(this.calculateAvgValue(humidity));\n        } else if (typeof humidity === 'number') {\n            newHumidity = humidity;\n        } else if (typeof humidity === 'string') {\n            newHumidity = parseFloat(humidity);\n        } else {\n            throw new Error(\"Invalid humidity data. Must be an array, number, or string.\");\n        }\n\n        if (newHumidity === this.tentData.humidity) return;\n\n        this.tentData.humidity = newHumidity;\n\n        if (this.tentData.humidity != null && this.tentData.temperature != null) {\n            this.calculatePerfectVPD();\n        }\n    }\n\n    // Setze Ambient Raum Daten (WO DAS ZELT STEHT!!!!)\n    setAmbientData(ambTemp, ambHum, ambDew = null) {\n        // Exit if any value is null\n        if (ambTemp === null || ambHum === null) return;\n\n        // Calculate dew point if it is missing\n        const dewpoint = ambDew !== null ? ambDew : this.calculateDewPoint(ambTemp, ambHum);\n\n        // Update only if values have changed\n        if (\n            this.enviorment.ambientTemp !== ambTemp ||\n            this.enviorment.ambientHumidity !== ambHum ||\n            this.enviorment.ambientDewpoint !== dewpoint\n        ) {\n            this.enviorment.ambientTemp = ambTemp;\n            this.enviorment.ambientHumidity = ambHum;\n            this.enviorment.ambientDewpoint = dewpoint;\n        }\n    }\n\n    // Setze Temp von Außen \n    setOutsiteData(outTemp, outHum, outDew = null) {\n        // Exit if any value is null\n        if (outTemp === null || outHum === null) return;\n\n        // Calculate dew point if it is missing\n        const dewpoint = outDew !== null ? outDew : this.calculateDewPoint(outTemp, outHum);\n\n        // Update only if values have changed\n        if (\n            this.enviorment.outsiteTemp !== outTemp ||\n            this.enviorment.outsiteHumidity !== outHum ||\n            this.enviorment.outsiteDewpoint !== dewpoint\n        ) {\n            this.enviorment.outsiteTemp = outTemp;\n            this.enviorment.outsiteHumidity = outHum;\n            this.enviorment.outsiteDewpoint = dewpoint;\n        }\n    }\n\n    // Setze aktuellen Dewpoint\n    setCurrentDewPoint(dewpoint) {\n        if (dewpoint !== this.tentData.dewpoint) {\n            this.tentData.dewpoint = this.calculateDewPoint(dewpoint)\n        }\n    }\n\n    // Aktiviere Nacht VPD Ignoranz\n    setVPDNightHold(nightHold) {\n        if (nightHold != this.helperYesTrue(this.isPlantDay.nightVPDHold)) {\n            this.isPlantDay.nightVPDHold = this.helperYesTrue(nightHold)\n        }\n    }\n\n    getVPDNightHold() {\n        return this.helperYesTrue(this.isPlantDay.nightVPDHold)\n    }\n\n    // Aktiviere Gewicht für Feinjustierung\n    activateOwnWeights(activ) {\n        if (activ !== this.controls.ownWeights) {\n            this.controls.ownWeights = this.helperYesTrue(activ)\n            if (!this.controls.ownWeights) {\n                this.controls.weights.temp = null\n                this.controls.weights.hum = null\n            }\n        }\n    }\n\n    // Erhatel Gewicht Aktivi Status\n    getifOwnWeightsActive() {\n        return this.helperYesTrue(this.controls.ownWeights)\n    }\n\n    // Setze Gewicht für Feinjustierung\n    setOwnWeights(name, weight) {\n        if (!this.controls.ownWeights) {\n            // Wenn `ownWeights` deaktiviert oder nicht definiert ist\n            if (!this.controls.ownWeights) {\n                return { ownWeights: \"Disabled\" }; // Gebe zurück, dass `ownWeights` deaktiviert ist\n            }\n            // Falls `ownWeights` undefined oder nicht initialisiert ist\n            this.controls.ownWeights = null;\n            return { ownWeights: \"Disabled\" };\n        } else {\n            // Wenn `ownWeights` aktiviert ist\n            if (name.includes(\"hum\")) {\n                // Feuchtigkeitsgewicht setzen\n                this.controls.weights.hum = parseFloat(weight);\n            } else if (name.includes(\"temp\")) {\n                // Temperaturgewicht setzen\n                this.controls.weights.temp = parseFloat(weight);\n            } else {\n                // Ungültiger Name\n                console.warn(`Unrecognized weight type: ${name}`);\n                return { error: `Invalid weight type: ${name}` };\n            }\n\n            return { ownWeights: \"Enabled\" }; // Gebe zurück, dass `ownWeights` aktiviert ist\n        }\n    }\n\n    // Erhalte Gewicht für Feinjustierung\n    getOwnWeights() {\n        if (this.controls.ownWeights) {\n            return { tempWeight: this.controls.weights.temp, humWweight: this.controls.weights.hum }\n        } else {\n            return { Data: \"NotNeeded\" }\n        }\n    }\n\n    // EXPRIMENTEL\n    setGLSControl(glscControl) {\n        if (glscControl !== this.controls.experimental) {\n            this.controls.experimental = this.helperYesTrue(glscControl)\n        }\n    }\n\n    // EXPRIMENTEL\n    getGLSControl() {\n        return this.helperYesTrue(this.controls.experimental)\n    }\n\n    // EXPRIMENTEL\n    setGLSPlantType(plantType) {\n        if (this.controls.experimental) {\n            if (plantType !== this.controls.experimental) {\n                this.expMods.plantType = plantType\n            }\n        } else {\n            if (this.expMods.plantType != \"\") {\n                this.expMods.plantType = \"\"\n\n            }\n\n        }\n\n    }\n\n    // EXPRIMENTEL\n    getGLSPlantType() {\n        return this.expMods.plantType\n    }\n\n    // EXPRIMENTEL\n    // Aktiviere Eigene Geräte Steuerung(Experimentel\"NOT-DONE\")\n    setOwnDeviceSetup(deviceControl) {\n        if (deviceControl !== this.controls.ownDeviceSetup) {\n            this.controls.ownDeviceSetup = this.helperYesTrue(deviceControl)\n        }\n        return\n    }\n\n    // EXPRIMENTEL\n    // Aktiviere Eigene Geräte Steuerung(Experimentel\"NOT-DONE\")\n    getOwnDeviceSetup() {\n        return this.helperYesTrue(this.controls.ownDeviceSetup)\n    }\n\n    // Aktiviere CO2 Steuerung\n    setCO2Control(co2Control) {\n        if (co2Control !== this.controls.co2Control) {\n            this.controls.co2Control = this.helperYesTrue(co2Control)\n        }\n    }\n\n    // COS Status\n    getCO2Control() {\n        return this.helperYesTrue(this.controls.co2Control)\n    }\n\n    // Aktiviere Kontorlle für Licht\n    setLightControlByOGB(wantsControl) {\n        if (wantsControl !== this.isPlantDay.lightbyOGBControl) {\n            this.isPlantDay.lightbyOGBControl = this.helperYesTrue(wantsControl)\n        }\n    }\n\n    // Licht Controll Status\n    getLightControlByOGB() {\n        return this.helperYesTrue(this.isPlantDay.lightbyOGBControl)\n    }\n\n    // Setze lichtzeiten wenn Kontrolle AKTIV \n    setLightTimes(startTime = \"\", endTime = \"\") {\n        if (!this.isPlantDay.lightbyOGBControl) return\n        if (startTime !== this.isPlantDay.lightOnTime || endTime !== this.isPlantDay.lightOffTime) {\n            this.isPlantDay.lightOnTime = startTime;\n            this.isPlantDay.lightOffTime = endTime;\n\n            node.warn(`Aktualisierter Lichtzyklus: Start: ${startTime}, Ende: ${endTime}`);\n            this.devices.forEach(device => {\n                if (device.deviceType === \"light\") {\n                    device.setLightTimes(startTime, endTime); // Lichtzeiten an die Geräte übergeben\n                }\n            });\n\n            this.updateLightState(); // Aktualisiere den Lichtstatus\n        }\n    }\n    // Setze Sonnen Auf/Untergang \n    setSunTimes(sunRiseTime = \"\", sunSetTime = \"\") {\n        if (!this.isPlantDay.lightbyOGBControl) return\n        if (sunRiseTime !== this.isPlantDay.sunRiseTimes || sunSetTime !== this.isPlantDay.sunSetTimes) {\n            this.isPlantDay.sunRiseTimes = sunRiseTime;\n            this.isPlantDay.sunSetTimes = sunSetTime;\n\n            node.warn(`Aktualisierter Lichtzyklus: Start: ${sunRiseTime}, Ende: ${sunSetTime}`);\n            this.devices.forEach(device => {\n                if (device.deviceType === \"light\") {\n                    device.setSunTimes(sunRiseTime, sunSetTime); // Lichtzeiten an die Geräte übergeben\n                }\n            });\n        }\n    }\n\n\n    // HELPERS ******************************\n    helperYesTrue(input) {\n        if (typeof input === \"string\") {\n            // Convert string to boolean\n            const upperInput = input.toUpperCase(); // Normalize case\n            if (upperInput === \"YES\") return true;\n            if (upperInput === \"NO\") return false;\n        } else if (typeof input === \"boolean\") {\n            // Convert boolean to string\n            return input ? \"YES\" : \"NO\";\n        }\n        // Handle invalid input\n        throw new Error(\"Invalid input: expected a string ('YES'/'NO') or boolean (true/false).\");\n    }\n\n    // Aktualisierung des Lichtstatus basierend auf der aktuellen Zeit\n    updateLightState(currentTime = new Date()) {\n        // Hole die aktuelle Zeit in Sekunden\n        const currentSeconds = this.parseTime(currentTime.toTimeString().split(\" \")[0]);\n\n        // Konvertiere Lichtzeiten in Sekunden\n        const lightOnSeconds = this.parseTime(this.isPlantDay.lightOnTime);\n        const lightOffSeconds = this.parseTime(this.isPlantDay.lightOffTime);\n\n        let lightOn;\n\n        if (lightOffSeconds < lightOnSeconds) {\n            // Lichtzyklus über Mitternacht: Licht an, wenn aktuelle Zeit nach Startzeit oder vor Endzeit\n            lightOn = currentSeconds >= lightOnSeconds || currentSeconds < lightOffSeconds;\n        } else {\n            // Lichtzyklus innerhalb eines Tages: Licht an, wenn aktuelle Zeit zwischen Start- und Endzeit\n            lightOn = currentSeconds >= lightOnSeconds && currentSeconds < lightOffSeconds;\n        }\n\n        // Setze den Lichtstatus in isPlantDay.lightOn\n        if (this.isPlantDay.lightOn !== lightOn) {\n            this.isPlantDay.lightOn = lightOn;\n\n            // Logge Änderungen für Debugging\n            node.warn(\n                `${this.tentName}: Lichtstatus aktualisiert - ${lightOn ? \"Licht AN\" : \"Licht AUS\"\n                } (Aktuelle Zeit: ${currentTime.toTimeString()}, On: ${this.isPlantDay.lightOnTime\n                }, Off: ${this.isPlantDay.lightOffTime})`\n            );\n\n            // Überprüfe, ob ein Lichtgerät vorhanden ist, und aktualisiere es\n        }\n    }\n\n    // Hilfsfunktion zur Zeitumrechnung (HH:MM:SS → Sekunden)\n    parseTime(timeString) {\n        const [hours, minutes, seconds = 0] = timeString.split(\":\").map(Number);\n        return hours * 3600 + minutes * 60 + seconds;\n    }\n\n\n    /// DEVCIES ******************************\n    // Methode zum Abrufen der passenden Geräteklasse\n    getDeviceClass(deviceType) {\n        const deviceClasses = {\n            humidifier: Humidifier,\n            dehumidifier: Dehumidifier,\n            exhaust: Exhaust,\n            ventilation: Ventilation,\n            heater: Heater,\n            cooler: Cooler,\n            light: Light,\n            pump: Pump,\n            climate: Climate,\n            switch: GenericSwitch,\n            sensor: Sensor,\n        };\n\n        return deviceClasses[deviceType] || Device;\n    }\n\n    // Gerät direkt zur Instanz hinzufügen und in entities speichern\n    addDevice(deviceName, deviceData, context) {\n        const identifiedDevice = this.identifyDevice(deviceName, deviceData);\n        if (!identifiedDevice) {\n            node.error(`Failed to identify device: ${deviceName}`);\n            return;\n        }\n\n        // Daten initialisieren, falls nicht vorhanden\n        identifiedDevice.data = { ...deviceData };\n        identifiedDevice.setData(deviceData, context); // Gerätedaten setzen\n        this.devices.push(identifiedDevice); // Gerät zur Liste hinzufügen\n        this.registerDevices(identifiedDevice)\n        node.warn(`Added new device: ${deviceName}`);\n    }\n\n    // Geräte Identifizierung\n    identifyDevice(deviceName, deviceData) {\n        const deviceTypeMapping = {\n            \"sensor\": [\"mode\", \"plant\", \"temperature\", \"temp\", \"humidity\", \"co2\", \"moisture\", \"dewpoint\", \"illuminance\", \"ppfd\", \"dli\", \"h5179\"],\n            \"humidifier\": [\"humidifier\", \"mist\"],\n            \"dehumidifier\": [\"dehumidifier\", \"drying\", \"dryer\",\"entfeuchter\", \"removehumidity\"],\n            \"exhaust\": [\"exhaust\", \"abluft\", \"ruck\"],\n            \"ventilation\": [\"vent\", \"vents\", \"venti\", \"ventilation\", \"inlet\", \"outlet\"],\n            \"heater\": [\"heater\", \"heizung\", \"warm\"],\n            \"cooler\": [\"cooler\", \"fan\", \"kühl\"],\n            \"light\": [\"light\", \"lamp\", \"led\", \"switch.light\"],\n            \"climate\": [\"klima\", \"climate\"],\n            \"co2\": [\"co2\", \"carbon\"],\n            \"switch\": [\"generic\", \"switch\"],\n            \"pump\": [\"pump\", \"waterpump\", \"pumpe\"],\n            //\"sensor\": [\"sensor\", \"mode\",\"plant\", \"temperature\", \"temp\", \"humidity\", \"co2\", \"moisture\", \"dewpoint\", \"illuminance\", \"ppfd\", \"dli\", \"flower\", \"veggi\", \"vegi\", \"dutycycle\", \"duty\", \"h5179\"],\n        };\n\n        // Prüfen, ob der Gerätename einen bekannten Typ enthält\n        // Überprüfen des Gerätetyps\n        for (const [deviceType, keywords] of Object.entries(deviceTypeMapping)) {\n            if (keywords.some(keyword => deviceName.toLowerCase().includes(keyword))) {\n                const DeviceClass = this.getDeviceClass(deviceType);\n                node.warn(`Device ${deviceName} identified as ${deviceType}`);\n                return new DeviceClass(deviceName, deviceType, deviceData);\n            }\n        }\n\n        // Prüfen, ob deviceData Schlüssel enthält, die auf einen Typ hindeuten\n        const entityKeys = Object.keys(deviceData || {});\n        for (const [deviceType, keywords] of Object.entries(deviceTypeMapping)) {\n            if (entityKeys.some(key => keywords.some(keyword => key.toLowerCase().includes(keyword)))) {\n                const DeviceClass = this.getDeviceClass(deviceType);\n                return new DeviceClass(deviceName, deviceType); // Gerät erstellen\n            }\n        }\n\n        node.warn(`Device ${deviceName} not recognized, returning unknown device.`);\n        return new Device(deviceName, \"unknown\");\n    }\n\n    // Registierung Caps ( noch nicht in nutzung)\n    registerDevices(device) {\n        // Sensoren ignorieren\n        if (device.deviceType.includes(\"sensor\")) return;\n        let capabilities\n        // Bestimme die Fähigkeiten des Geräts\n        capabilities = {\n            canHeat: device.deviceType === \"heater\" || device.deviceType === \"climate\" || device.deviceType === \"light\",\n            canCool: device.deviceType === \"cooler\" || device.deviceType === \"climate\",\n            canHumidify: device.deviceType === \"humidifier\",\n            canDehumidify: device.deviceType === \"dehumidifier\" || device.deviceType === \"climate\",\n            canVentilate: device.deviceType === \"ventilation\",\n            canExhaust: device.deviceType === \"exhaust\",\n            canLight: device.deviceType === \"light\",\n        };\n\n        // Entferne alle Fähigkeiten, die das Gerät nicht besitzt\n        capabilities = Object.fromEntries(\n            Object.entries(capabilities).filter(([key, value]) => value)\n        );\n\n        // Füge die bereinigten Fähigkeiten zum Gerät hinzu\n\n\n        // Füge das Gerät zum `registeredDevices`-Array hinzu\n        if (!this.devices) this.devices = [];\n        device.capabilities = { ...capabilities }\n\n        node.warn(`Device registered: ${device.name} with capabilities: ${Object.keys(capabilities).join(\", \")}`);\n    }\n\n    // Erhalte alle geräte \n    listDevices() {\n        return this.devices;\n    }\n\n    // Gerät sperren\n    lockDevice(device, roomName) {\n        if (!device.isLocked) {\n            device.isLocked = true;\n            device.lockedFor = roomName;\n            this.updateDevice(device);\n            return true;\n        }\n        return false;\n    }\n\n    // Gerät entsperren\n    unlockDevice(device) {\n        if (device.isLocked) {\n            device.isLocked = false;\n            device.lockedFor = \"\";\n            console.warn(`Gerät entsperrt: ${device.name}`);\n            return true;\n        }\n        console.warn(`Gerät war nicht gesperrt: ${device.name}`);\n        return false;\n    }\n\n    // Gerät ausleihen\n    borrowDevice(device, fromTent) {\n        if (this.lockDevice(device, fromTent)) {\n            const borrowedIndex = this.devices.findIndex(d => d.name === device.name);\n            if (borrowedIndex === -1) {\n                this.devices.push(device);\n            }\n            device.inRoomName = this.tentName; // Setze den Raumnamen des geliehenen Geräts\n            device.isfromAmbient = false; // Markiere, dass es nicht mehr von Ambient kommt\n            return true;\n        }\n        return false;\n    }\n\n    // Gerät aktualisieren\n    updateDevice(updatedDevice) {\n        const index = this.devices.findIndex(d => d.name === updatedDevice.name);\n        if (index !== -1) {\n            this.devices[index] = updatedDevice;\n        } else {\n            this.devices.push(updatedDevice);\n        }\n    }\n\n    // Gerät zurückgeben\n    returnDevice(device) {\n        if (this.unlockDevice(device)) {\n            // Entferne alle Instanzen des Geräts aus dem Array\n            device.action = \"off\";\n            device.mode = \"off\";\n            let offAction = device.turnOFF();\n            this.devices = this.devices.filter(d => d.name !== device.name);\n            console.warn(`Alle Instanzen von ${device.name} entfernt.`);\n\n            device.inRoomName = \"ambient\"; // Setze den Raumnamen zurück auf Ambient\n            device.isfromAmbient = true; // Markiere, dass es wieder zu Ambient gehört\n            device.action = \"off\";\n            node.warn(`OFF_Action_ROOM: ${JSON.stringify(offAction, null, 2)}`);\n            return offAction\n        }\n        console.warn(`Gerät konnte nicht entsperrt werden: ${device.name}`);\n        return false;\n    }\n\n\n    // Calc Funks ******************************\n    // Calc Dewpoint\n    calculateDewPoint(temperature = this.tentData.temperature, humidity = this.tentData.humidity) {\n        const temp = parseFloat(temperature);\n        const hum = parseFloat(humidity);\n        if (isNaN(temp) || isNaN(hum)) {\n            return \"unavailable\";\n        }\n\n        const a = 17.27;\n        const b = 237.7;\n\n        // Berechnung der Hilfsvariable γ(T, RH)\n        const gamma = (a * temp) / (b + temp) + Math.log(hum / 100);\n\n        // Berechnung des Taupunkts\n        const dewPoint = (b * gamma) / (a - gamma);\n        this.tentData.dewpoint = parseFloat(dewPoint.toFixed(2))\n        return parseFloat(dewPoint.toFixed(2));\n    }\n\n    // Calc Aktellen VPD ( Based TEMP-HUM-EAFTEMP)\n    calculateCurrentVPD(Temp = this.tentData.temperature, Humidity = this.tentData.humidity, LeafOffset = this.tentData.leafTempOffset) {\n        const temp = parseFloat(Temp);\n        const humidity = parseFloat(Humidity);\n        const leafTemp = parseFloat(Temp) - parseFloat(LeafOffset);\n\n        if (isNaN(temp) || isNaN(humidity) || isNaN(leafTemp)) {\n            return NaN;\n        }\n\n        let sdpLuft = 0.6108 * Math.exp((17.27 * temp) / (temp + 237.3));\n        let sdpBlatt = 0.6108 * Math.exp((17.27 * leafTemp) / (leafTemp + 237.3));\n        let adp = (humidity / 100) * sdpLuft;\n        let vpd = sdpBlatt - adp;\n\n        this.vpd.current = parseFloat(vpd.toFixed(2));\n        return this.vpd.current;\n    }\n\n    // Calc Aktellen VPD Mittelwert aus aktuellen Plantstage min/max werten \n    calculatePerfectVPD(vpdRange = this.vpd.range) {\n        const averageVPD = (vpdRange[0] + vpdRange[1]) / 2;\n        this.vpd.perfection = parseFloat(averageVPD.toFixed(2));\n\n        this.vpd.perfectMin = parseFloat((this.vpd.perfection - this.vpd.perfectTolerance).toFixed(3));\n        this.vpd.perfectMax = parseFloat((this.vpd.perfection + this.vpd.perfectTolerance).toFixed(3));\n    }\n\n    // Berechne aus array/string/number/object den avg wert.\n    calculateAvgValue(temps = []) {\n        let sum = 0;\n        let count = 0;\n\n        // Prüfen, ob es ein Array von Zahlen ist oder ein Array von Objekten mit `value`\n        temps.forEach((entry) => {\n            let temp = parseFloat(entry.value);\n\n            if (!isNaN(temp)) {\n                sum += temp;\n                count++;\n            }\n        });\n\n        if (count === 0) {\n            return \"unavailable\";\n        }\n\n        const avg = sum / count;\n        return avg.toFixed(2);\n    }\n\n    // DRYING ******************************\n    // Setze aktuellen DryMode\n    setDryingMode(dryMode) {\n        if (this.tentMode !== \"Drying\") return\n        const normalizedMode = Object.keys(this.drying.modes).find(\n            mode => mode.toLowerCase() === dryMode.toLowerCase()\n        );\n\n        if (!normalizedMode) {\n            node.warn(`Ungültiger Trocknungsmodus: ${dryMode}. Standardmodus 'elClassico' wird verwendet.`);\n            this.drying.currentDryMode = \"elClassico\"; // Standardmodus setzen\n        } else {\n            this.drying.currentDryMode = normalizedMode;\n        }\n\n        if (!this.dryStartTime || !(this.dryStartTime instanceof Date)) {\n            this.setDryingStartTime();\n        }\n\n        this.drying.isEnabled = true;\n        this.drying.isRunning = true;\n        node.warn(`Trocknungsmodus aktiviert: ${this.drying.currentDryMode}`);\n    }\n\n    // Erhalte aktulle DryPhase nach Zeitpunkt\n    getDryingPhase() {\n        // Sicherstellen, dass dryStartTime gültig ist\n        if (!this.dryStartTime || !(this.dryStartTime instanceof Date) || isNaN(this.dryStartTime.getTime())) {\n            node.error(\"Startzeit ist ungültig. Setze Startzeit neu.\");\n            this.setDryingStartTime();\n        }\n\n        // Sicherstellen, dass ein gültiger Drying-Mode gesetzt ist\n        if (!this.drying.currentDryMode || !this.drying.modes.hasOwnProperty(this.drying.currentDryMode)) {\n            node.error(\"Kein gültiger Drying-Mode gesetzt! Setze Standardmodus 'elClassico'.\");\n            this.setDryingMode(\"elClassico\");\n        }\n\n        const startTimeInSeconds = Math.floor(this.dryStartTime.getTime() / 1000);\n        const nowInSeconds = Math.floor(Date.now() / 1000);\n        const elapsedSeconds = nowInSeconds - startTimeInSeconds;\n\n        node.warn(`Verstrichene Zeit: ${elapsedSeconds} Sekunden`);\n\n        // Phasen abrufen und in Sekunden umrechnen\n        const currentMode = this.drying.modes[this.drying.currentDryMode];\n        const { start, halfTime, endTime } = currentMode.phase;\n\n        const startDuration = start.durationHours * 3600;\n        const halfTimeDuration = halfTime.durationHours * 3600;\n        const endTimeDuration = endTime.durationHours * 3600;\n\n        if (elapsedSeconds < startDuration) return \"start\";\n        if (elapsedSeconds < startDuration + halfTimeDuration) return \"halfTime\";\n        if (elapsedSeconds < startDuration + halfTimeDuration + endTimeDuration) return \"endTime\";\n\n        node.warn(\"Trocknung abgeschlossen.\");\n        return \"completed\";\n    }\n\n    // Erhalte aktuellen DryMode\n    getDryingMode() {\n        return this.drying.currentDryMode\n    }\n\n    // Setze Initale Zeit für DryZeitpunkt\n    setDryingStartTime() {\n        if (!this.dryStartTime || !(this.dryStartTime instanceof Date) || isNaN(this.dryStartTime.getTime())) {\n            this.dryStartTime = new Date(); // Erstelle gültiges Date-Objekt\n            node.warn(`Startzeit wurde gesetzt: ${this.dryStartTime.toISOString()}`);\n        }\n    }\n\n    // Berechne Wasseraktivität\n    calcWatteractiviy(humidity = this.tentData.humidity) {\n        let hum = parseFloat(humidity);\n\n        if (isNaN(hum)) {\n            console.error(\"Invalid humidity value. Water activity cannot be calculated.\");\n            this.drying.waterActivity = null; // Setze den Wert explizit auf null bei Fehler\n            return null;\n        }\n\n        let wa = hum / 100; // Wasseraktivität berechnet als Verhältnis von Luftfeuchtigkeit\n        this.drying.waterActivity = parseFloat(wa.toFixed(2)); // Auf zwei Dezimalstellen runden\n        return this.drying.waterActivity;\n    }\n\n    // Berechne DewPointVPD (Based on Dewpoint/TEMP)\n    calcDewVPD(airTemp = this.tentData.temperature, dewPoint = this.tentData.dewpoint) {\n        airTemp = parseFloat(airTemp);\n        dewPoint = parseFloat(dewPoint);\n\n        if (isNaN(airTemp) || isNaN(dewPoint)) {\n            console.error(\"Invalid air temperature or dew point for VPD calculation.\");\n            this.drying.dryingVPD = null;\n            return null;\n        }\n\n        let sdpLuft = 0.6108 * Math.exp((17.27 * airTemp) / (airTemp + 237.3));\n        let adp = 0.6108 * Math.exp((17.27 * dewPoint) / (dewPoint + 237.3));\n\n        let dewVPD = sdpLuft - adp;\n        this.drying.dewpointVPD = parseFloat(dewVPD.toFixed(2)); // Rundet den VPD-Wert auf zwei Dezimalstellen\n        return this.drying.dewpointVPD;\n    }\n\n    // Berechne SharkMouse VPD (Based on TERMP/HUM/VPD)\n    calcSharkMouseVPD(Temp = this.tentData.temperature, Humidity = this.tentData.humidity, LeafOffset = this.tentData.temperature) {\n        const temp = parseFloat(Temp);\n        const humidity = parseFloat(Humidity);\n        const leafTemp = parseFloat(Temp) - parseFloat(LeafOffset);\n\n        if (isNaN(temp) || isNaN(humidity) || isNaN(leafTemp)) {\n            return NaN;\n        }\n\n        let sdpLuft = 0.6108 * Math.exp((17.27 * temp) / (temp + 237.3));\n        let sdpBlatt = 0.6108 * Math.exp((17.27 * leafTemp) / (leafTemp + 237.3));\n        let adp = (humidity / 100) * sdpLuft;\n        let vpd = sdpBlatt - adp;\n\n        this.drying.sharkMouseVPD = parseFloat(vpd.toFixed(2));\n        return this.drying.sharkMouseVPD;\n    }\n\n    // Setze Aktuelle Vapor Pressure Werte\n    calcDryingVPs(airTemp = this.tentData.temperature, dewPoint = this.tentData.dewpoint) {\n        airTemp = parseFloat(airTemp);\n        dewPoint = parseFloat(dewPoint);\n\n        if (isNaN(airTemp) || isNaN(dewPoint)) {\n            console.error(\"Invalid air temperature or dew point for vapor pressure calculation.\");\n            this.drying.vaporPressureActual = null;\n            this.drying.vaporPressureSaturation = null;\n            return null;\n        }\n\n        // Berechnung des tatsächlichen Dampfdrucks (ADP) am Taupunkt\n        let vaporPressureActual = 6.11 * Math.pow(10, (7.5 * dewPoint) / (237.3 + dewPoint));\n        this.drying.vaporPressureActual = parseFloat(vaporPressureActual.toFixed(2)); // Runden\n\n        // Berechnung des Sättigungsdampfdrucks (SDP) für Lufttemperatur\n        let vaporPressureSaturation = 6.11 * Math.pow(10, (7.5 * airTemp) / (237.3 + airTemp));\n        this.drying.vaporPressureSaturation = parseFloat(vaporPressureSaturation.toFixed(2)); // Runden\n\n        return {\n            vaporPressureActual: this.drying.vaporPressureActual,\n            vaporPressureSaturation: this.drying.vaporPressureSaturation,\n        };\n    }\n\n    //MODES ******************************\n    // MASTER MODE\n    ultraAdjustments(currentVPD = this.vpd.current, perfectVPD = this.vpd.perfection, tolerance = this.vpd.perfectTolerance) {\n        let action;\n        let vpdDiffPercent = parseFloat((((currentVPD - perfectVPD) / perfectVPD) * 100).toFixed(2));\n\n        if (currentVPD < perfectVPD - tolerance) {\n            action = this.actions.Increased;\n        } else if (currentVPD > perfectVPD + tolerance) {\n            action = this.actions.Reduced;\n        }\n\n        return {\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            inMode: \"Ultra Perfection\",\n            currentVPD: currentVPD,\n            targetVPD: perfectVPD,\n            vpdDiffPercent: vpdDiffPercent,\n            perfectMin: this.vpd.perfectMin,\n            perfectMax: this.vpd.perfectMax,\n            Temps: {\n                Temperature: this.tentData.temperature,\n                MinTemperature: this.tentData.minTemp,\n                MaxTemperature: this.tentData.maxTemp\n            },\n            Humditys: {\n                Humidity: this.tentData.humidity,\n                MinHumidity: this.tentData.minHumidity,\n                MaxHumidity: this.tentData.maxHumidity\n            },\n            actions: action\n        };\n    }\n\n    // MITTEL wert ziel aus range vpd werten\n    perfectionAdjustments(currentVPD = this.vpd.current, perfectVPD = this.vpd.perfection, tolerance = this.vpd.perfectTolerance) {\n        let action;\n        let vpdDiffPercent = parseFloat((((currentVPD - perfectVPD) / perfectVPD) * 100).toFixed(2));\n\n        if (currentVPD < perfectVPD - tolerance) {\n            action = this.actions.Increased;\n        } else if (currentVPD > perfectVPD + tolerance) {\n            action = this.actions.Reduced;\n        }\n\n        return {\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            inMode: \"VPD Perfection\",\n            currentVPD: currentVPD,\n            targetVPD: perfectVPD,\n            vpdDiffPercent: vpdDiffPercent,\n            perfectMin: this.vpd.perfectMin,\n            perfectMax: this.vpd.perfectMax,\n            Temps: {\n                Temperature: this.tentData.temperature,\n                MinTemperature: this.tentData.minTemp,\n                MaxTemperature: this.tentData.maxTemp\n            },\n            Humditys: {\n                Humidity: this.tentData.humidity,\n                MinHumidity: this.tentData.minHumidity,\n                MaxHumidity: this.tentData.maxHumidity\n            },\n            actions: action\n        };\n    }\n\n    // Jumper zwishen min und max werten.\n    rangeAdjustments(currentVPD = this.vpd.current, targetVPDRange = this.vpd.range, tolerance = this.vpd.rangeTolerance) {\n        let action;\n        let vpdDiffPercent;\n\n        if (currentVPD < targetVPDRange[0] - tolerance) {\n            vpdDiffPercent = parseFloat((((currentVPD - targetVPDRange[0]) / targetVPDRange[0]) * 100).toFixed(2));\n            action = this.actions.Increased;\n        } else if (currentVPD > targetVPDRange[1] + tolerance) {\n            vpdDiffPercent = parseFloat((((currentVPD - targetVPDRange[1]) / targetVPDRange[1]) * 100).toFixed(2));\n            action = this.actions.Reduced;\n        }\n\n        return {\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            inMode: \"VPD Range\",\n            currentVPD: currentVPD,\n            targetVPDMin: targetVPDRange[0],\n            targetVPDMax: targetVPDRange[1],\n            vpdDiffPercent: vpdDiffPercent,\n            Temps: {\n                Temperature: this.tentData.temperature,\n                MinTemperature: this.tentData.minTemp,\n                MaxTemperature: this.tentData.maxTemp\n            },\n            Humditys: {\n                Humidity: this.tentData.humidity,\n                MinHumidity: this.tentData.minHumidity,\n                MaxHumidity: this.tentData.maxHumidity\n            },\n            actions: action\n        };\n    }\n\n    // Targeted VPD Ziel mit Targed VPD\n    targetAdjustment(currentVPD = this.vpd.current, targetVPD = this.vpd.targeted, tolerance = this.vpd.targetedTolerance) {\n        let action;\n        let vpdDiffPercent = parseFloat((((currentVPD - targetVPD) / targetVPD) * 100)); // Korrektur der Berechnung\n\n        if (currentVPD < targetVPD + tolerance) {\n            action = this.actions.Increased;\n        } else if (currentVPD > targetVPD + tolerance) {\n            action = this.actions.Reduced;\n        }\n\n        return {\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            currentVPD: currentVPD,\n            targetedVPD: targetVPD,\n            vpdDiffPercent: vpdDiffPercent,\n            Temps: {\n                Temperature: this.tentData.temperature,\n                MinTemperature: this.tentData.minTemp,\n                MaxTemperature: this.tentData.maxTemp\n            },\n            Humditys: {\n                Humidity: this.tentData.humidity,\n                MinHumidity: this.tentData.minHumidity,\n                MaxHumidity: this.tentData.maxHumidity\n            },\n            actions: action\n        };\n    }\n\n    // DryingModeChecks \n    dryAdjustments() {\n        if (!this.drying.isEnabled || !this.drying.isRunning) {\n            this.drying.isEnabled = true;\n            this.drying.isRunning = true;\n            this.setDryingStartTime();\n            node.warn(\"Trocknung gestartet und Status aktualisiert.\");\n        }\n\n        const currentPhase = this.getDryingPhase();\n        if (!currentPhase) {\n            node.error(\"Keine Phase berechnet, Startzeit fehlt.\");\n            return { error: \"Phase konnte nicht berechnet werden.\" };\n        }\n\n        if (currentPhase === \"completed\") {\n            node.warn(\"Trocknung abgeschlossen.\");\n            this.drying.isRunning = false;\n            return { status: \"completed\" };\n        }\n\n        // Wasseraktivität und VPD berechnen\n        this.calcWatteractiviy(this.tentData.humidity);\n        this.calcDewVPD(this.tentData.temperature, this.tentData.dewpoint);\n        this.calcDryingVPs(this.tentData.temperature, this.tentData.dewpoint)\n        this.calcSharkMouseVPD(this.tentData.temperature, this.tentData.humidity)\n\n        node.warn(`CURRENTPHASE: ${currentPhase}`);\n\n\n        // Phase-spezifische Aktionen ausführen\n        switch (this.drying.currentDryMode) {\n            case \"elClassico\":\n                return this.dryElClassico(currentPhase);\n            case \"sharkMouse\":\n                return this.drySharkMouse(currentPhase);\n            case \"dewBased\":\n                return this.dryDewBased(currentPhase);\n            default:\n                node.error(\"Unbekannter Drying-Mode!\");\n                return { error: \"Unbekannter Drying-Mode\" };\n        }\n    }\n\n    // DRYMODE Classic\n    dryElClassico(currentPhase) {\n        const phaseConfig = this.drying.modes.elClassico.phase[currentPhase];\n        const dryAction = { ...this.actions.Unchanged }; // Modus-spezifische Aktionen\n        const tempTolerance = 0.5; // Toleranz in °C\n        const humTolerance = 2;   // Toleranz in %\n\n        // Anpassungen basierend auf Temperatur\n        if (Math.abs(this.tentData.temperature - phaseConfig.targetTemp) > tempTolerance) {\n            if (this.tentData.temperature < phaseConfig.targetTemp) {\n                dryAction.heater = \"increased\";\n                dryAction.cooler = \"unchanged\";\n                dryAction.exhaust = \"increased\";\n                dryAction.climate = { heat: \"increased\", cool: \"unchanged\", dry: \"unchanged\" };\n            } else {\n                dryAction.cooler = \"increased\";\n                dryAction.heater = \"unchanged\";\n                dryAction.exhaust = \"increased\";\n                dryAction.climate = { heat: \"unchanged\", cool: \"increased\", dry: \"unchanged\" };\n            }\n        }\n\n        // Anpassungen basierend auf Feuchtigkeit\n        if (Math.abs(this.tentData.humidity - phaseConfig.targetHumidity) > humTolerance) {\n            if (this.tentData.humidity < phaseConfig.targetHumidity) {\n                dryAction.humidifier = \"increased\";\n                dryAction.dehumidifier = \"unchanged\";\n                dryAction.ventilation = \"increased\";\n                dryAction.climate = { ...dryAction.climate, dry: \"unchanged\" };\n            } else {\n                dryAction.dehumidifier = \"increased\";\n                dryAction.humidifier = \"unchanged\";\n                dryAction.ventilation = \"increased\";\n                dryAction.climate = { ...dryAction.climate, dry: \"increased\" };\n            }\n        }\n\n        // Konfliktlösung: Priorisierung von Temperatur\n        if (dryAction.dehumidifier === \"increased\" && this.tentData.temperature < phaseConfig.targetTemp) {\n            dryAction.heater = \"increased\";\n        }\n\n        return {\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            inDryMode: this.drying.currentDryMode,\n            startTime: this.dryStartTime?.toISOString() || \"Not Set\", // Startzeit hinzufügen\n            currentPhase,\n            targetValues: {\n                targetTemp: phaseConfig.targetTemp,\n                targetHum: phaseConfig.targetHumidity,\n                targetDuration: phaseConfig.durationHours,\n            },\n            actions: dryAction\n        };\n    }\n\n    // DRYMODE VPD Based\n    drySharkMouse(currentPhase) {\n        const phaseConfig = this.drying.modes.sharkMouse.phase[currentPhase];\n        const dryAction = { ...this.actions.Unchanged }; // Modus-spezifische Aktionen\n        const vpdTolerance = 0.05; // Toleranz für VPD\n\n        // Anpassungen basierend auf VPD\n        const currentVPD = this.calculateCurrentVPD();\n        if (Math.abs(currentVPD - phaseConfig.targetVPD) > vpdTolerance) {\n            if (currentVPD < phaseConfig.targetVPD) {\n                dryAction.heater = \"increased\";\n                dryAction.dehumidifier = \"unchanged\";\n                dryAction.exhaust = \"increased\";\n                dryAction.ventilation = \"increased\";\n                dryAction.climate = { heat: \"increased\", cool: \"unchanged\", dry: \"unchanged\" };\n            } else {\n                dryAction.cooler = \"increased\";\n                dryAction.humidifier = \"unchanged\";\n                dryAction.exhaust = \"increased\";\n                dryAction.ventilation = \"increased\";\n                dryAction.climate = { heat: \"unchanged\", cool: \"increased\", dry: \"unchanged\" };\n            }\n        }\n\n        return {\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            inDryMode: this.drying.currentDryMode,\n            startTime: this.dryStartTime?.toISOString() || \"Not Set\", // Startzeit hinzufügen\n            currentPhase,\n            targetValues: {\n                targetTemp: phaseConfig.targetTemp,\n                targetHum: phaseConfig.targetHumidity,\n                targetVPD: phaseConfig.targetVPD,\n                targetDuration: phaseConfig.durationHours,\n            },\n            actions: dryAction\n        };\n    }\n\n    // DRYMODE DewPoint Based\n    // DRYMODE DewPoint Based\n    dryDewBased(currentPhase) {\n        const phaseConfig = this.drying.modes.dewBased.phase[currentPhase];\n        const dryAction = { ...this.actions.Unchanged }; // Modus-spezifische Aktionen\n        const dewPointTolerance = 0.5; // Toleranz für Taupunkt\n\n        // Anpassungen basierend auf Vapor Pressure (Taupunkt, tatsächlicher Dampfdruck und Sättigungsdampfdruck)\n        const currentDewPoint = this.calculateDewPoint();\n        const vaporPressureActual = this.drying.vaporPressureActual;\n        const vaporPressureSaturation = this.drying.vaporPressureSaturation;\n\n        // Sicherstellen, dass currentDewPoint eine Zahl ist\n        if (typeof currentDewPoint !== \"number\" || isNaN(currentDewPoint)) {\n            console.warn(\"Current Dew Point is unavailable or invalid.\");\n            return {\n                tentName: this.tentName,\n                tentMode: this.tentMode,\n                inDryMode: this.drying.currentDryMode,\n                currentPhase,\n                targetValues: {\n                    targetTemp: phaseConfig.targetTemp,\n                    targetDewPoint: phaseConfig.targetDewPoint,\n                    targetDuration: phaseConfig.durationHours,\n                },\n                actions: dryAction,\n                warning: \"Dew Point data is invalid or unavailable.\",\n            };\n        }\n\n        // Überprüfen, ob die aktuellen Werte im Zielbereich liegen\n        if (\n            Math.abs(currentDewPoint - phaseConfig.targetDewPoint) > dewPointTolerance ||\n            vaporPressureActual < 0.9 * vaporPressureSaturation ||\n            vaporPressureActual > 1.1 * vaporPressureSaturation\n        ) {\n            if (currentDewPoint < phaseConfig.targetDewPoint || vaporPressureActual < 0.9 * vaporPressureSaturation) {\n                dryAction.humidifier = \"increased\";\n                dryAction.cooler = \"unchanged\";\n                dryAction.exhaust = \"increased\";\n                dryAction.ventilation = \"increased\";\n                dryAction.climate = { dry: \"unchanged\", cool: \"unchanged\", heat: \"increased\" };\n            } else {\n                dryAction.dehumidifier = \"increased\";\n                dryAction.heater = \"unchanged\";\n                dryAction.exhaust = \"increased\";\n                dryAction.ventilation = \"increased\";\n                dryAction.climate = { dry: \"increased\", cool: \"unchanged\", heat: \"unchanged\" };\n            }\n        }\n\n        return {\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            inDryMode: this.drying.currentDryMode,\n            startTime: this.dryStartTime?.toISOString() || \"Not Set\", // Startzeit hinzufügen\n            currentPhase,\n            targetValues: {\n                targetTemp: phaseConfig.targetTemp,\n                targetDewPoint: phaseConfig.targetDewPoint,\n                targetDuration: phaseConfig.durationHours,\n            },\n            actions: dryAction,\n        };\n    }\n\n\n    // EXPERIMENTEL\n    ecoAdjustments(currentVPD = this.vpd.current, ecoTarget = this.vpd.ecotarget) {\n        let action;\n        let vpdECOPercent;\n\n        if (currentVPD < ecoTarget[0]) {\n            vpdECOPercent = parseFloat((((currentVPD - ecoTarget[0]) / ecoTarget[0]) * 100).toFixed(2));\n            action = this.actions.Increased;\n        } else if (currentVPD > ecoTarget[1]) {\n            vpdECOPercent = parseFloat((((currentVPD - ecoTarget[1]) / ecoTarget[1]) * 100).toFixed(2));\n            action = this.actions.Reduced;\n        }\n\n        return {\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            currentVPD: currentVPD,\n            targetVPDMin: ecoTarget[0],\n            targetVPDMax: ecoTarget[1],\n            vpdDiffPercent: vpdECOPercent,\n            Temps: {\n                Temperature: this.tentData.temperature,\n                MinTemperature: this.tentData.minTemp,\n                MaxTemperature: this.tentData.maxTemp\n            },\n            Humditys: {\n                Humidity: this.tentData.humidity,\n                MinHumidity: this.tentData.minHumidity,\n                MaxHumidity: this.tentData.maxHumidity\n            },\n            actions: action\n        };\n    }\n\n    // NIGHTHOLD VPD OUTPUT\n    inDontCareMode() {\n        let action = {\n            exhaust: \"maximal\",\n            humidifier: \"Unchanged\",\n            dehumidifier: \"Unchanged\",\n            heater: \"Unchanged\",\n            cooler: \"Unchanged\",\n            ventilation: \"maximal\",\n            light: \"Unchanged\",\n            co2: \"Unchanged\",\n            climate: {\n                cool: \"Unchanged\",\n                dry: \"Unchanged\",\n                heat: \"Unchanged\",\n            }\n\n        }\n        // NEED TO TEST ON LIGHT OFF PHASE\n        node.warn(`Ignore VPD on NightTime run minimal Actions`);\n        return {\n            tentName: this.tentName,\n            tentMode: \"I DONT CARE MODE\",\n            Temps: {\n                Temperature: this.tentData.temperature,\n                MinTemperature: this.tentData.minTemp,\n                MaxTemperature: this.tentData.maxTemp\n            },\n            Humditys: {\n                Humidity: this.tentData.humidity,\n                MinHumidity: this.tentData.minHumidity,\n                MaxHumidity: this.tentData.maxHumidity\n            },\n            actions: action\n        };\n    }\n\n    /// DISABELD \n    disabledMode() {\n        node.log(\"Disabled mode active\");\n        let action = {\n            exhaust: \"Unchanged\",\n            humidifier: \"Unchanged\",\n            dehumidifier: \"Unchanged\",\n            heater: \"Unchanged\",\n            cooler: \"Unchanged\",\n            ventilation: \"Unchanged\",\n            light: \"Unchanged\",\n            co2: \"Unchanged\",\n            climate: {\n                cool: \"Unchanged\",\n                dry: \"Unchanged\",\n                heat: \"Unchanged\",\n            }\n\n        }\n        return {\n            TentName: this.tentName,\n            tentMode: this.tentMode,\n            actions: action,\n        };\n    }\n\n    /// ACTIONS ******************************\n    selectAction(context) {\n        let preparedDevices = []; // Speicher für Geräteaktionen\n        let actionData;\n        let limitAdjustments\n\n        // Prüfen, ob der Zustand seit der letzten Aktion unverändert ist\n        if (this.checkLastState()) {\n            this.needchange = false;\n            actionData = {\n                tentName: this.tentName,\n                tentMode: \"Unchanged\",\n                currentVPD: this.vpd.current,\n                Temps: {\n                    Temperature: this.tentData.temperature,\n                    MinTemperature: this.tentData.minTemp,\n                    MaxTemperature: this.tentData.maxTemp,\n                },\n                Humidities: {\n                    Humidity: this.tentData.humidity,\n                    MinHumidity: this.tentData.minHumidity,\n                    MaxHumidity: this.tentData.maxHumidity,\n                },\n                actions: this.actions.Unchanged,\n                deviceActions: preparedDevices,\n            };\n        } else {\n            this.needchange = true;\n        }\n\n\n        // Modusabhängige Logik\n        if (this.needchange) {\n            switch (this.tentMode) {\n                case \"VPD Perfection\":\n                    actionData = this.perfectionAdjustments(\n                        this.vpd.current,\n                        this.vpd.perfection,\n                        this.vpd.perfectTolerance\n                    );\n                    break;\n                case \"IN-VPD-Range\":\n                    actionData = this.rangeAdjustments(\n                        this.vpd.current,\n                        this.vpd.range,\n                        this.vpd.rangeTolerance\n                    );\n                    break;\n                case \"Targeted VPD\":\n                    actionData = this.targetAdjustment(\n                        this.vpd.current,\n                        this.vpd.targeted,\n                        this.vpd.targetedTolerance\n                    );\n                    break;\n                case \"ECO-VPD\":\n                    actionData = this.ecoAdjustments(\n                        this.vpd.current,\n                        this.vpd.ecotarget,\n                    );\n                    break;\n                case \"Drying\":\n                    actionData = this.dryAdjustments();\n                    break;\n                case \"Disabled\":\n                    actionData = this.disabledMode();\n                    break;\n\n                default:\n                    throw new Error(\"Unknown mode: \" + this.tentMode);\n            }\n\n            if (this.isPlantDay.lightOn === false && this.isPlantDay.nightVPDHold === false) {\n                actionData = this.inDontCareMode()\n            }\n\n        }\n\n        if (this.needchange) {\n            limitAdjustments = this.checkLimits();\n        }\n        // Vorzeitige Anpassungen\n\n        // Kombiniere alle Aktionen\n        const finalActions = {\n            ...actionData.actions || null,\n            ...limitAdjustments || null,\n        };\n        //let absolutActions = this.evaluateDeviceEnvironment(finalActions)\n\n        this.devices.forEach((device) => {\n\n            // Prüfen, ob das Gerät korrekt initialisiert wurde\n            if (device.switches.length === 0) return\n            if (device && typeof device.prepareAction === \"function\") {\n                if (device.deviceType === \"sensor\" || device.deviceType === \"pump\" || device.deviceType === \"co2\") return;\n\n                device = device.prepareAction(finalActions);\n\n                let actions = device.runAction(context)\n\n                //node.warn(`FinalAction: ${JSON.stringify(actions, null, 2)}`);\n\n                preparedDevices.push(actions)\n                //preparedDevices.push(device)\n            } else {\n                // Falls Gerät nicht korrekt initialisiert ist, Warnung ausgeben\n                node.warn(`Device ${device?.name || \"undefined\"} konnte nicht verarbeitet werden.`);\n            }\n        });\n\n\n        // Aktion speichern\n        this.dataSetter({\n            ...actionData || null,\n            actions: finalActions || null,\n            devices: this.devices || null,\n            deviceActions: preparedDevices || null,\n        });\n\n        // Rückgabe der Aktion mit den angepassten Geräten\n        return {\n            ...actionData || null,\n            actions: finalActions || null,\n            devices: this.devices || null,\n            deviceActions: preparedDevices || null,\n        };\n    }\n\n    checkLimits() {\n        let adjustments = {};\n\n        // Sicherstellen, dass der Modus nicht \"Drying\" ist\n        if (this.tentMode === \"Drying\") return;\n\n        // Keine Änderungen erforderlich, wenn kein Bedarf besteht\n        if (!this.needchange) return adjustments;\n\n        // Dynamische Gewichtung basierend auf Plant Stage\n        let humidityWeight, temperatureWeight;\n\n        if (this.controls.ownWeights) {\n            humidityWeight = this.controls.weights.hum || 1.0;\n            temperatureWeight = this.controls.weights.temp || 1.0;\n        } else {\n            if (this.plantStage === \"MidFlower\" || this.plantStage === \"LateFlower\") {\n                humidityWeight = 1.25; // Feuchtigkeit ist wichtiger\n                temperatureWeight = 1.0; // Temperatur ist weniger wichtig\n            } else {\n                humidityWeight = 1.0; // Standardgewichtung\n                temperatureWeight = 1.0;\n            }\n        }\n\n        // Initialisierung von Abweichungen\n        let tempDeviation = 0;\n        let humDeviation = 0;\n\n        // Abweichungen nur berechnen, wenn außerhalb der Grenzen\n        if (this.tentData.temperature > this.tentData.maxTemp) {\n            tempDeviation = (this.tentData.temperature - this.tentData.maxTemp) * temperatureWeight;\n        } else if (this.tentData.temperature < this.tentData.minTemp) {\n            tempDeviation = (this.tentData.temperature - this.tentData.minTemp) * temperatureWeight;\n        }\n\n        if (this.tentData.humidity > this.tentData.maxHumidity) {\n            humDeviation = (this.tentData.humidity - this.tentData.maxHumidity) * humidityWeight;\n        } else if (this.tentData.humidity < this.tentData.minHumidity) {\n            humDeviation = (this.tentData.humidity - this.tentData.minHumidity) * humidityWeight;\n        }\n\n        // **Initialisiere climate innerhalb von adjustments**\n        adjustments.climate = {\n            cool: \"unchanged\",\n            heat: \"unchanged\",\n            dry: \"unchanged\",\n        };\n\n        // **1. Hohe Temperatur + Hohe Feuchtigkeit**\n        if (tempDeviation > 0 && humDeviation > 0) {\n            adjustments.dehumidifier = \"increased\";\n            adjustments.cooler = \"increased\";\n            adjustments.exhaust = \"increased\";\n            adjustments.climate.cool = \"increased\";\n            adjustments.ventilation = \"increased\";\n            node.warn(`${this.tentName} Fall: Hohe Temperatur + Hohe Feuchtigkeit`);\n\n            // **2. Hohe Temperatur + Niedrige Feuchtigkeit**\n        } else if (tempDeviation > 0 && humDeviation < 0) {\n            adjustments.humidifier = \"increased\";\n            adjustments.cooler = \"increased\";\n            adjustments.exhaust = \"increased\";\n            adjustments.ventilation = \"increased\";\n            adjustments.climate.cool = \"increased\";\n            node.warn(`${this.tentName} Fall: Hohe Temperatur + Niedrige Feuchtigkeit`);\n\n            // **3. Niedrige Temperatur + Hohe Feuchtigkeit**\n        } else if (tempDeviation < 0 && humDeviation > 0) {\n            adjustments.dehumidifier = \"increased\";\n            adjustments.heater = \"increased\";\n            adjustments.exhaust = \"increased\";\n            adjustments.climate.dry = \"increased\";\n            adjustments.ventilation = \"increased\";\n            node.warn(`${this.tentName} Fall: Niedrige Temperatur + Hohe Feuchtigkeit`);\n\n            // **4. Niedrige Temperatur + Niedrige Feuchtigkeit**\n        } else if (tempDeviation < 0 && humDeviation < 0) {\n            adjustments.humidifier = \"increased\";\n            adjustments.heater = \"increased\";\n            adjustments.exhaust = \"reduced\";\n            adjustments.climate.heat = \"increased\";\n            adjustments.ventilation = \"reduced\";\n            node.warn(`${this.tentName} Fall: Niedrige Temperatur + Niedrige Feuchtigkeit`);\n        }\n\n        // **5. Notfallmaßnahmen bei extremer Übertemperatur**\n        if (this.tentData.temperature > this.tentData.maxTemp + 5) {\n            adjustments.exhaust = \"maximum\";\n            adjustments.ventilation = \"increased\";\n            adjustments.cooler = \"increased\";\n            adjustments.climate.cool = \"increased\";\n            adjustments.light = \"reduced\";\n            node.warn(`${this.tentName} Kritische Übertemperatur! Notfallmaßnahmen aktiviert.`);\n        }\n\n        // **6. Notfallmaßnahmen bei extremer Untertemperatur**\n        if (this.tentData.temperature < this.tentData.minTemp - 5) {\n            adjustments.heater = \"increased\";\n            adjustments.exhaust = \"reduced\";\n            adjustments.ventilation = \"increased\";\n            adjustments.climate.heat = \"increased\";\n            node.warn(`${this.tentName} Kritische Untertemperatur! Notfallmaßnahmen aktiviert.`);\n        }\n\n        // **7. Lichtsteuerung basierend auf Temperatur**\n        if (this.tentData.temperature > this.tentData.maxTemp && this.isPlantDay.lightOn) {\n            adjustments.light = \"reduced\";\n            node.warn(`${this.tentName} Lichtleistung reduziert aufgrund hoher Temperatur`);\n        }\n\n        // **8. CO₂-Management**\n        if (this.tentData.co2Level < 400) {\n            adjustments.co2 = \"increased\";\n            adjustments.exhaust = \"minimum\";\n            node.warn(\"CO₂-Level zu niedrig, CO₂-Zufuhr erhöht\");\n        } else if (this.tentData.co2Level > 1200) {\n            adjustments.co2 = \"reduced\";\n            adjustments.exhaust = \"increased\";\n            node.warn(`${this.tentName} CO₂-Level zu hoch, Abluft erhöht`);\n        }\n\n        // **9. Taupunkt- und Kondensationsschutz**\n        if (this.tentData.dewpoint >= this.tentData.temperature - 1) {\n            adjustments.exhaust = \"increased\";\n            adjustments.climate.dry = \"increased\";\n            adjustments.ventilation = \"increased\";\n            node.warn(`${this.tentName} Taupunkt erreicht, Feuchtigkeit reduziert`);\n        }\n\n        // **10. Nachtmodus (Licht aus, maximale Abluft)**\n        if (!this.isPlantDay.lightOn) {\n            adjustments.light = \"off\";\n            adjustments.exhaust = \"maximum\";\n            adjustments.ventilation = \"increased\";\n            node.warn(`${this.tentName} Nachtmodus aktiv: Licht aus, Abluft erhöht`);\n        }\n\n        return adjustments;\n    }\n\n    // Experimentel ( use outsite and ambient data)\n    analyzeTrends() {\n        let trend = {\n            temperature: this.enviorment.outsiteTemp - this.enviorment.ambientTemp,\n            humidity: this.enviorment.outsiteHumidity - this.enviorment.ambientHumidity,\n        };\n\n        if (trend.temperature > 0) {\n            // Außentemperatur steigt -> Vorzeitig lüften\n            this.actionsIncreased.exhaust = \"preemptively increased\";\n        } else if (trend.temperature < 0) {\n            // Außentemperatur sinkt -> Lüftung reduzieren\n            this.actionsReduced.exhaust = \"preemptively reduced\";\n        }\n\n        if (trend.humidity > 0) {\n            // Außenfeuchtigkeit steigt -> Entfeuchter verstärken\n            this.actionsIncreased.dehumidifier = \"preemptively increased\";\n        } else if (trend.humidity < 0) {\n            // Außenfeuchtigkeit sinkt -> Befeuchter anpassen\n            this.actionsReduced.humidifier = \"preemptively reduced\";\n        }\n    }\n\n    // DATA SETTER FAKE DB ******************************\n    dataSetter(data) {\n        const time = new Date().toISOString();\n        const lastAction = this.previousActions[this.previousActions.length - 1];\n        // Definiere eine Schwelle für Änderungen\n        const vpdThreshold = 0.005;\n\n        if (this.tentMode === \"Unchanged\" || this.tentMode === \"Disabled\" || this.tentMode === \"I DONT CARE MODE\") {\n            return;\n        }\n\n\n        // Filter für aktive oder relevante Geräte\n        // Filter für aktive oder relevante Geräte\n        const relevantDevices = this.devices.filter(\n            (device) => (device.switches.length > 0) || device.isRunning\n        );\n\n\n        // Erstelle das Datenobjekt\n        const enrichedData = {\n            time,\n            tentName: this.tentName,\n            tentMode: this.tentMode,\n            currentVPD: this.vpd.current,\n            targetVPDMin: this.vpd.range[0],\n            targetVPDMax: this.vpd.range[1],\n            vpdDiffPercent: data.vpdDiffPercent || 0,\n            Temps: {\n                Temperature: this.tentData.temperature,\n                MinTemperature: this.tentData.minTemp,\n                MaxTemperature: this.tentData.maxTemp,\n            },\n            Humditys: {\n                Humidity: this.tentData.humidity,\n                MinHumidity: this.tentData.minHumidity,\n                MaxHumidity: this.tentData.maxHumidity,\n            },\n            Dewpoint: this.tentData.dewpoint,\n            actions: data.actions,\n            Environment: {\n                ambientTemp: this.enviorment.ambientTemp,\n                ambientHumidity: this.enviorment.ambientHumidity,\n                ambientDewpoint: this.enviorment.ambientDewpoint,\n            },\n            Outside: {\n                outsiteTemp: this.enviorment.outsiteTemp,\n                outsiteHumidity: this.enviorment.outsiteHumidity,\n                outsiteDewpoint: this.enviorment.outsiteDewpoint,\n            },\n            devices: relevantDevices.map((device) => ({\n                name: device.name,\n                deviceType: device.deviceType,\n                isRunning: device.isRunning,\n                needChange: device.needChange,\n                action: device.action,\n                hasDuty: device.hasDuty,\n                dutyCycle: device.dutyCycle,\n                switches: device.switches,\n                sensors: device.sensors,\n                data: device.data,\n            })),\n            deviceActions: data.deviceActions\n        };\n\n        // Bedingung für signifikante Änderungen\n        const significantChange =\n            !lastAction ||\n            Math.abs(lastAction.currentVPD - this.vpd.current) > vpdThreshold ||\n            lastAction.Temps.Temperature !== enrichedData.Temps.Temperature ||\n            lastAction.Humditys.Humidity !== enrichedData.Humditys.Humidity ||\n            lastAction.Dewpoint !== enrichedData.Dewpoint;\n\n        if (significantChange) {\n            this.previousActions.push(enrichedData);\n            node.log(`Neue Aktion gespeichert:\", ${enrichedData}`);\n        } else {\n            node.log(\"Änderung nicht signifikant - Keine Aktion gespeichert.\");\n        }\n\n        // Begrenze die Anzahl der gespeicherten Aktionen\n        if (this.previousActions.length > 250) {\n            this.previousActions = this.previousActions.slice(-250);\n        }\n    }\n\n    // Check if action is needed to chagnes in vpd \n    checkLastState() {\n        if (this.previousActions.length === 0) return false;\n\n        const lastAction = this.previousActions[this.previousActions.length - 1];\n\n        // Prüfen, ob der aktuelle Zustand identisch mit dem letzten gespeicherten Zustand ist\n        if (lastAction && lastAction.currentVPD === this.vpd.current) {\n            node.log(\"VPD hat sich nicht geändert. Keine Aktion notwendig.\");\n            return true;\n        }\n\n        return false;\n    }\n}\n\nclass Device {\n    constructor(deviceName, deviceType = \"generic\") {\n        this.name = deviceName;\n        this.deviceType = deviceType;\n        this.isRunning = false;\n        this.isLocked = false\n        this.lockedFor = \"\"\n        this.needChange = false\n        this.inRoomName = \"\"\n        this.isfromAmbient = false\n        this.action = \"\"\n        this.switches = [];\n        this.sensors = [];\n        this.data = {};\n\n    }\n\n    setData(data, context) {\n        this.setFromtent(context.tentName)\n        this.identifyIfFromAmbient()\n        this.data = { ...this.data, ...data };\n        this.identifySwitchesAndSensors();\n        this.updateIsRunningState();\n    }\n\n    setFromtent(roomName) {\n        if (roomName != this.inRoomName) {\n            this.inRoomName = roomName\n        }\n    }\n\n    identifyIfFromAmbient() {\n        if (typeof this.inRoomName === \"string\" &&\n            (this.inRoomName.toLowerCase().includes(\"ambient\"))) {\n            this.isfromAmbient = true;\n        } else {\n            this.isfromAmbient = false;\n        }\n    }\n\n    identifySwitchesAndSensors() {\n        if (!this.data || typeof this.data !== \"object\") return;\n\n        const keys = Object.keys(this.data);\n        this.switches = keys.filter((key) =>\n            key.startsWith(\"switch.\") || key.startsWith(\"light.\") || key.startsWith(\"fan.\") || key.startsWith(\"climate.\")\n        );\n        this.sensors = keys.filter((key) =>\n            key.startsWith(\"sensor.\") || key.startsWith(\"select.\") || key.startsWith(\"number.\") || key.startsWith(\"text.\") || key.startsWith(\"time.\")\n        );\n    }\n\n    updateIsRunningState() {\n        // Standardmäßig ist das Gerät nicht laufend\n        this.isRunning = false;\n\n        if (!this.data || typeof this.data !== \"object\") {\n            return;\n        }\n\n        // 1. Prüfen, ob ein Fan eingeschaltet ist\n        const fanKeys = Object.keys(this.data).filter((key) => key.startsWith(\"fan.\"));\n        if (fanKeys.some((key) => this.data[key] === \"on\")) {\n            this.isRunning = true;\n            return;\n        }\n\n        // 2. Prüfen, ob ein Light eingeschaltet ist\n        const lightKeys = Object.keys(this.data).filter((key) => key.startsWith(\"light.\"));\n        if (lightKeys.some((key) => this.data[key] === \"on\")) {\n            this.isRunning = true;\n            return;\n        }\n\n        // 3. Prüfen, ob eine Klimaanlage eingeschaltet ist\n        const climateKeys = Object.keys(this.data).filter((key) => key.startsWith(\"climate.\"));\n        if (climateKeys.some((key) => this.data[key] === \"on\")) {\n            this.isRunning = true;\n            return;\n        }\n\n        // 4. Prüfung Switches\n        const switchKeys = Object.keys(this.data).filter((key) => key.startsWith(\"switch.\"));\n        if (switchKeys.some((key) => this.data[key] === \"on\")) {\n            this.isRunning = true;\n            return;\n        }\n        // 5. Prüfung Humdifier\n        const humhKeys = Object.keys(this.data).filter((key) => key.startsWith(\"humidifier.\"));\n        if (humhKeys.some((key) => this.data[key] === \"on\")) {\n            this.isRunning = true;\n            return;\n        }\n\n        // 5. Prüfen, ob ein gültiger Duty-Cycle-Wert vorhanden ist\n        const dutyCycleKey = Object.keys(this.data).find((key) =>\n            key.toLowerCase().includes(\"duty_cycle\") ||\n            key.toLowerCase().includes(\"dutycycle\") ||\n            key.toLowerCase().includes(\"duty\") ||\n            key.toLowerCase().includes(\"number.\") ||\n            key.toLowerCase().includes(\"voltage\")\n        );\n\n        if (dutyCycleKey) {\n            const dutyCycleValue = parseInt(this.data[dutyCycleKey], 10);\n            if (!isNaN(dutyCycleValue) && dutyCycleValue > 0) {\n                //this.isRunning = true;\n                return;\n            }\n        }\n\n        // 6. Prüfen, ob Sensor-Werte anzeigen, dass das Gerät läuft\n        if (Array.isArray(this.sensors) && this.sensors.length > 0) {\n            const sensorKey = this.sensors.find((key) =>\n                key.toLowerCase().includes(\"duty_cycle\") || key.toLowerCase().includes(\"dutycycle\") || key.toLowerCase().includes(\"duty\")\n            );\n            if (sensorKey && parseInt(this.data[sensorKey], 10) > 0) {\n                //this.isRunning = true;\n                return;\n            }\n        }\n    }\n\n    prepareAction(finalActions) {\n        if (finalActions.hasOwnProperty(this.deviceType)) {\n            const actionValue = finalActions[this.deviceType];\n\n            // Spezielles Verhalten für \"light\"-Geräte\n            if (this.deviceType === \"light\") {\n\n                this.needChange = true;\n                this.action = actionValue;\n                // Sonderfall für \"climate\" Geräte\n            } else if (this.deviceType === \"climate\") {\n                //node.warn(`IN Climate Aciton Value: ${JSON.stringify(finalActions, actionValue)}`);\n                if (finalActions.climate && typeof finalActions.climate === \"object\") {\n                    for (const [mode, action] of Object.entries(finalActions.climate)) {\n                        if (action !== \"unchanged\") {\n                            this.needChange = true;\n                            this.action = { mode, action }; // Speichere den gefundenen Modus und die Aktion\n                            break; // Beende die Schleife, sobald der erste gültige Wert gefunden wurde\n                        }\n                    }\n                } else {\n                    this.action = \"unchanged\"; // Standardwert, falls keine gültigen Climate-Aktionen vorhanden sind\n                }\n            } else {\n                // Standard-Verhalten für andere Gerätetypen\n                if (actionValue === \"unchanged\") {\n                    this.needChange = false;\n                    this.action = actionValue;\n                } else if (\n                    [\"maximum\", \"reduced\", \"increased\", \"minimum\", \"on\", \"off\"].includes(actionValue)\n                ) {\n                    this.needChange = true;\n                    this.action = actionValue;\n                }\n            }\n        } else {\n            // Falls keine Aktion definiert ist, logge Warnung\n            node.warn(`No actions defined for device type: ${this.deviceType}`);\n            this.needChange = false;\n            this.action = \"unchanged\";\n        }\n\n        // Debugging-Ausgabe zur Überprüfung der finalen Aktionen\n        //node.warn(`Prepared action for ${this.name}: ${JSON.stringify(this.action, null, 2)}, needChange: ${this.needChange}`);\n\n        return this;\n    }\n\n    evalAction() {\n        // Generische Prüfungen für alle Geräte\n        if (this.action === \"unchanged\") {\n            return false; // Keine Aktion erforderlich\n        }\n\n        return true; // Standardmäßig erlauben\n    }\n\n    runAction(context) {\n        // Falls keine Änderung notwendig ist, abbrechen\n        if (this.needChange === false) return;\n        if (!this.evalAction()) {\n            return { Device: `${this.switches[0]}`, Action: \"noChangesNeeded\", State: \"unchanged\" };\n        }\n\n        //node.warn(`Running Action for ${this.name} in ${this.inRoomName} `);\n        //node.warn(`Action State:${this.action}`);\n\n\n        // Aktion: increased\n        if (this.action === \"increased\") {\n            if (!this.hasDuty) {\n                // Kein Duty-Modus: Schalte das Gerät ein, falls es nicht läuft\n                if (!this.isRunning) {\n                    node.warn(`${this.name} wurde eingeschaltet in ${this.inRoomName} .`);\n                    return this.turnON();\n                } else {\n                    return { entity_id: this.switches[0], action: \"Allready ON\" }\n                }\n            } else {\n                // Duty-Modus: Verwalte Duty-Cycle\n                if (!this.isRunning) {\n                    if (this.dutyCycle === 0) {\n                        this.setDutyCycle(50);\n                        node.warn(`${this.name} Duty-Cycle wurde auf 50% gesetzt und eingeschaltet in ${this.inRoomName} .`);\n                        return this.changeDuty(this.dutyCycle);\n                    }\n                } else {\n                    if (this.dutyCycle === 95) {\n                        node.warn(`${this.name} läuft bereits auf maximalem Duty-Cycle in ${this.inRoomName} .`);\n                        return { entity_id: this.switches[0], action: \"Max Reached\" }\n                    } else {\n                        node.warn(`${this.name} Duty-Cycle wurde auf ${this.dutyCycle + 5}% erhöht in ${this.inRoomName} .`);\n                        return this.changeDuty(this.dutyCycle + 5); // Beispiel: Erhöhe Duty-Cycle um 10%\n                    }\n                }\n\n            }\n\n            // Aktion: reduced\n        } else if (this.action === \"reduced\") {\n            if (!this.hasDuty) {\n                // Kein Duty-Modus: Schalte das Gerät aus, falls es läuft\n                if (this.isRunning) {\n                    node.warn(`${this.name} wurde ausgeschaltet in ${this.inRoomName} .`);\n                    return this.turnOFF();\n                } else {\n                    return { entity_id: this.switches[0], action: \"Allready OFF\" }\n                }\n            } else {\n                // Duty-Modus: Verwalte Duty-Cycle\n                if (this.dutyCycle === 5) {\n                    node.warn(`${this.name} ist auf Minimum gestellt in ${this.inRoomName} .`);\n                    node.warn(`${this.name} wurde ausgeschaltet in ${this.inRoomName} .`);\n                    return { entity_id: this.switches[0], action: \"Minium Reached\" }\n                } else {\n                    node.warn(`${this.name} Duty-Cycle wurde auf ${this.dutyCycle - 5}% reduziert in ${this.inRoomName} .`);\n                    return this.changeDuty(this.dutyCycle - 5); // Beispiel: Reduziere Duty-Cycle um 10%\n                }\n            }\n\n            // Aktion: unchanged\n        } else if (this.action === \"maximum\") {\n            if (!this.hasDuty) {\n                // Kein Duty-Modus: Schalte das Gerät ein, falls es nicht läuft\n                if (!this.isRunning) {\n                    node.warn(`${this.name} wurde eingeschaltet in ${this.inRoomName} .`);\n                    return this.turnON();\n                } else {\n                    return { entity_id: this.switches[0], action: \"Allready ON\" }\n                }\n            } else {\n                // Duty-Modus: Verwalte Duty-Cycle\n                if (!this.isRunning) {\n                    if (this.dutyCycle === 0) {\n                        this.setDutyCycle(100);\n                        node.warn(`${this.name} Duty-Cycle wurde auf MAX %gesetzt und eingeschaltet in ${this.inRoomName} .`);\n                        return this.changeDuty(this.dutyCycle);\n                    }\n                } else {\n                    if (this.dutyCycle === 95) {\n                        node.warn(`${this.name} läuft bereits auf maximalem Duty-Cycle in ${this.inRoomName} .`);\n                        return { entity_id: this.switches[0], action: \"Max Reached\" }\n                    } else {\n                        node.warn(`${this.name} Duty-Cycle wurde auf MAX % erhöht in ${this.inRoomName} .`);\n                        return this.changeDuty(100); // Beispiel: Erhöhe Duty-Cycle um 10%\n                    }\n                }\n\n            }\n        } else if (this.action === \"minimum\") {\n\n        } else if (this.action === \"unchanged\") {\n            //node.warn(`${this.name} bleibt unverändert.`);\n            return { entity_id: this.switches[0], action: \"UNCHANGED\" }\n            // Fehlerfall\n        } else {\n            node.warn(`Etwas Ungewöhnliches ist passiert: ${this.name} hat eine unbekannte Aktion. Bitte Support kontaktieren.`);\n\n        }\n    }\n\n    turnOFF() {\n        let enitiy = this.switches[0]\n        if (this.isRunning === true) {\n            this.isRunning = false\n            return { \"entity_id\": enitiy, \"action\": \"off\" }\n        }\n\n    }\n\n    turnON() {\n        let enitiy = this.switches[0]\n        if (this.isRunning == false) {\n            this.isRunning = true\n            return { \"entity_id\": enitiy, \"action\": \"on\" }\n        }\n\n    }\n}\n\nclass Exhaust extends Device {\n    constructor(name, dutyCycle = 0) {\n        super(name, \"exhaust\");\n        this.dutyCycle = this.clampDutyCycle(dutyCycle);\n        this.minDuty = 10;\n        this.maxDuty = 95;\n        this.hasDuty = false;\n        this.isRuckEC = false;\n\n    }\n\n    setData(data, context) {\n        this.setFromtent(context.tentName)\n        this.identifyIfFromAmbient()\n        this.data = { ...this.data, ...data };\n        this.identifySwitchesAndSensors();\n        this.updateIsRunningState();\n        this.identifyIfRuckEC(); // RuckEC zuerst prüfen\n        this.findDutyCycle();    // Danach Duty Cycle suchen\n    }\n\n\n    clampDutyCycle(dutyCycle) {\n        return Math.max(this.minDuty, Math.min(this.maxDuty, dutyCycle));\n    }\n\n    identifyIfRuckEC() {\n        this.isRuckEC = this.name.toLowerCase().includes(\"ruck\");\n        if (this.isRuckEC) {\n            this.hasDuty = true\n        }\n    }\n\n    findDutyCycle() {\n        if (!this.data) {\n            node.warn(`${this.name}: Keine Gerätedaten vorhanden.`);\n            this.dutyCycle = this.minDuty;\n            this.hasDuty = false;\n            return;\n        }\n\n        // Suche nach einem Schlüssel, der dutycycle oder duty_cycle enthält\n        const dutyCycleKey = Object.keys(this.data).find((key) =>\n            key.toLowerCase().includes(\"dutycycle\") || key.toLowerCase().includes(\"duty_cycle\")\n        );\n\n        if (dutyCycleKey) {\n\n            // Parse den Wert des gefundenen dutycycle-Keys\n            const dutyCycleValue = parseInt(this.data[dutyCycleKey], 10);\n\n            if (!isNaN(dutyCycleValue)) {\n                this.dutyCycle = this.clampDutyCycle(dutyCycleValue);\n                this.hasDuty = true;\n            } else {\n                this.dutyCycle = this.minDuty;\n                this.hasDuty = false;\n            }\n        } else {\n            this.dutyCycle = this.minDuty;\n            this.hasDuty = false;\n        }\n    }\n\n\n\n    setDutyCycle(dutyCycle) {\n        this.dutyCycle = this.clampDutyCycle(dutyCycle);\n        node.warn(`${this.name}: Duty Cycle auf ${this.dutyCycle}% gesetzt.`);\n        return this.dutyCycle;\n    }\n\n    changeDuty(duty) {\n        const clampedDuty = this.clampDutyCycle(duty);\n        this.dutyCycle = clampedDuty;\n\n        if (this.switches?.[0]) {\n            const switchId = this.switches[0];\n            node.warn(`${this.name}: Duty Cycle ${this.dutyCycle} an Abluft ${switchId} gesendet.`);\n            return { entity_id: switchId, action: \"dutycycle\", dutycycle: clampedDuty };\n        } else {\n            return { error: \"No switch available\" };\n        }\n    }\n\n    runAction(context) {\n        if (!this.needChange) {\n            return { Exhaust: `${this.name}`, Action: \"NoChangeNeeded\" };\n        }\n\n        const switchId = this.switches?.[0];\n        if (!switchId) {\n            return { error: \"No switch available\" };\n        }\n\n        switch (this.action) {\n            case \"maximum\":\n                if (this.hasDuty) {\n                    return this.changeDuty(this.maxDuty);\n                } else {\n                    return this.turnON(switchId);\n                }\n            case \"minimum\":\n                if (this.hasDuty) {\n                    return this.changeDuty(this.minDuty);\n                } else {\n                    return this.turnON(switchId);\n                }\n            case \"increased\":\n                if (this.hasDuty) {\n                    const increasedDuty = Math.min(this.dutyCycle + 5, this.maxDuty);\n                    return this.changeDuty(increasedDuty);\n                } else {\n                    return this.turnON(switchId);\n                }\n            case \"reduced\":\n                if (this.hasDuty) {\n                    const reducedDuty = Math.max(this.dutyCycle - 5, this.minDuty);\n                    return this.changeDuty(reducedDuty);\n                } else {\n                    return this.turnOFF(switchId);\n                }\n\n\n            case \"on\":\n                return this.turnON(switchId);\n\n            case \"off\":\n                return this.turnOFF(switchId);\n\n            case \"unchanged\":\n                return { entity_id: switchId, action: \"UNCHANGED\" };\n\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion.`);\n                return { Exhaust: `${this.name}`, Action: \"UnknownAction\" };\n        }\n    }\n\n    turnON(switchId) {\n        if (!this.isRunning) {\n            this.isRunning = true;\n            node.warn(`${this.name}: Lüfter eingeschaltet.`);\n            return { entity_id: switchId, action: \"on\" };\n        }\n        return { entity_id: switchId, action: \"Already ON\" };\n    }\n\n    turnOFF(switchId) {\n        if (this.isRunning) {\n            this.isRunning = false;\n            node.warn(`${this.name}: Lüfter ausgeschaltet.`);\n            return { entity_id: switchId, action: \"off\" };\n        }\n        return { entity_id: switchId, action: \"Already OFF\" };\n    }\n}\n\nclass Ventilation extends Device {\n    constructor(name) {\n        super(name, \"ventilation\");\n        this.dutyCycle = 50; // Startwert 50%\n        this.dutyMin = 90;   // Minimalwert\n        this.dutyMax = 100;  // Maximalwert\n        this.hasDuty = true; // Immer Duty Cycle verfügbar\n        this.isTasmota = false;\n        this.isInitialized = false; // Verhindert doppelte Initialisierung\n    }\n\n    setData(data, context) {\n        this.setFromtent(context.tentName);\n        this.identifyIfFromAmbient();\n        this.data = { ...this.data, ...data };\n        this.identifySwitchesAndSensors();\n        this.updateIsRunningState();\n\n        this.identifyIfTasmota(); // Prüfe, ob es ein Tasmota-Gerät ist\n\n        if (this.isTasmota) {\n            // Für Tasmota-Geräte initialisiere Duty Cycle und überspringe findDutyCycle\n            if (!this.isInitialized) {\n                this.initializeDutyCycle();\n                this.isInitialized = true;\n            }\n            return;\n        }\n\n        // Für Nicht-Tasmota-Geräte den Duty Cycle aus den Daten suchen\n        if (!this.isInitialized) {\n            this.initializeDutyCycle();\n            this.isInitialized = true;\n        } else {\n            this.findDutyCycle();\n        }\n    }\n\n    initializeDutyCycle() {\n        if (this.isTasmota) return\n        node.warn(`${this.name}: Initialisiere Duty Cycle auf ${this.dutyCycle}%.`);\n        this.dutyCycle = this.dutyMin; // Initialisiere auf 50%\n    }\n\n    identifyIfTasmota() {\n        if (Array.isArray(this.switches)) {\n            this.isTasmota = this.switches.some(\n                (switchDevice) => typeof switchDevice === \"string\" && switchDevice.startsWith(\"light.\")\n            );\n\n            if (this.isTasmota && !this.isInitialized) {\n                node.warn(`${this.name}: Tasmota-Ventilation erkannt. Duty Cycle wird auf 50% gesetzt.`);\n                this.dutyCycle = this.dutyMin; // Tasmota-Geräte starten mit 50%\n                this.isInitialized = true;\n            }\n        }\n    }\n\n    findDutyCycle() {\n        if (!this.data) {\n            node.warn(`${this.name}: Keine Gerätedaten gefunden.`);\n            return;\n        }\n\n        const dutyCycleKey = Object.keys(this.data).find((key) =>\n            key.toLowerCase().includes(\"dutycycle\") || key.toLowerCase().includes(\"duty_cycle\")\n        );\n\n        if (dutyCycleKey) {\n            const dutyCycleValue = parseInt(this.data[dutyCycleKey], 10);\n            if (!isNaN(dutyCycleValue)) {\n                this.dutyCycle = this.clampDutyCycle(dutyCycleValue);\n                node.warn(`${this.name}: Duty Cycle aus Daten gesetzt auf ${this.dutyCycle}%.`);\n            }\n        } else {\n            node.warn(`${this.name}: Kein Duty Cycle-Schlüssel gefunden.`);\n        }\n    }\n\n\n    clampDutyCycle(dutyCycle) {\n        return Math.max(this.dutyMin, Math.min(this.dutyMax, dutyCycle));\n    }\n\n    setDutyCycle(dutyCycle) {\n        const clampedDuty = this.clampDutyCycle(dutyCycle);\n        this.dutyCycle = clampedDuty;\n        return clampedDuty;\n    }\n\n    changeDuty(switchId, duty) {\n        this.setDutyCycle(duty);\n        return { entity_id: switchId, action: \"dutycycle\", dutycycle: this.dutyCycle };\n    }\n\n    runAction(action) {\n        if (!this.needChange) return { Ventilation: `${this.switches[0]}`, Action: \"NoChangeNeeded\" };\n\n        const results = [];\n        const applyActionToSwitches = (actionCallback) => {\n            return this.switches.map((switchId) => {\n                const result = actionCallback(switchId);\n                results.push(result);\n                return result;\n            });\n        };\n\n        switch (this.action) {\n            case \"maximum\":\n                node.warn(`${this.name}: Duty Cycle auf Maximum (${this.dutyMax}%) gesetzt.`);\n                return applyActionToSwitches((switchId) => this.changeDuty(switchId, this.dutyMax));\n\n            case \"minimum\":\n                node.warn(`${this.name}: Duty Cycle auf Minimum (${this.dutyMin}%) gesetzt.`);\n                return applyActionToSwitches((switchId) => this.changeDuty(switchId, this.dutyMin));\n\n            case \"reduced\":\n                const reducedDuty = Math.max(this.dutyCycle - 5, this.dutyMin);\n                node.warn(`${this.name}: Duty Cycle reduziert auf ${reducedDuty}%.`);\n                return applyActionToSwitches((switchId) => this.changeDuty(switchId, reducedDuty));\n\n            case \"increased\":\n                const increasedDuty = Math.min(this.dutyCycle + 5, this.dutyMax);\n                node.warn(`${this.name}: Duty Cycle erhöht auf ${increasedDuty}%.`);\n                return applyActionToSwitches((switchId) => this.changeDuty(switchId, increasedDuty));\n\n            case \"on\":\n                return applyActionToSwitches((switchId) => this.turnON(switchId));\n\n            case \"off\":\n                return applyActionToSwitches((switchId) => this.turnOFF(switchId));\n\n            case \"unchanged\":\n                node.warn(`${this.name}: Keine Änderung erforderlich.`);\n                return applyActionToSwitches((switchId) => ({ entity_id: switchId, action: \"UNCHANGED\" }));\n\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion.`);\n                return { Ventilation: `${this.switches[0]}`, Action: \"UnknownAction\" };\n        }\n    }\n\n    turnOFF(switchId) {\n        if (this.isRunning) {\n            this.isRunning = false;\n            return { entity_id: switchId, action: \"off\" };\n        }\n        return { entity_id: switchId, action: \"Already OFF\" };\n    }\n\n    turnON(switchId) {\n        if (!this.isRunning) {\n            this.isRunning = true;\n            return { entity_id: switchId, action: \"on\" };\n        }\n        return { entity_id: switchId, action: \"Already ON\" };\n    }\n}\n\nclass Climate extends Device {\n    constructor(name) {\n        super(name, \"climate\");\n        this.currentHAVOC = \"off\"; // Standardzustand\n        this.havocs = {\n            dry: \"dry\",\n            cool: \"cool\",\n            hot: \"hot\",\n            heat: \"heat\",\n            wind: \"wind\",\n            off: \"off\",\n        };\n        this.isRunning = false; // Status der Klimaanlage\n    }\n\n    setData(data, context) {\n        this.setFromtent(context.tentName);\n        this.identifyIfFromAmbient();\n        this.data = { ...this.data, ...data };\n        this.identifySwitchesAndSensors();\n        this.updateIsRunningState();\n        this.identifyCurrentHavoc();\n    }\n\n    identifyCurrentHavoc() {\n        const havocDevice = this.switches[0];\n        if (!havocDevice) {\n            console.warn(`${this.name}: Keine Switches definiert, um HAVOC zu identifizieren.`);\n            return;\n        }\n\n        const havocValue = this.data[havocDevice];\n\n        if (havocValue && Object.values(this.havocs).includes(havocValue)) {\n            this.currentHAVOC = havocValue;\n            console.warn(`${this.name}: HAVOC-Modus gesetzt auf \"${this.currentHAVOC}\".`);\n        } else {\n            console.warn(`${this.name}: Ungültiger HAVOC-Wert \"${havocValue}\", Standardwert \"off\" wird verwendet.`);\n        }\n    }\n\n    runAction() {\n        if (!this.needChange || !this.action || typeof this.action !== \"object\") {\n            console.warn(`${this.name}: Keine Änderungen erforderlich.`);\n            return null;\n        }\n\n        const { mode, action } = this.action;\n        const lowerMode = mode.toLowerCase(); // Konvertiere in Kleinbuchstaben\n        const validMode = this.havocs[lowerMode]; // Vergleiche mit `havocs` Mapping\n\n        console.warn(`Aktion empfangen: Mode = \"${mode}\", Action = \"${action}\", ValidMode = \"${validMode}\", CurrentHAVOC = \"${this.currentHAVOC}\"`);\n\n        // Prüfen, ob der Modus ungültig ist\n        if (!validMode) {\n            console.warn(`${this.name}: Ungültiger Modus \"${mode}\" erhalten. Standardwert \"off\" wird verwendet.`);\n            return { entity_id: this.switches[0], action: \"invalid_mode\", received_mode: mode };\n        }\n\n        // Prüfen, ob der Modus bereits läuft\n        if (this.isRunning && this.currentHAVOC.toLowerCase() === validMode) {\n            console.warn(`${this.name}: Keine Änderungen notwendig. Der Modus \"${validMode}\" ist bereits aktiv.`);\n            return { entity_id: this.switches[0], action: \"AllReady_ON\", climate_mode: this.currentHAVOC };\n        }\n\n        if (action === \"off\") {\n            return this.turnOFF();\n        }\n\n        if (!this.isRunning) {\n            return this.turnON(validMode);\n        }\n\n        return this.changeMode(validMode);\n    }\n\n    turnON(mode) {\n        this.isRunning = true;\n        if (this.currentHAVOC !== mode) {\n            this.currentHAVOC = mode;\n            return { entity_id: this.switches[0], action: \"climate\", climate_mode: mode };\n        } else {\n            return { entity_id: this.switches[0], action: \"AllReady_Running\", climate_mode: mode };\n        }\n\n    }\n\n    turnOFF() {\n        if (this.isRunning) {\n            const previousMode = this.currentHAVOC;\n\n            if (this.isRunning === true) {\n                this.isRunning = false;\n                this.currentHAVOC = \"off\";\n                return { entity_id: this.switches[0], action: \"off\", previous_mode: previousMode };\n            } else {\n                return { entity_id: this.switches[0], action: \"AllreadyOFF\", previous_mode: previousMode };\n            }\n        }\n        return { entity_id: this.switches[0], action: \"already_off\" };\n    }\n\n    changeMode(mode) {\n\n        if (this.currentHAVOC !== mode) {\n            this.currentHAVOC = mode;\n            return { entity_id: this.switches[0], action: \"climate\", climate_mode: mode };\n        } else {\n            return { entity_id: this.switches[0], action: \"AllReady_OFF\", climate_mode: mode };\n        }\n\n    }\n}\n\nclass Light extends Device {\n    constructor(name) {\n        super(name, \"light\");\n        this.hasDuty = false;\n        this.dutyCycle = null;\n        this.minDuty = 20;\n        this.maxDuty = 100;\n        this.sunriseMin = 20;\n        this.sunsetMin = 20;\n        this.stepSize = 1; // Schrittweite für Änderungen\n        this.sunRiseTime = \"\";\n        this.sunSetTime = \"\";\n        this.lightOnTime = \"\"; // Startzeit des Lichts\n        this.lightOffTime = \"\"; // Endzeit des Lichts\n        this.isScheduled = false; // Ob das Licht Zeitpläne berücksichtigt\n        this.controlOverVoltage = false;\n        this.worksWithCO2 = false;\n        this.currentPlantPhase = {\n            min: 0,\n            max: 0,\n        };\n        this.PlantStageMinMax = {\n            Germ: {\n                min: 20,\n                max: 30,\n            },\n            Veg: {\n                min: 20,\n                max: 50,\n            },\n            Flower: {\n                min: 70,\n                max: 100,\n            },\n        };\n    }\n\n    setData(data, context) {\n        this.setFromtent(context.tentName);\n        this.identifyIfFromAmbient();\n        this.data = { ...this.data, ...data };\n        this.identifySwitchesAndSensors();\n        this.updateIsRunningState();\n        this.setCurrenPlantPhaseName(context);\n        this.findDutyCycle(); // Initialisiere den Duty-Cycle, falls vorhanden\n        this.setLightTimes(context);\n        this.setSunTimes(context.isPlantDay.sunRiseTimes, context.isPlantDay.sunSetTimes);\n    }\n\n    voltageFactorToDutyCycle(voltage) {\n        return Math.floor(voltage * 10);\n    }\n\n    findDutyCycle() {\n        if (!this.data) {\n            node.warn(`${this.name}: Keine Gerätedaten gefunden.`);\n            return;\n        }\n\n        const voltageKey = Object.keys(this.data).find((key) =>\n            key.toLowerCase().includes(\"voltage\") && !key.toLowerCase().startsWith(\"sensor.\")\n        );\n\n        if (voltageKey) {\n            const voltageValue = parseFloat(this.data[voltageKey]);\n            if (!isNaN(voltageValue)) {\n                this.controlOverVoltage = true;\n                const calculatedDuty = this.voltageFactorToDutyCycle(voltageValue);\n                this.dutyCycle = Math.max(this.minDuty, Math.min(this.maxDuty, calculatedDuty));\n                this.hasDuty = true;\n            } else {\n                this.hasDuty = false;\n            }\n        } else {\n            const dutyCycleKey = Object.keys(this.data).find((key) =>\n                [\"dutycycle\", \"number.\"].some((term) => key.toLowerCase().includes(term))\n            );\n\n            if (dutyCycleKey) {\n                const dutyCycleValue = parseFloat(this.data[dutyCycleKey]);\n                if (!isNaN(dutyCycleValue)) {\n                    const clampedValue = Math.max(this.minDuty, Math.min(this.maxDuty, dutyCycleValue));\n                    this.dutyCycle = clampedValue;\n                    this.hasDuty = true;\n                } else {\n                    this.hasDuty = false;\n                }\n            } else {\n                this.hasDuty = false;\n            }\n        }\n    }\n\n    setCurrenPlantPhaseName(context) {\n        if (!context) return;\n        if (context.plantStage !== this.currentPlantPhase) {\n            this.currentPlantPhase = context.plantStage;\n            this.setForPlantLightPhase();\n        }\n    }\n\n    setForPlantLightPhase() {\n        const phase = this.currentPlantPhase;\n        if (phase.includes(\"Germination\") || phase.includes(\"Clones\")) {\n            this.currentPlantPhase = { ...this.PlantStageMinMax.Germ };\n        } else if (phase.includes(\"Veg\")) {\n            this.currentPlantPhase = { ...this.PlantStageMinMax.Veg };\n        } else if (phase.includes(\"Flower\")) {\n            this.currentPlantPhase = { ...this.PlantStageMinMax.Flower };\n        }\n        this.minDuty = this.currentPlantPhase.min;\n        this.maxDuty = this.currentPlantPhase.max;\n    }\n\n    setLightTimes(context) {\n        if (!context) return;\n        const { lightOnTime, lightOffTime } = context.isPlantDay || {};\n        this.lightOnTime = lightOnTime;\n        this.lightOffTime = lightOffTime;\n\n        if (this.lightOnTime && this.lightOffTime !== \"\") {\n            this.isScheduled = true;\n        }\n    }\n\n    setSunTimes(sunRiseTime, sunSetTime) {\n        if (sunRiseTime || sunSetTime !== \"\") {\n            this.sunRiseTime = sunRiseTime;\n            this.sunSetTime = sunSetTime;\n        }\n    }\n\n    parseTime(timeString) {\n        const [hours, minutes, seconds = 0] = timeString.split(\":\").map(Number);\n        return hours * 3600 + minutes * 60 + seconds;\n    }\n\n    runAction() {\n        if (!this.lightOnTime || !this.lightOffTime) {\n            node.warn(`${this.name}: Lichtzeiten fehlen. Keine Aktion durchgeführt.`);\n            return { Light: `${this.switches[0]}`, Action: \"NoLightTimesSet\", Status: this.isRunning };\n        }\n\n        const currentTime = new Date();\n        const currentSeconds = this.parseTime(currentTime.toTimeString().split(\" \")[0]);\n\n        const sunRiseSeconds = this.parseTime(this.sunRiseTime);\n        const sunSetSeconds = this.parseTime(this.sunSetTime);\n\n        if (currentSeconds >= sunRiseSeconds && currentSeconds < sunSetSeconds) {\n            const sunriseDuration = sunSetSeconds - sunRiseSeconds;\n            const elapsed = currentSeconds - sunRiseSeconds;\n            const dutyIncrement = (elapsed / sunriseDuration) * (this.maxDuty - this.sunriseMin);\n            const newDuty = Math.min(this.maxDuty, this.sunriseMin + dutyIncrement);\n            this.changeDuty(newDuty);\n        } else if (currentSeconds >= sunSetSeconds || currentSeconds < sunRiseSeconds) {\n            const sunsetDuration = (24 * 3600 - sunSetSeconds) + sunRiseSeconds;\n            const elapsed = currentSeconds >= sunSetSeconds\n                ? currentSeconds - sunSetSeconds\n                : 24 * 3600 - sunSetSeconds + currentSeconds;\n            const dutyDecrement = (elapsed / sunsetDuration) * (this.maxDuty - this.sunsetMin);\n            const newDuty = Math.max(this.sunsetMin, this.maxDuty - dutyDecrement);\n            this.changeDuty(newDuty);\n        }\n\n        const startTime = this.parseTime(this.lightOnTime);\n        const endTime = this.parseTime(this.lightOffTime);\n\n        let isLightOn;\n        if (endTime < startTime) {\n            isLightOn = currentSeconds >= startTime || currentSeconds <= endTime;\n        } else {\n            isLightOn = currentSeconds >= startTime && currentSeconds <= endTime;\n        }\n\n        if (isLightOn !== this.isRunning) {\n            this.isRunning = isLightOn;\n            this.action = isLightOn ? \"on\" : \"off\";\n        }\n\n        switch (this.action) {\n            case \"on\":\n                return this.turnON();\n\n            case \"off\":\n                return this.turnOFF();\n\n            case \"unchanged\":\n                return { Light: `${this.switches[0]}`, Action: \"NoChange\", Status: this.isRunning };\n\n            case \"increased\":\n                if (this.hasDuty && this.isRunning) {\n                    const newDuty = Math.min(this.maxDuty, this.dutyCycle + this.stepSize);\n                    return this.changeDuty(newDuty);\n                }\n                break;\n\n            case \"reduced\":\n                if (this.hasDuty && this.isRunning) {\n                    const newDuty = Math.max(this.minDuty, this.dutyCycle - this.stepSize);\n                    return this.changeDuty(newDuty);\n                }\n                break;\n\n            case \"minimum\":\n                if (this.hasDuty && this.isRunning) {\n                    return this.changeDuty(this.minDuty);\n                }\n                break;\n\n            case \"maximum\":\n                if (this.hasDuty && this.isRunning) {\n                    return this.changeDuty(this.maxDuty);\n                }\n                break;\n\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion.`);\n                return { Light: `${this.switches[0]}`, Action: \"UnknownAction\", Status: this.isRunning };\n        }\n    }\n\n    changeDuty(newDuty) {\n        if (!this.hasDuty) {\n            return { entity_id: this.switches[0], action: \"NoDutyCycle\" };\n        }\n\n        const clampedDuty = Math.max(this.minDuty, Math.min(this.maxDuty, newDuty));\n        this.dutyCycle = clampedDuty;\n\n        if (this.controlOverVoltage) {\n            const voltageKey = this.sensors.find((key) =>\n                key.toLowerCase().includes(\"voltage\") && !key.toLowerCase().startsWith(\"sensor.\")\n            );\n\n            if (!voltageKey) {\n                node.warn(`${this.name}: Kein Voltage-Key in sensors gefunden.`);\n                return { entity_id: null, action: \"NoVoltageKey\" };\n            }\n\n            const correctedVoltage = this.dutyCycle / 10;\n            node.warn(`${this.name}: Voltage-Wert gesendet: ${correctedVoltage} an ${voltageKey}`);\n            return { entity_id: voltageKey, action: \"number\", value: correctedVoltage };\n        }\n\n        const entity = this.switches[0];\n        node.warn(`${this.name}: Duty-Cycle geändert auf ${clampedDuty}%.`);\n        return { entity_id: entity, action: \"dutycycle\", dutycycle: clampedDuty };\n    }\n\n    turnON() {\n        const entity = this.switches[0];\n        if (this.isRunning === false) {\n            this.isRunning = true;\n            node.warn(`${this.name}: Licht wurde eingeschaltet.`);\n            return { entity_id: entity, action: \"on\" };\n        } else {\n            return { entity_id: entity, action: \"AllReadyON\" };\n        }\n\n    }\n\n    turnOFF() {\n        const entity = this.switches[0];\n        if (this.isRunning === true) {\n            this.isRunning = false;\n            node.warn(`${this.name}: Licht wurde ausgeschaltet.`);\n            return { entity_id: entity, action: \"off\" };\n        } else {\n            return { entity_id: entity, action: \"AllReadyOff\" };\n        }\n\n    }\n}\n\nclass Humidifier extends Device {\n    constructor(name) {\n        super(name, \"humidifier\");\n        this.isRunning = false; // Status des Befeuchters\n        this.currentHumidity = 0; // Aktueller Feuchtigkeitswert\n        this.targetHumidity = 0; // Ziel-Feuchtigkeitswert\n        this.minHumidity = 30; // Standard-Mindestfeuchtigkeit\n        this.maxHumidity = 70; // Standard-Maximalfeuchtigkeit\n        this.stepSize = 5; // Schrittweite für Änderungen\n        this.realHumidifier = false; // Erkennung eines echten Luftbefeuchters\n        this.hasModes = false; // Erkennung von Modis\n        this.isSimpleSwitch = true; // Gerät ist nur ein einfacher Schalter\n        this.modes = {\n            interval: true,\n            small: false,\n            large: false,\n        };\n    }\n\n    setData(data, context) {\n        this.setFromtent(context.tentName);\n        this.identifyIfFromAmbient();\n        this.data = { ...this.data, ...data }; // Aktualisiere die Gerätedaten\n        this.identifySwitchesAndSensors();\n        this.updateIsRunningState();\n        this.identifyHumidifierType();\n        this.identifyIfHasModes();\n    }\n\n    identifyIfHasModes() {\n        if (this.data && this.data[\"select.humidifier_mode\"]) {\n            this.realHumidifier = true;\n            this.hasModes = true;\n            this.isSimpleSwitch = false;\n        } else {\n            this.hasModes = false;\n        }\n    }\n\n    identifyHumidifierType() {\n        if (this.data) {\n            if (Object.keys(this.data).some(key => key.startsWith(\"humidifier.\"))) {\n                this.realHumidifier = true;\n                this.isSimpleSwitch = false;\n            } else if (Object.keys(this.data).some(key => key.startsWith(\"switch.\"))) {\n                this.isSimpleSwitch = true;\n                this.realHumidifier = false;\n            } else {\n                this.realHumidifier = false;\n                this.isSimpleSwitch = true;\n            }\n        } else {\n            node.warn(`${this.name}: Keine Daten vorhanden, Standard: Einfacher Schalter.`);\n            this.realHumidifier = false;\n            this.isSimpleSwitch = true;\n        }\n    }\n\n    setHumidityLevel(humlevel) {\n        if (!this.realHumidifier) {\n            return { entity_id: this.switches[0], action: \"Unsupported\" };\n        }\n        const entity = this.switches[0];\n        this.targetHumidity = humlevel;\n        node.warn(`${this.name}: Luftfeuchtigkeit auf ${humlevel}% gesetzt in ${this.inRoomName}`);\n        return { entity_id: entity, action: \"setHumidity\", value: humlevel };\n    }\n\n    runAction() {\n        if (!this.needChange) {\n            return { entity_id: this.switches[0], action: \"noChangesNeeded\" };\n        }\n\n        if (this.isSimpleSwitch) {\n            return this.action === \"increased\" || this.action === \"on\"\n                ? this.turnON()\n                : this.turnOFF();\n        }\n\n        switch (this.action) {\n            case \"off\":\n                return this.turnOFF();\n            case \"on\":\n                return this.turnON();\n            case \"increased\":\n                return this.hasModes\n                    ? this.changeMode(\"increased\")\n                    : this.turnON();\n            case \"reduced\":\n                return this.hasModes\n                    ? this.changeMode(\"reduced\")\n                    : this.turnOFF();\n            case \"unchanged\":\n                return { entity_id: this.switches[0], action: \"UNCHANGED\" };\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion \"${this.action}\".`);\n                return { entity_id: this.switches[0], action: \"Unknown Action\" };\n        }\n    }\n\n    turnON() {\n        const entity = this.switches[0];\n        if (!this.isRunning) {\n            this.isRunning = true;\n            node.warn(`${this.name}: Luftbefeuchter eingeschaltet in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"on\" };\n        }\n        return { entity_id: entity, action: \"Already ON\" };\n    }\n\n    turnOFF() {\n        const entity = this.switches[0];\n        if (this.isRunning) {\n            this.isRunning = false;\n            node.warn(`${this.name}: Luftbefeuchter ausgeschaltet in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"off\" };\n        }\n        return { entity_id: entity, action: \"Already OFF\" };\n    }\n\n    changeMode(direction) {\n        if (!this.hasModes) {\n            node.warn(`${this.name}: Moduswechsel nicht unterstützt.`);\n            return { entity_id: this.switches[0], action: \"Unsupported\" };\n        }\n\n        const actions = [];\n\n        if (direction === \"increase\") {\n            if (!this.isRunning) {\n                this.isRunning = true;\n                actions.push({ entity_id: this.switches[0], action: \"on\" });\n            }\n\n            if (this.modes.interval) {\n                this.modes.interval = false;\n                this.modes.small = false;\n                this.modes.large = true;\n                actions.push({ entity_id: \"select.humidifier_mode\", action: \"select\", option: \"large\" });\n            }\n        } else if (direction === \"decrease\") {\n            if (this.modes.large) {\n                this.modes.large = false;\n                this.modes.small = true;\n                actions.push({ entity_id: \"select.humidifier_mode\", action: \"select\", option: \"small\" });\n            } else if (this.modes.small) {\n                this.modes.small = false;\n                this.modes.interval = true;\n                actions.push({ entity_id: \"select.humidifier_mode\", action: \"select\", option: \"interval\" });\n            } else if (this.modes.interval) {\n                this.isRunning = false;\n                actions.push({ entity_id: this.switches[0], action: \"off\" });\n            }\n        }\n\n        return actions.length > 0 ? actions : { entity_id: this.switches[0], action: \"No Change\" };\n    }\n\n    changeHumidity(delta) {\n        if (!this.realHumidifier) {\n            node.warn(`${this.name}: Luftfeuchtigkeit kann nicht geändert werden, da es sich um einen einfachen Schalter handelt.`);\n            return { entity_id: this.switches[0], action: \"Unsupported\" };\n        }\n\n        const entity = this.switches[0];\n        const newHumidity = Math.max(\n            this.minHumidity,\n            Math.min(this.maxHumidity, this.currentHumidity + delta)\n        );\n        if (newHumidity === this.currentHumidity) {\n            node.warn(`${this.name}: Luftfeuchtigkeit ist bereits auf Grenzwert (${this.currentHumidity}%) in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"No Change\" };\n        }\n        this.currentHumidity = newHumidity;\n        node.warn(`${this.name}: Luftfeuchtigkeit geändert auf ${newHumidity}% in ${this.inRoomName}`);\n        return { entity_id: entity, action: \"number\", value: newHumidity };\n    }\n}\n\n//NEED TO TEST THIS \nclass Dehumidifier extends Device {\n    constructor(name) {\n        super(name, \"dehumidifier\");\n    }\n\n    runAction() {\n        if (!this.needChange) {\n            return { entity_id: this.switches[0], action: \"noChangesNeeded\" };\n        }\n\n        switch (this.action) {\n            case \"off\":\n                return this.turnOFF();\n            case \"on\":\n                return this.turnON();\n            case \"increased\":\n                return this.turnON();\n            case \"reduced\":\n                return this.turnOFF();\n            case \"unchanged\":\n                return { entity_id: this.switches[0], action: \"UNCHANGED\" };\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion \"${this.action}\".`);\n                return { entity_id: this.switches[0], action: \"Unknown Action\" };\n        }\n    }\n\n    turnON() {\n        const entity = this.switches[0];\n        if (!this.isRunning) {\n            this.isRunning = true;\n            node.warn(`${this.name}: Luftentfeuchter eingeschaltet in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"on\" };\n        }\n        return { entity_id: entity, action: \"Already ON\" };\n    }\n\n    turnOFF() {\n        const entity = this.switches[0];\n        if (this.isRunning) {\n            this.isRunning = false;\n            node.warn(`${this.name}: Luftentfeuchter ausgeschaltet in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"off\" };\n        }\n        return { entity_id: entity, action: \"Already OFF\" };\n    }\n\n}\n\nclass Heater extends Device {\n    constructor(name) {\n        super(name, \"heater\");\n    }\n    runAction() {\n        if (!this.needChange) {\n            return { entity_id: this.switches[0], action: \"noChangesNeeded\" };\n        }\n\n        switch (this.action) {\n            case \"off\":\n                return this.turnOFF();\n            case \"on\":\n                return this.turnON();\n            case \"increased\":\n                return this.turnON();\n            case \"reduced\":\n                return this.turnOFF();\n            case \"unchanged\":\n                return { entity_id: this.switches[0], action: \"UNCHANGED\" };\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion \"${this.action}\".`);\n                return { entity_id: this.switches[0], action: \"Unknown Action\" };\n        }\n    }\n\n    turnON() {\n        const entity = this.switches[0];\n        if (!this.isRunning) {\n            this.isRunning = true;\n            node.warn(`${this.name}: Luftentfeuchter eingeschaltet in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"on\" };\n        }\n        return { entity_id: entity, action: \"Already ON\" };\n    }\n\n    turnOFF() {\n        const entity = this.switches[0];\n        if (this.isRunning) {\n            this.isRunning = false;\n            node.warn(`${this.name}: Luftentfeuchter ausgeschaltet in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"off\" };\n        }\n        return { entity_id: entity, action: \"Already OFF\" };\n    }\n}\n\nclass Cooler extends Device {\n    constructor(name) {\n        super(name, \"cooler\");\n    }\n\n    runAction() {\n        if (!this.needChange) {\n            return { entity_id: this.switches[0], action: \"noChangesNeeded\" };\n        }\n\n        switch (this.action) {\n            case \"off\":\n                return this.turnOFF();\n            case \"on\":\n                return this.turnON();\n            case \"increased\":\n                return this.turnON();\n            case \"reduced\":\n                return this.turnOFF();\n            case \"unchanged\":\n                return { entity_id: this.switches[0], action: \"UNCHANGED\" };\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion \"${this.action}\".`);\n                return { entity_id: this.switches[0], action: \"Unknown Action\" };\n        }\n    }\n\n    turnON() {\n        const entity = this.switches[0];\n        if (!this.isRunning) {\n            this.isRunning = true;\n            node.warn(`${this.name}: Luftentfeuchter eingeschaltet in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"on\" };\n        }\n        return { entity_id: entity, action: \"Already ON\" };\n    }\n\n    turnOFF() {\n        const entity = this.switches[0];\n        if (this.isRunning) {\n            this.isRunning = false;\n            node.warn(`${this.name}: Luftentfeuchter ausgeschaltet in ${this.inRoomName}`);\n            return { entity_id: entity, action: \"off\" };\n        }\n        return { entity_id: entity, action: \"Already OFF\" };\n    }\n}\n\nclass Pump extends Device {\n    constructor(name) {\n        super(name, \"pump\");\n        this.pumpInterval = 3600; // Mindestintervall zwischen Pumpzyklen (in Sekunden)\n        this.pumpDuration = 10; // Pumpdauer in Sekunden\n        this.isAutoRun = false; // Automatikmodus\n        this.OGBAutoMODE = false; // OpenGrowBox Steuerung\n        this.lastPumpTime = null; // Zeitpunkt des letzten Pumpvorgangs\n        this.soilMoisture = 0; // Bodenfeuchtigkeit\n        this.soilEC = 0; // Elektrische Leitfähigkeit\n        this.minSoilMoisture = 25; // Mindestbodenfeuchte\n        this.maxSoilEC = 2.5; // Maximaler EC-Wert\n    }\n\n    // Gerätedaten setzen und Bodenwerte aktualisieren\n    setData(data, context) {\n        this.setFromtent(context.tentName);\n        this.identifyIfFromAmbient();\n        this.data = { ...this.data, ...data };\n        this.identifySwitchesAndSensors();\n        this.updateIsRunningState();\n        this.evaluateStateFromData();\n        this.identifyIfOGBControlled(context);\n\n        // Aktualisiere Sensorwerte\n        if (data.soilmoisture) this.soilMoisture = parseFloat(data.soilmoisture);\n        if (data.soilec) this.soilEC = parseFloat(data.soilec);\n    }\n\n    // Prüfe OpenGrowBox Steuerung\n    identifyIfOGBControlled(context) {\n        this.OGBAutoMODE = !!context.controls.co2Control;\n    }\n\n    // Status aus Gerätedaten evaluieren\n    evaluateStateFromData() {\n        if (this.data) {\n            const pumpOnKey = Object.keys(this.data).find(key => key.includes(\"pump_on\"));\n            if (pumpOnKey) this.isRunning = this.data[pumpOnKey] === \"on\";\n\n            const autoRunKey = Object.keys(this.data).find(key => key.includes(\"pump_autorun\"));\n            if (autoRunKey) this.isAutoRun = this.data[autoRunKey] === \"on\";\n        }\n    }\n\n    // Mindestintervall prüfen\n    canPumpNow() {\n        const now = new Date();\n        const elapsedTime = this.lastPumpTime\n            ? (now.getTime() - this.lastPumpTime.getTime()) / 1000\n            : this.pumpInterval;\n\n        return elapsedTime >= this.pumpInterval;\n    }\n\n    // Prüfe, ob Bewässerung notwendig ist\n    needsWatering() {\n        return this.soilMoisture < this.minSoilMoisture && this.soilEC < this.maxSoilEC;\n    }\n\n    // Geräteaktionen ausführen\n    runAction(context) {\n        // Prüfe ob AutoModus aktiv ist\n        if (this.isAutoRun) {\n            return this.runAutoMode();\n        }\n\n        switch (this.action) {\n            case \"on\":\n                return this.runPump(\"on\");\n            case \"off\":\n                return this.runPump(\"off\");\n            case \"autorun-on\":\n                return this.setAutoMode(true);\n            case \"autorun-off\":\n                return this.setAutoMode(false);\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion.`);\n                return { entity_id: this.switches[0], action: \"UnknownAction\" };\n        }\n    }\n\n    // Automatische Steuerung der Pumpe\n    runAutoMode() {\n        if (!this.canPumpNow()) {\n            node.warn(`${this.name}: Intervall nicht erreicht.`);\n            return { entity_id: this.switches[0], action: \"wait_interval\" };\n        }\n\n        if (!this.needsWatering()) {\n            node.warn(`${this.name}: Keine Bewässerung notwendig (Moisture: ${this.soilMoisture}, EC: ${this.soilEC}).`);\n            return { entity_id: this.switches[0], action: \"no_water_needed\" };\n        }\n\n        this.lastPumpTime = new Date();\n        this.isRunning = true;\n\n        node.warn(`${this.name}: Starte automatische Bewässerung.`);\n        return { entity_id: this.switches[0], action: \"on\", duration: this.pumpDuration };\n    }\n\n    // Manuelle Pumpaktion ausführen\n    runPump(state) {\n        if (state === \"on\" && !this.isRunning) {\n            this.isRunning = true;\n            this.lastPumpTime = new Date();\n            node.warn(`${this.name}: Pumpe manuell eingeschaltet.`);\n            return { entity_id: this.switches[0], action: \"on\" };\n        } else if (state === \"off\" && this.isRunning) {\n            this.isRunning = false;\n            node.warn(`${this.name}: Pumpe manuell ausgeschaltet.`);\n            return { entity_id: this.switches[0], action: \"off\" };\n        } else {\n            return { entity_id: this.switches[0], action: `Already ${state.toUpperCase()}` };\n        }\n    }\n\n    // AutoModus setzen\n    setAutoMode(state) {\n        this.isAutoRun = state;\n        const action = state ? \"on\" : \"off\";\n        node.warn(`${this.name}: Automatikmodus ${state ? \"aktiviert\" : \"deaktiviert\"}.`);\n        return { entity_id: this.switches[1], action: action };\n    }\n}\n\nclass CO2 extends Device {\n    constructor(name) {\n        super(name, \"co2\"); // Setze den Gerätetyp auf \"co2\"\n        this.targetCO2 = 0; // Zielwert für CO2 (ppm)\n        this.currentCO2 = 0; // Aktueller CO2-Wert (ppm)\n        this.autoRegulate = false; // Automatische Steuerung\n    }\n\n    init() {\n        // Initialisierungen, falls notwendig\n    }\n\n    setTargetCO2(target) {\n        if (target !== this.targetCO2) {\n            this.targetCO2 = target;\n        }\n    }\n\n    enableAutoRegulation() {\n        if (!this.enableAutoRegulation) {\n            this.autoRegulate = true;\n        }\n    }\n\n    disableAutoRegulation() {\n        if (this.enableAutoRegulation) {\n            this.autoRegulate = false;\n        }\n    }\n\n    updateCurrentCO2(value) {\n        if (value !== this.currentCO2) {\n            this.currentCO2 = value;\n        }\n    }\n\n    evalAction(context) {\n        if (this.action === \"unchanged\") return false;\n\n        if (this.autoRegulate && this.currentCO2 < this.targetCO2) {\n            this.action = \"increased\";\n            return true;\n        } else if (this.autoRegulate && this.currentCO2 > this.targetCO2) {\n            this.action = \"reduced\";\n            return true;\n        }\n\n        return this.action !== \"unchanged\";\n    }\n\n    runAction(context) {\n        if (!this.evalAction(context)) {\n            return { CO2: `${this.name}`, Action: \"noChangesNeeded\" };\n        }\n\n        switch (this.action) {\n            case \"increased\":\n                node.warn(`${this.name}: CO2-Zufuhr wird erhöht.`);\n                return { entity_id: this.switches[0], action: \"on\" };\n\n            case \"reduced\":\n                node.warn(`${this.name}: CO2-Zufuhr wird gestoppt.`);\n                return { entity_id: this.switches[0], action: \"off\" };\n\n            case \"on\":\n                node.warn(`${this.name}: CO2-Zufuhr wird aktiviert.`);\n                return { entity_id: this.switches[0], action: \"on\" };\n\n            case \"off\":\n                node.warn(`${this.name}: CO2-Zufuhr wird deaktiviert.`);\n                return { entity_id: this.switches[0], action: \"off\" };\n\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion.`);\n                return { CO2: `${this.name}`, Action: \"UnknownAction\" };\n        }\n    }\n}\n\nclass GenericSwitch extends Device {\n    constructor(name) {\n        super(name, \"switch\"); // Setze den Gerätetyp auf \"switch\"\n        this.isRunning = false; // Status des Schalters\n    }\n\n    init() {\n        // Initialisierungen, falls notwendig\n    }\n\n    evalAction(context) {\n        if (this.action === \"unchanged\") {\n            return false; // Keine Aktion erforderlich\n        }\n        return true; // Standardmäßig erlauben\n    }\n\n    runAction(context) {\n        if (!this.evalAction(context)) {\n            return { Switch: `${this.name}`, Action: \"noChangesNeeded\" };\n        }\n\n        switch (this.action) {\n            case \"on\":\n                if (!this.isRunning) {\n                    this.isRunning = true;\n                    node.warn(`${this.name}: Switch wird eingeschaltet.`);\n                    return { entity_id: this.switches[0], action: \"on\" };\n                } else {\n                    node.warn(`${this.name}: Switch ist bereits eingeschaltet.`);\n                    return { entity_id: this.switches[0], action: \"Already ON\" };\n                }\n\n            case \"off\":\n                if (this.isRunning) {\n                    this.isRunning = false;\n                    node.warn(`${this.name}: Switch wird ausgeschaltet.`);\n                    return { entity_id: this.switches[0], action: \"off\" };\n                } else {\n                    node.warn(`${this.name}: Switch ist bereits ausgeschaltet.`);\n                    return { entity_id: this.switches[0], action: \"Already OFF\" };\n                }\n\n            default:\n                node.warn(`${this.name}: Unbekannte Aktion.`);\n                return { Switch: `${this.name}`, Action: \"UnknownAction\" };\n        }\n    }\n}\n\n//// UNTIL HERE\nclass Sensor extends Device {\n    constructor(name) {\n        super(name, \"sensor\");\n        this.readings = []; // Speichert Sensordaten\n    }\n\n    init() { }\n    evalAction(context) {\n        // Generische Prüfungen für alle Geräte\n        if (this.action === \"unchanged\") {\n            return false; // Keine Aktion erforderlich\n        }\n\n        return true; // Standardmäßig erlauben\n    }\n    addReading(reading) {\n        this.readings.push(reading);\n        return this.readings;\n    }\n\n    getLastReading() {\n        return this.readings.length > 0 ? this.readings[this.readings.length - 1] : null;\n    }\n\n    clearReadings() {\n        this.readings = [];\n    }\n}\n\n// Instanziiere die VPDControl-Klasse und speichere sie in der globalen Node-RED-Variablen\nglobal.set(\"OpenGrowBox\", OpenGrowBox);\nnode.status({fill:\"green\",shape:\"ring\",text:\"OpenGrowBox Started\"});\nmsg.topic = \"Init\"\nreturn msg\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":280,"y":80,"wires":[[]]},{"id":"6bcddff9e4459ebe","type":"debug","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"event","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":310,"y":560,"wires":[]},{"id":"30e734dbde9b993e","type":"function","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"Manager","func":"// Hole oder initialisiere die globale Variable für Räume\nif (msg.topic === \"all_rooms\") return null;\n\n// Prüfen, ob die Klasse OpenGrowBox im globalen Kontext verfügbar ist\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    node.error(\"OpenGrowBox class not found in global context\");\n    return null;\n}\n\nconst room = msg.topic;\n\n// Hole die aktuelle Instanz des Raums\nlet roomInstance = global.get(room);\n\n// Instanz für den Raum erstellen, falls sie nicht existiert\nif (!roomInstance) {\n    roomInstance = new OpenGrowBox(room);\n    global.set(room, roomInstance);\n    node.warn(`Created new room instance for: ${room}`);\n}\n\n// Prüfen, ob Payload-Daten vorhanden sind\nif (msg.payload && typeof msg.payload === \"object\") {\n    const data = msg.payload;\n\n    // Iteriere über die Räume (Gruppen) und Geräte\n    for (const roomKey in data) {\n        const group = data[roomKey];\n\n        // Iteration über die Geräte in der Gruppe\n        for (const deviceName in group) {\n            const deviceData = group[deviceName];\n            const currentRoomDevs = roomInstance.devices || []; // Geräte aus der Instanz abrufen oder leeres Array initialisieren\n\n            // Überprüfen, ob das Gerät bereits existiert\n            const existingDevice = currentRoomDevs.find((device) => device.name === deviceName);\n\n            if (existingDevice) {\n                // Gerät existiert: Aktualisieren\n                existingDevice.setData(deviceData, roomInstance);\n            } else {\n                // Gerät existiert nicht: Neues Gerät hinzufügen\n                roomInstance.addDevice(deviceName, deviceData, roomInstance);\n                node.warn(`Added new device: ${deviceName}`);\n            }\n\n            // Iteration über die inneren Daten des Geräts für weitere Verarbeitung\n            for (const entity in deviceData) {\n                try {\n                    let currentValue = deviceData[entity];\n                    updateTentEnvs(entity, currentValue, roomInstance);\n                } catch (err) {\n                    node.error(`Error processing entity: ${entity} - ${err.message}`);\n                }\n            }\n        }\n    }\n\n    // Nach Verarbeitung die aktualisierte Instanz in den globalen Kontext zurückschreiben\n    global.set(room, roomInstance);\n}\n\n\n// Update-Funktion für TentEnvs\nfunction updateTentEnvs(entity, value, roomInstance) {\n    if (!roomInstance) return;\n\n    if (entity.toLowerCase().includes(\"ogb_dryingmodes\")) {\n        if(roomInstance.tentMode !== \"Drying\")return\n        let currentObjState = roomInstance.getDryingMode();\n        if(currentObjState === value) return\n        node.warn(`DryingMode geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setDryingMode(value);\n    }\n    \n    if (entity.toLowerCase().includes(\"ogb_plantstage\")) {\n        if (value === \"unknown\")return\n        let currentObjState = roomInstance.getPlantStageValue();\n        if(currentObjState === value)return \n        node.warn(`PlantStage geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setPlantStageValue(value);\n    }\n\n    if (entity.toLowerCase().includes(\"ogb_tentmode\")) {\n        let currentObjState = roomInstance.getTentMode() ;\n        if(currentObjState === value) return\n        node.warn(`TentMode geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setTentMode(value);\n\n    }\n\n\n    if (entity.toLowerCase().includes(\"ogb_holdvpdnight\")) {\n        let currentObjState = roomInstance.getVPDNightHold();\n        if(currentObjState === value)return\n        node.warn(`VPD Night Hold geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setVPDNightHold(value);\n    }\n\n\n\n    if (entity.toLowerCase().includes(\"ogb_controlset\")) {\n        let currentObjState = roomInstance.getControlSet();\n        if(currentObjState === value) return\n        node.warn(`ControlSet geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setControlSet(value);\n    }\n\n    if (entity.toLowerCase().includes(\"ogb_lightontime\")) {\n        \n        let currentObjState = roomInstance.isPlantDay ? roomInstance.isPlantDay.lightOnTime : \"\";\n        if (currentObjState !== value) {\n            let stopTime = roomInstance.isPlantDay ? roomInstance.isPlantDay.lightOffTime : \"\";\n            roomInstance.setLightTimes(value, stopTime);\n        }\n        roomInstance.updateLightState();\n    }\n    if (entity.toLowerCase().includes(\"ogb_lightofftime\")) {\n        let currentObjState = roomInstance.isPlantDay ? roomInstance.isPlantDay.lightOffTime : \"\";\n        if (currentObjState !== value) {\n            let startTime = roomInstance.isPlantDay ? roomInstance.isPlantDay.lightOnTime : \"\";\n            roomInstance.setLightTimes(startTime, value);\n        }\n        roomInstance.updateLightState();\n    }\n\n    if (entity.toLowerCase().includes(\"ogb_vpdtarget\")) {\n        if(value === null)return\n        let currentObjState = parseFloat(roomInstance.getTargetedVPD());\n        if (parseFloat(currentObjState) === parseFloat(value)) return\n        node.warn(`Targeted VPD geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setTargetedVPD(parseFloat(value));\n\n    }\n\n    if (entity.toLowerCase().includes(\"ogb_leaftemp\")) {\n        let currentObjState = parseFloat(roomInstance.getLeafOffset()) ;\n        if (parseFloat(currentObjState) === parseFloat(value)) return\n        node.warn(`LeafOffSet geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setLeafOffset(parseFloat(value));\n    }\n    \n    if (entity.toLowerCase().includes(\"ogb_co2_control\")) {\n        let currentObjState = roomInstance.getCO2Control();\n        if (currentObjState === value) return\n        node.warn(`CO2 Control geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setCO2Control(value);\n    }\n    if (entity.toLowerCase().includes(\"ogb_lightcontrol\")) {\n        let currentObjState = roomInstance.getLightControlByOGB();\n        if (currentObjState === value) return\n        node.warn(`OGBLightControl geändert: ${currentObjState} -> ${value}`);\n        roomInstance.setLightControlByOGB(value);\n    }\n    if (entity.toLowerCase().includes(\"ogb_ownweights\")) {\n        let currentObjState = roomInstance.getifOwnWeightsActive();\n        if (currentObjState === value) return\n        node.warn(`OwnWeights geändert: ${currentObjState} -> ${value}`);\n        roomInstance.activateOwnWeights(value);\n    }\n    \n    if (entity.toLowerCase().includes(\"ogb_temperatureweight\") || entity.toLowerCase().includes(\"ogb_humidityweight\")) {\n        let currentObjState = roomInstance.getOwnWeights ? roomInstance.getOwnWeights() : \"\";\n\n        if (currentObjState !== value) {\n            roomInstance.setOwnWeights(entity, value);\n        }\n    }\n}\n\n// Rückgabe der aktualisierten Rauminstanz\nglobal.set(`${room}`, roomInstance);\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":600,"wires":[["e8932288657b06b0","6fe72eaf1d2902f0","9243695e03284f5a"]]},{"id":"9243695e03284f5a","type":"debug","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"Manager","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":840,"y":560,"wires":[]},{"id":"ef80caba76d3b5d2","type":"debug","z":"5b9485aa95f0d129","g":"3523f89ec9c2c676","name":"debug 477","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":590,"y":560,"wires":[]},{"id":"139015f29bc3dd89","type":"debug","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"debug 481","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":820,"y":240,"wires":[]},{"id":"090ae69011847e65","type":"debug","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"debug 482","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1140,"y":240,"wires":[]},{"id":"06edd4eb472d3731","type":"debug","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"debug 483","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1330,"y":240,"wires":[]},{"id":"f539391e66f50ccf","type":"debug","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"debug 484","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1250,"y":340,"wires":[]},{"id":"3173745ac1f6be42","type":"debug","z":"5b9485aa95f0d129","g":"43457bccef542a7d","name":"debug 485","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1310,"y":440,"wires":[]},{"id":"02701e85ddace028","type":"link in","z":"4ad106a4cfadd543","name":"RoomControl","links":["6fe72eaf1d2902f0"],"x":45,"y":320,"wires":[["ba7a732e01beeb87","b3f9fade8f2c3cc2","a175202c75d55747"]]},{"id":"af1aa666ca6fb17e","type":"function","z":"4ad106a4cfadd543","name":"Sort Sensor Types","func":"// Hauptschlüssel in `msg.payload` extrahieren (z.B., \"flowertent\", \"ambient\", etc.)\nlet mainKey = Object.keys(msg.payload)[0];\nlet data = msg.payload[mainKey];  // Hol das innere Objekt mit den eigentlichen Daten\nlet room = msg.topic;\n\n// Sicherstellen, dass die OpenGrowBox-Klasse geladen ist\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    return new Error(\"OpenGrowBox class not found in globals.\");\n}\n// Sicherstellen, dass die Raum-Instanz geladen ist\nconst roomInstance = global.get(room);\nif (!roomInstance) {\n    node.status({ fill: \"red\", shape: \"ring\", text: `No Room Data!` });\n    return new Error(`Room instance for \"${msg.topic}\" not found.`);\n}\n\nif (roomInstance) {\n    node.status({ fill: \"blue\", shape: \"ring\", text: `Start VPD Creation for ${roomInstance.tentName || room}` });\n}\n\n// Arrays für verschiedene Sensortypen initialisieren\nlet wish = [];\nlet temperatures = [];\nlet humidity = [];\nlet dewpoints = [];\nlet moisture = [];\nlet pressures = [];\nlet battery = [];\nlet power = [];\nlet co2 = [];\nlet lumen = [];\nlet conductivity = [];\nlet switches = [];\nlet dutyCycleExhaust = [];\nlet vents = [];\nlet humidifier = [];\nlet dehumidifier = [];\nlet root = [];\nlet cooler = [];\nlet heater = [];\nlet tank = [];\nlet pump = [];\nlet climate = [];\n\n// Funktion zur Verarbeitung verschachtelter Objekte\nfunction processEntity(sensorName, sensorData) {\n    let entity_id = sensorName.toLowerCase();\n    let entity = { entity_id: entity_id, value: sensorData };\n\n    // Sortiere die Entitäten in die entsprechenden Kategorien\n    if (entity_id.includes('wish') || entity_id.includes('number.') || entity_id.includes('weigth') || entity_id.includes('level')|| entity_id.includes('avg') || entity_id.includes('current')||  entity_id.includes('target')|| entity_id.includes('ambient') || entity_id.includes('outsite')) {\n        wish.push(entity);\n    } else if (entity_id.includes('root') || entity_id.includes('wurzel')) {\n        root.push(entity);\n    } else if (entity_id.includes('temperature') || entity_id.includes('tempe')) {\n        temperatures.push(entity);\n    } else if (entity_id.includes('humidity') || entity_id.includes('feuchtigkeit') || entity_id.includes('rh')) {\n        humidity.push(entity);\n    } else if (entity_id.includes('dewpoint') || entity_id.includes('dew')) {\n        dewpoints.push(entity);\n    } else if (entity_id.includes('moisture') || entity_id.includes('mois')) {\n        moisture.push(entity);\n    } else if (entity_id.includes('pressure') || entity_id.includes('press')) {\n        pressures.push(entity);\n    } else if (entity_id.includes('carbondioxide') || entity_id.includes('co2') || entity_id.includes('carbon')) {\n        co2.push(entity);\n    } else if (entity_id.includes('conductivity')) {\n        conductivity.push(entity);\n    } else if (entity_id.includes('illuminance')) {\n        lumen.push(entity);\n    } else if (entity_id.includes('climate.')) {\n        climate.push(entity);\n    } else if (entity_id.includes('dehumidifier') || entity_id.includes('entfeuchter')) {\n        dehumidifier.push(entity);\n    } else if (entity_id.includes('humidifier') || entity_id.includes('befeuchter')) {\n        humidifier.push(entity);\n    } else if (entity_id.includes('cooler') || entity_id.includes('klima')) {\n        cooler.push(entity);\n    } else if (entity_id.includes('heater') || entity_id.includes('heizung')) {\n        heater.push(entity);\n    } else if (entity_id.includes('tank')) {\n        tank.push(entity);\n    } else if (entity_id.includes('pump') || entity_id.includes('pumping')) {\n        pump.push(entity);\n    } else if (entity_id.includes('ruck') || entity_id.includes('airctrl') || entity_id.includes('exhaust') || entity_id.includes('abluft')) {\n        dutyCycleExhaust.push(entity);\n    } else if (entity_id.includes('vent')) {\n        vents.push(entity);\n    } else if (entity_id.includes('switch')) {\n        switches.push(entity);\n    } else if (entity_id.includes('power') || entity_id.includes('energy')) {\n        power.push(entity);\n    } else if (entity_id.includes('battery') || entity_id.includes('batt')) {\n        battery.push(entity);\n    }\n}\n\n// Hauptschleife zum Durchlaufen aller Gruppen und Sensoren in data\nfor (let group in data) {\n    if (data.hasOwnProperty(group)) {\n        for (let sensor in data[group]) {\n            if (data[group].hasOwnProperty(sensor)) {\n                processEntity(sensor, data[group][sensor]);\n            }\n        }\n    }\n}\n\n// Durchschnitt für Temperatur und Feuchtigkeit berechnen und an die Raum-Instanz setzen\nfunction calculateAvgValue(entities) {\n    let sum = 0;\n    let count = 0;\n\n    entities.forEach((entry) => {\n        let value = parseFloat(entry.value);\n        if (!isNaN(value)) {\n            sum += value;\n            count++;\n        }\n    });\n\n    return count === 0 ? null : parseFloat((sum / count).toFixed(2));\n}\n\n// Durchschnittliche Temperatur und Luftfeuchtigkeit berechnen und setzen\nconst avgTemp = calculateAvgValue(temperatures);\nconst avgHumidity = calculateAvgValue(humidity);\n\nif (avgTemp !== null) {\n    roomInstance.setCurrentTemp(avgTemp);\n}\nif (avgHumidity !== null) {\n    roomInstance.setCurrentHumidity(avgHumidity);\n}\n\n// Berechnungen für Dewpoint und VPD explizit aufrufen\nconst currentDew = roomInstance.calculateDewPoint();\nconst currentVPD = roomInstance.calculateCurrentVPD();\n\nconst Room = {\n    Temp: roomInstance.tentData.temperature,\n    Humidity: roomInstance.tentData.humidity,\n    Dewpoint: roomInstance.tentData.dewpoint,\n    VPD: roomInstance.vpd.current,\n}\n\n// Nachrichtenausgabe auf verschiedenen Outputs\nreturn [\n    { payload: Room, topic: `${room}` },\n    { payload: wish, topic: 'Wish', room: `${room}` },\n    { payload: temperatures, topic: 'temperature', room: `${room}` },\n    { payload: humidity, topic: 'humidity', room: `${room}` },\n    { payload: currentDew, topic: 'dewpoint', room: `${room}` },\n    { payload: moisture, topic: 'moisture', room: `${room}` },\n    { payload: root, topic: 'roottemp', room: `${room}` },\n    { payload: conductivity, topic: 'conductivity', room: `${room}`},\n    { payload: pressures, topic: 'pressure', room: `${room}` },\n    { payload: co2, topic: 'carbon_dioxide', room: `${room}` },\n    { payload: lumen, topic: 'illuminance', room: `${room}` },\n    { payload: battery, topic: 'battery', room: `${room}` },\n    { payload: power, topic: 'power', room: `${room}` },\n    { payload: switches, topic: 'switch', room: `${room}` },\n    { payload: vents, topic: 'Vents', room: `${room}` },\n    { payload: dutyCycleExhaust, topic: 'Exhaust', room: `${room}` },\n    { payload: humidifier, topic: 'humidifier', room: `${room}` },\n    { payload: dehumidifier, topic: 'dehumidifier', room: `${room}` },\n    { payload: cooler, topic: 'cooler', room: `${room}` },\n    { payload: heater, topic: 'heater', room: `${room}` },\n    { payload: climate, topic: 'climate', room: `${room}`},\n    { payload: tank, topic: 'tank',room:`${room}`},\n    { payload: pump, topic: 'pump',room:`${room}`},\n];\n","outputs":23,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":600,"wires":[["6fc066d05044b231"],["376e5c5f3c81f85f"],["e964b99777b25b6b"],["e964b99777b25b6b"],["e964b99777b25b6b"],["409f5d956baf5669"],["1ab95c253ff886fb"],["97588977b4ef11a3"],["39a5487be0ee0334"],["5ce583bc1cb7595e"],["d6b2185b32829de9"],["cad40b99f90f92e9"],["0dc1712260c48bc5"],["db550c364f0f87ce"],["fed952a497e65171"],["d7d06609eb105d27"],["83f8209da434683b"],["b6462402d7fb5db2"],["291baa502230d0d3"],["5906e2049995721b"],["532da08368c7202c"],["184f9297c204f90a"],["5a89a361e1399ede"]]},{"id":"ba7a732e01beeb87","type":"debug","z":"4ad106a4cfadd543","name":"CurrentData","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":170,"y":320,"wires":[]},{"id":"77b47604fac64d57","type":"function","z":"4ad106a4cfadd543","name":"Setze Aktion EIN","func":"const entityType = msg.payload.entity_id.split('.')[0]; // Extrahiere Domain\n\nmsg.payload = {\n    domain: entityType, // Dynamische Domain (light, switch, fan, etc.)\n    service: \"turn_on\", // Aktion ist \"EIN\"\n    data: {\n        entity_id: msg.payload.entity_id // Entität-ID übergeben\n    }\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: `Turn ON: ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":320,"wires":[["0960fc80c97a7e6a"]]},{"id":"1abe9480672951a4","type":"function","z":"4ad106a4cfadd543","name":"Setze Aktion AUS","func":"const entityType = msg.payload.entity_id.split('.')[0]; // Extrahiere Domain\nmsg.payload = {\n    domain: entityType, // Dynamische Domain (light, switch, fan, etc.)\n    service: \"turn_off\", // Aktion ist \"AUS\"\n    data: {\n        entity_id: msg.payload.entity_id // Entität-ID übergeben\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Turn OFF: ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":380,"wires":[["547155ef6ab4ecb5"]]},{"id":"0960fc80c97a7e6a","type":"api-call-service","z":"4ad106a4cfadd543","name":"Schalte EIN","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"output_location":"payload","output_location_type":"msg","x":1410,"y":320,"wires":[[]]},{"id":"547155ef6ab4ecb5","type":"api-call-service","z":"4ad106a4cfadd543","name":"Schalte AUS","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"output_location":"payload","output_location_type":"msg","x":1410,"y":380,"wires":[[]]},{"id":"8bb461eacaa5cc2d","type":"function","z":"4ad106a4cfadd543","name":"Setze Helligkeit oder Duty Cycle","func":"const entityType = msg.payload.entity_id.split('.')[0];\nconst value = msg.payload.dutycycle || 0;\n\nif (entityType === 'light') {\n    msg.payload = {\n        action: \"light.turn_on\",\n        data: {\n            entity_id: msg.payload.entity_id,\n            brightness_pct: value\n        }\n    };\n} else if (entityType === 'fan') {\n    msg.payload = {\n        action: \"fan.set_percentage\",\n        data: {\n            entity_id: msg.payload.entity_id,\n            percentage: value\n        }\n    };\n}\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set new Value ${value}: -> ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1170,"y":260,"wires":[["b74023821b77b8ee"]]},{"id":"c75c34096c753787","type":"function","z":"4ad106a4cfadd543","name":"Setze Climate Mode","func":"const entity = msg.payload.entity_id;\nconst havocMode = msg.payload.climate_mode\nmsg.payload = {\n    action: \"climate.set_hvac_mode\",\n    data: {\n        entity_id: entity,\n        hvac_mode: havocMode\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set Climate ${msg.payload.data.entity_id} -> to ${havocMode}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1140,"y":200,"wires":[["bf48a27815898885"]]},{"id":"bf48a27815898885","type":"api-call-service","z":"4ad106a4cfadd543","name":"Setze Climate Mode","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{    \"entity_id\": \"{{payload.data.entity_id}}\",    \"hvac_mode\": \"{{payload.data.hvac_mode}}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1440,"y":200,"wires":[[]]},{"id":"6685a93abbc0f329","type":"http request","z":"4ad106a4cfadd543","name":"Weather_API","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":670,"y":60,"wires":[["32272ec2bcc57061"]]},{"id":"164dcba264dc1a97","type":"api-current-state","z":"4ad106a4cfadd543","name":"GrowPlace","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"zone.home","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"triggerId"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":250,"y":60,"wires":[["1434dd31631d6bc1"]]},{"id":"1434dd31631d6bc1","type":"function","z":"4ad106a4cfadd543","name":"Create URL with Coordinates","func":"const latitude = msg.data.attributes.latitude;\nconst longitude = msg.data.attributes.longitude;\n\nmsg.url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,is_day,rain,showers,snowfall&timezone=Europe%2FBerlin&forecast_days=1&models=best_match`;\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":460,"y":60,"wires":[["6685a93abbc0f329"]]},{"id":"5706bb19aad160de","type":"comment","z":"4ad106a4cfadd543","name":"OutSiteTemp_basedon_GPS","info":"","x":160,"y":20,"wires":[]},{"id":"c5a4bb7985db5b7e","type":"debug","z":"4ad106a4cfadd543","name":"Actions_log","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":670,"y":240,"wires":[]},{"id":"049f3d9f5b8db0f4","type":"inject","z":"4ad106a4cfadd543","name":"Init","props":[{"p":"topic","vt":"str"},{"p":"payload"}],"repeat":"300","crontab":"","once":true,"onceDelay":"6","topic":"","payload":"WinterIsComming","payloadType":"str","x":90,"y":60,"wires":[["164dcba264dc1a97"]]},{"id":"b3f9fade8f2c3cc2","type":"function","z":"4ad106a4cfadd543","name":"GetTent","func":"\n// Sicherstellen, dass die Raum-Instanz geladen ist\nconst roomInstance = global.get(msg.topic);\nif (!roomInstance) {\n    return new Error(`Room instance for \"${msg.topic}\" not found.`);\n}\n\nmsg.payload = roomInstance\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":140,"y":280,"wires":[["4f82c925353323f5","1aaf11431d72fdc5"]]},{"id":"1f1ed397e3c30251","type":"debug","z":"4ad106a4cfadd543","name":"DeviceAciton","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":690,"y":380,"wires":[]},{"id":"6fd8c24d7450e107","type":"function","z":"4ad106a4cfadd543","name":"Setze Number-Wert","func":"const value = msg.payload.value || 0;\nmsg.payload = {\n    action: \"number.set_value\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        value: value\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set Value ${value}: -> ${msg.payload.data.entity_id}` });\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":440,"wires":[["a2422ad3191db2e8"]]},{"id":"a2422ad3191db2e8","type":"api-call-service","z":"4ad106a4cfadd543","name":"Setze Number-Wert","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{    \"entity_id\": \"{{payload.data.entity_id}}\",    \"value\": {{payload.data.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1430,"y":440,"wires":[[]]},{"id":"45fa43f3b0c3380c","type":"function","z":"4ad106a4cfadd543","name":"SetupRoomSensors","func":"// Extrahiere die aktuellen Werte\nconst vpd = msg.payload.VPD;\nconst temp = msg.payload.Temp;\nconst hum = msg.payload.Humidity;\nconst dew = msg.payload.Dewpoint;\n\n// Funktion, um eine Nachricht im gewünschten Format zu erstellen\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Erstelle Nachrichten für die einzelnen Sensorwerte\nconst messages = [\n    createMessage(`sensor.ogb_currentvpd_${msg.topic}`, vpd),\n    createMessage(`sensor.ogb_avgtemperature_${msg.topic}`, temp),\n    createMessage(`sensor.ogb_avghumidity_${msg.topic}`, hum),\n    createMessage(`sensor.ogb_avgdewpoint_${msg.topic}`, dew),\n];\n\n// Sende die Nachrichten einzeln\nmessages.forEach((message, index) => {\n    node.status({ fill: \"green\", shape: \"ring\", text: `Sending message ${index + 1}: ${message.payload.entity_id}` });\n    node.send(message); // Send each message individually\n});\n\n// Return null to avoid sending duplicate messages\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":180,"wires":[["ff75ecac788ac2f5","974cb99a09aa8ce4"]]},{"id":"b8de3efc886baffc","type":"function","z":"4ad106a4cfadd543","name":"Ambient & Outsite DataLoader","func":"const roomName = msg.topic;\nconst outsiteTemps = flow.get(\"outsitetemps\");\n\nif (!roomName) {\n    node.error(\"Room name is missing in the payload.\");\n    return null;\n}\n\n// Format the room name (lowercase, remove spaces and special characters)\nconst formattedRoomName = roomName.toLowerCase().replace(/\\s+/g, \"_\").replace(/[^a-z0-9_]/g, \"\");\n\n// If the room is \"ambient\", store the data in context\nif (formattedRoomName.startsWith(\"ambient\")) {\n    const roomInstance = global.get(formattedRoomName);\n\n    if (!roomInstance || !roomInstance.tentData || !roomInstance.vpd) {\n        node.error(\"Ambient room instance is incomplete or missing.\");\n        return null;\n    }\n\n    const AmbientData = {\n        ambientTemp: Number(roomInstance.tentData.temperature),\n        ambientHumidity: Number(roomInstance.tentData.humidity),\n        ambientDewpoint: Number(roomInstance.tentData.dewpoint),\n        ambientVPD: Number(roomInstance.vpd.current)\n    };\n\n    context.set(\"AmbientData\", AmbientData);\n\n    node.status({ fill: \"green\", shape: \"dot\", text: \"Ambient Data Stored\" });\n    return null; // No further actions for \"ambient\" rooms\n}\n\n// Retrieve Ambient Data from context for other rooms\nconst AmbientData = context.get(\"AmbientData\");\n\nif (!AmbientData) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Ambient Data Missing\" });\n    return null;\n}\n\n// Ensure the OpenGrowBox class is loaded\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    node.error(\"OpenGrowBox class not found in globals.\");\n    return null;\n}\n\n// Retrieve room instance\nconst roomInstance = global.get(formattedRoomName);\nif (!roomInstance) {\n    node.error(`Room instance not found for ${formattedRoomName}`);\n    return null;\n}\n\n// Apply Ambient Data\nroomInstance.setAmbientData(\n    Number(AmbientData.ambientTemp),\n    Number(AmbientData.ambientHumidity),\n    Number(AmbientData.ambientDewpoint)\n);\n\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: `Ambient Data Applied to ${formattedRoomName}`\n});\n\n// Apply Outsite Data\nroomInstance.setOutsiteData(\n    Number(outsiteTemps.temp),\n    Number(outsiteTemps.hum),\n    Number(outsiteTemps.dew)\n);\n\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: `Outsite Data Applied to ${formattedRoomName}`\n});\n\n// Function to create a message with a number payload\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: Number(value) // Ensure the value is a number\n        }\n    };\n}\n\n// Create messages for all data\nconst messages = [\n    createMessage(`sensor.ogb_ambientvpd_${formattedRoomName}`, AmbientData.ambientVPD),\n    createMessage(`sensor.ogb_ambienttemperature_${formattedRoomName}`, AmbientData.ambientTemp),\n    createMessage(`sensor.ogb_ambienthumidity_${formattedRoomName}`, AmbientData.ambientHumidity),\n    createMessage(`sensor.ogb_ambientdewpoint_${formattedRoomName}`, AmbientData.ambientDewpoint),\n    createMessage(`sensor.ogb_outsitetemperature_${formattedRoomName}`, Number(outsiteTemps.temp)),\n    createMessage(`sensor.ogb_outsitehumidity_${formattedRoomName}`, Number(outsiteTemps.hum)),\n    createMessage(`sensor.ogb_outsitedewpoint_${formattedRoomName}`, Number(outsiteTemps.dew))\n];\n\n// Send messages individually\nmessages.forEach((message) => {\n    node.send(message);\n});\n\n// Return null to prevent further output from this function node\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":250,"y":120,"wires":[["53ef2b596ba18627","a5e26993929a4599"]]},{"id":"4f82c925353323f5","type":"debug","z":"4ad106a4cfadd543","name":"debug 467","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":170,"y":240,"wires":[]},{"id":"32272ec2bcc57061","type":"function","z":"4ad106a4cfadd543","name":"SetOutSiteData","func":"// Hole Außentemperaturdaten aus der Nachricht\nconst currentData = msg.payload.current;\nconst temp = msg.payload.current.temperature_2m;\nconst hum = msg.payload.current.relative_humidity_2m;\n\n// Funktion zur Berechnung des Taupunkts\nconst calculateDewPoint = (temperature, humidity) => {\n    const temp = parseFloat(temperature);\n    const hum = parseFloat(humidity);\n\n    if (isNaN(temp) || isNaN(hum)) {\n        return \"unavailable\";\n    }\n\n    const a = 17.27;\n    const b = 237.7;\n\n    // Berechnung der Hilfsvariable γ(T, RH)\n    const gamma = (a * temp) / (b + temp) + Math.log(hum / 100);\n\n    // Berechnung des Taupunkts\n    const dewPoint = (b * gamma) / (a - gamma);\n\n    return parseFloat(dewPoint.toFixed(2));\n};\n\n// Berechnung des Taupunkts\nconst dew = calculateDewPoint(temp, hum);\n\n// Speichern der Außentemperaturdaten im Kontext\nconst outsiteTemps = {\n    temp: Number(temp),\n    hum: Number(hum),\n    dew: Number(dew)\n};\nflow.set(\"outsitetemps\", outsiteTemps);\n\n// Zeitstempel und Status-Update\nconst timestamp = new Date().toLocaleString();\nnode.status({ fill: \"green\", shape: \"dot\", text: `Loaded OutsiteData  ${timestamp}` });\n\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":840,"y":60,"wires":[[]]},{"id":"1aaf11431d72fdc5","type":"link out","z":"4ad106a4cfadd543","name":"GetTent","mode":"link","links":["a891291be3c02972","a25a55f5d6ba8c8e"],"x":285,"y":280,"wires":[]},{"id":"a891291be3c02972","type":"link in","z":"4ad106a4cfadd543","name":"GetTent","links":["1aaf11431d72fdc5"],"x":65,"y":120,"wires":[["b8de3efc886baffc"]]},{"id":"6fc066d05044b231","type":"link out","z":"4ad106a4cfadd543","name":"RoomEnv","mode":"link","links":["61718212e298a3ae"],"x":315,"y":340,"wires":[]},{"id":"61718212e298a3ae","type":"link in","z":"4ad106a4cfadd543","name":"RoomEnv","links":["6fc066d05044b231"],"x":65,"y":180,"wires":[["45fa43f3b0c3380c"]]},{"id":"a25a55f5d6ba8c8e","type":"link in","z":"4ad106a4cfadd543","name":"RoomEnv","links":["1aaf11431d72fdc5"],"x":455,"y":320,"wires":[["b1f2d7975d145a5c"]]},{"id":"ff75ecac788ac2f5","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":560,"y":180,"wires":[[]]},{"id":"53ef2b596ba18627","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":560,"y":120,"wires":[[]]},{"id":"409f5d956baf5669","type":"function","z":"4ad106a4cfadd543","name":"Moisture","func":"const sensors = msg.payload;\nconst room = msg.room;\n\n// Funktion zum Finden des passenden Moisture-Wertes\nfunction findMoistureValue(sensors, targetSensor) {\n    const moistureObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"moisture\") ||\n            sensor.entity_id.includes(\"humidity\") ||\n            sensor.entity_id.includes(\"wetness\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return moistureObject ? moistureObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Ziel-Sensorname, den wir nicht überschreiben wollen\nconst targetSensor = `sensor.ogb_soilmoisture_${room}`;\n\n// Finden des Moisture-Wertes\nconst moistureValue = findMoistureValue(sensors, targetSensor);\n\nif(moistureValue === \"NaN\")return\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (moistureValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(moistureValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Moisture-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":440,"wires":[["6f8c641581426212"]]},{"id":"5ce583bc1cb7595e","type":"function","z":"4ad106a4cfadd543","name":"CO2","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_co2_${room}`;\n\n// Funktion zum Filtern der richtigen Sensoren\nfunction findValidSensor(sensors, targetSensor) {\n    return sensors.find(sensor => \n        sensor.entity_id !== targetSensor && // Nicht der Ziel-Sensor\n        Number(sensor.value) > 400          // Wert muss größer als 400 sein\n    );\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Prüfen und Nachricht erstellen\nconst validSensor = findValidSensor(sensors, targetSensor);\n\nif (validSensor) {\n    const message = createMessage(targetSensor, Number(validSensor.value));\n    return [message]; // Nachricht zurückgeben\n} else {\n    // Kein gültiger Sensor gefunden\n    //node.warn(\"Kein gültiger CO2-Sensor gefunden oder Wert ist zu niedrig\");\n    return null; // Keine Nachricht zurückgeben\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":600,"wires":[["6f8c641581426212"]]},{"id":"39a5487be0ee0334","type":"function","z":"4ad106a4cfadd543","name":"Pressure","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensorname, den wir nicht überschreiben wollen\nconst targetSensor = `sensor.ogb_pressure_${room}`;\n\n// Funktion zum Finden des Luftdruck-Wertes\nfunction findPressureValue(sensors, targetSensor) {\n    const pressureObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"pressure\") ||\n            sensor.entity_id.includes(\"barometer\") ||\n            sensor.entity_id.includes(\"luftdruck\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return pressureObject ? pressureObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Luftdruck-Wertes\nconst pressureValue = findPressureValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (pressureValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(pressureValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Pressure-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":560,"wires":[["6f8c641581426212"]]},{"id":"97588977b4ef11a3","type":"function","z":"4ad106a4cfadd543","name":"SOIL-EC","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensorname, den wir nicht überschreiben wollen\nconst targetSensor = `sensor.ogb_soilec_${room}`;\n\n// Funktion zum Finden des EC- oder Conductivity-Wertes\nfunction findECValue(sensors, targetSensor) {\n    const ecObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"ec\") || sensor.entity_id.includes(\"conductivity\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return ecObject ? ecObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des EC-Wertes\nconst soilEC = findECValue(sensors, targetSensor);\n\nif(soilEC === \"NaN\")return\n\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (soilEC !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(soilEC));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger EC-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":520,"wires":[["6f8c641581426212"]]},{"id":"1ab95c253ff886fb","type":"function","z":"4ad106a4cfadd543","name":"Root-Temp","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensorname, den wir nicht überschreiben wollen\nconst targetSensor = `sensor.ogb_roottemp_${room}`;\n\n// Funktion zum Finden des Root-Temperature-Wertes\nfunction findRootTempValue(sensors, targetSensor) {\n    const rootTempObject = sensors.find(sensor => \n        (sensor.entity_id.includes(\"root_temp\") || \n         sensor.entity_id.includes(\"roottemperature\") || \n         sensor.entity_id.includes(\"soiltemp\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return rootTempObject ? rootTempObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Root-Temperature-Wertes\nconst rootTempValue = findRootTempValue(sensors, targetSensor);\n\nif(rootTempValue === \"NaN\")return\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (rootTempValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(rootTempValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Root-Temperature-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":480,"wires":[["6f8c641581426212"]]},{"id":"d6b2185b32829de9","type":"function","z":"4ad106a4cfadd543","name":"LightIntense","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_lightintensity_${room}`;\n\n// Funktion zum Finden des Licht-Wertes (Lumen oder Lux)\nfunction findLightValue(sensors, targetSensor) {\n    const lightObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"lumen\") ||\n            sensor.entity_id.includes(\"lux\") ||\n            sensor.entity_id.includes(\"light\") ||\n            sensor.entity_id.includes(\"illuminance\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return lightObject ? lightObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Licht-Wertes\nconst lxValue = findLightValue(sensors, targetSensor);\nif(lxValue === \"Nan\")return\n// Überprüfen, ob ein Wert gefunden wurde\nif (lxValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(lxValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Light-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":640,"wires":[["6f8c641581426212"]]},{"id":"cad40b99f90f92e9","type":"function","z":"4ad106a4cfadd543","name":"Battery","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_battery_${room}`;\n\n// Funktion zum Finden des Batterie-Wertes\nfunction findBatteryValue(sensors, targetSensor) {\n    const batteryObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"battery\") ||\n            sensor.entity_id.includes(\"batt\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return batteryObject ? batteryObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Batterie-Wertes\nconst batValue = findBatteryValue(sensors, targetSensor);\nif(batValue === \"NaN\")return\n// Überprüfen, ob ein Wert gefunden wurde\nif (batValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(batValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Batterie-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":680,"wires":[["6f8c641581426212"]]},{"id":"0dc1712260c48bc5","type":"function","z":"4ad106a4cfadd543","name":"PowerConsum","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_lightpower_${room}`;\n\n// Funktion zum Finden des Stromverbrauch-Wertes\nfunction findPowerConsumptionValue(sensors, targetSensor) {\n    const powerConsumptionObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"energy_power\") ||\n            sensor.entity_id.includes(\"consumption\") ||\n            sensor.entity_id.includes(\"watt\") ||\n            sensor.entity_id.includes(\"electricity\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return powerConsumptionObject ? powerConsumptionObject.value : null;\n}\n\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Stromverbrauch-Wertes\nconst powerValue = findPowerConsumptionValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (powerValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(powerValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Stromverbrauch-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":720,"wires":[["6f8c641581426212"]]},{"id":"db550c364f0f87ce","type":"function","z":"4ad106a4cfadd543","name":"Switch","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.${room}_switch`;\n\n// Funktion zum Finden des Switch-Wertes\nfunction findSwitchValue(sensors, targetSensor) {\n    const switchObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"switch\") ||\n            sensor.entity_id.includes(\"toggle\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return switchObject ? switchObject.state : null; // Rückgabe des Switch-Zustands oder null\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Switch-Wertes\nconst switchValue = findSwitchValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (switchValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, switchValue);\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Switch-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":820,"wires":[[]]},{"id":"fed952a497e65171","type":"function","z":"4ad106a4cfadd543","name":"Vents","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_ventilation_${room}`;\n\n// Funktion zum Finden des Ventilation-Wertes\nfunction findVentilationValue(sensors, targetSensor) {\n    const ventilationObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"ventilation\") ||\n         sensor.entity_id.includes(\"fan\") ||\n         sensor.entity_id.includes(\"exhaust\") ||\n         sensor.entity_id.includes(\"airflow\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return ventilationObject ? ventilationObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Ventilation-Wertes\nconst ventilationValue = findVentilationValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (ventilationValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(ventilationValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Ventilation-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":880,"wires":[["1ea3df0af8459869"]]},{"id":"d7d06609eb105d27","type":"function","z":"4ad106a4cfadd543","name":"Exhaust","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensoren, die wir nicht überschreiben möchten\nconst targetExhaustSensor = `sensor.ogb_exhauststate_${room}`;\nconst targetDutyCycleSensor = `sensor.ogb_dutycycle_${room}`;\n\n// Funktion zum Finden des Abluft-Zustands\nfunction findExhaustState(sensors, targetSensor) {\n    const exhaustStateObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"exhaust\") ||\n            sensor.entity_id.includes(\"abluft\") ||\n            sensor.entity_id.includes(\"ventilation\") ||\n            sensor.entity_id.includes(\"fan\") ||\n            sensor.entity_id.includes(\"switch\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return exhaustStateObject ? exhaustStateObject.value : null;\n}\n\n// Funktion zum Finden des Dutycycle-Wertes\nfunction findDutyCycleValue(sensors, targetSensor) {\n    const dutyCycleObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"airctr\") ||\n            sensor.entity_id.includes(\"dutycycle\") ||\n            sensor.entity_id.includes(\"cycle\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dutyCycleObject ? dutyCycleObject.value : null;\n}\n\n// Funktion zum Erstellen einer Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden der Sensorwerte\nconst exhaustState = findExhaustState(sensors, targetExhaustSensor);\nconst dutyCycleValue = findDutyCycleValue(sensors, targetDutyCycleSensor);\n\n// Nachrichten erstellen\nlet messages = [];\nif (exhaustState !== null) {\n    messages.push(createMessage(targetExhaustSensor, exhaustState));\n} else {\n    //node.warn(\"Kein gültiger Abluft-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n}\n\nif (dutyCycleValue !== null) {\n    messages.push(createMessage(targetDutyCycleSensor, dutyCycleValue));\n} else {\n    //node.warn(\"Kein gültiger Dutycycle-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n}\n\n// Rückgabe der Nachrichten\nreturn messages;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":920,"wires":[["1ea3df0af8459869"],["1ea3df0af8459869"]]},{"id":"83f8209da434683b","type":"function","z":"4ad106a4cfadd543","name":"Humidifier","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_humidifier_${room}`;\n\n// Funktion zum Finden des Humidifier-Wertes\nfunction findHumidifierValue(sensors, targetSensor) {\n    const humidifierObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"humidifier\") ||\n            sensor.entity_id.includes(\"humidity\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return humidifierObject ? humidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Humidifier-Wertes\nconst humidifierValue = findHumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (humidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(humidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Humidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":960,"wires":[["1ea3df0af8459869"]]},{"id":"b6462402d7fb5db2","type":"function","z":"4ad106a4cfadd543","name":"Dehumidifier","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_dehumidifier_${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor => \n        (sensor.entity_id.includes(\"dehumidifier\") || \n         sensor.entity_id.includes(\"humidity\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":1000,"wires":[["1ea3df0af8459869"]]},{"id":"291baa502230d0d3","type":"function","z":"4ad106a4cfadd543","name":"Cooler","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_cooler_${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"cold\") ||\n            sensor.entity_id.includes(\"cool\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":1040,"wires":[["1ea3df0af8459869"]]},{"id":"5906e2049995721b","type":"function","z":"4ad106a4cfadd543","name":"Heater","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_heater_${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor => \n        (sensor.entity_id.includes(\"heat\") || \n         sensor.entity_id.includes(\"hot\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":1080,"wires":[["1ea3df0af8459869"]]},{"id":"5a89a361e1399ede","type":"function","z":"4ad106a4cfadd543","name":"Pump-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Sensorwertes\nfunction findSensorValue(sensors, filter) {\n    const sensorObject = sensors.find(sensor =>\n        sensor.entity_id.includes(filter)\n    );\n    return sensorObject ? sensorObject.value : null;\n}\n\n// Funktion zum Konvertieren des Sensorwertes in den entsprechenden Typ\nfunction convertType(value, type) {\n    switch (type) {\n        case \"number\":\n            return Number(value);\n        case \"boolean\":\n            return value === \"on\" || value === \"true\";\n        case \"string\":\n            return String(value);\n        default:\n            return value;\n    }\n}\n\n// Filterwerte und zugehörige Typen für die einzelnen Sensoren\nconst filterValues = [\n    { filter: \"pump_nextaction\", type: \"number\" },\n    { filter: \"pump_lefttime\", type: \"number\" },\n    { filter: \"pump_on\", type: \"boolean\" },\n    { filter: \"pump_autorun\", type: \"boolean\" },\n    { filter: \"pump_wateringduration\", type: \"number\" },\n    { filter: \"pump_hours\", type: \"number\" }\n];\n\n// Erstellen eines Arrays von Nachrichten für die verschiedenen Ausgänge\nlet outputMsgs = filterValues.map(item => {\n    const value = findSensorValue(sensors, item.filter);\n\n    if (value === null || value === undefined) {\n        // Node.warn kann verwendet werden, um zu debuggen, falls ein Wert fehlt\n        //node.warn(`Kein gültiger Wert gefunden für Filter: ${item.filter}`);\n        return { payload: null }; // Rückgabe von `null`, um den Wert explizit als nicht verfügbar zu markieren\n    }\n\n    return { payload: convertType(value, item.type) };\n});\n\n// Rückgabe der Nachrichten zur Weiterverarbeitung im Flow\nreturn outputMsgs;\n","outputs":6,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":1200,"wires":[[],[],[],[],[],[]]},{"id":"532da08368c7202c","type":"function","z":"4ad106a4cfadd543","name":"Climate","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_climate_${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"climate\") ||\n            sensor.entity_id.includes(\"klima\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":1120,"wires":[["1ea3df0af8459869"]]},{"id":"f5db36c6af871da6","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":700,"y":600,"wires":[[]]},{"id":"ac62cd9c47f045db","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":700,"y":980,"wires":[[]]},{"id":"b74023821b77b8ee","type":"api-call-service","z":"4ad106a4cfadd543","name":"Setze Helligkeit oder Duty Cycle","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{   \"entity_id\": \"{{payload.data.entity_id}}\",   {{#payload.data.brightness_pct}}   \"brightness_pct\": {{payload.data.brightness_pct}}{{/payload.data.brightness_pct}}   {{^payload.data.brightness_pct}}{{#payload.data.percentage}}   \"percentage\": {{payload.data.percentage}}{{/payload.data.percentage}}{{/payload.data.brightness_pct}} }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1470,"y":260,"wires":[[]]},{"id":"184f9297c204f90a","type":"function","z":"4ad106a4cfadd543","name":"Tank","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\nconst room = msg.room;\n\n// Ziel-Sensor, den wir nicht überschreiben möchten\nconst targetSensor = `sensor.ogb_tank${room}`;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors, targetSensor) {\n    const dehumidifierObject = sensors.find(sensor =>\n        (sensor.entity_id.includes(\"climate\") ||\n            sensor.entity_id.includes(\"klima\")) &&\n        sensor.entity_id !== targetSensor // Ausschließen, wenn der Name mit dem Ziel-Sensor übereinstimmt\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Funktion zum Erstellen der Nachricht\nfunction createMessage(entityId, value) {\n    return {\n        domain: \"opengrowbox\",\n        service: \"update_sensor\",\n        payload: {\n            entity_id: entityId,\n            value: value\n        }\n    };\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors, targetSensor);\n\n// Überprüfen, ob ein Wert gefunden wurde\nif (dehumidifierValue !== null) {\n    // Nachricht erstellen und zurückgeben\n    const message = createMessage(targetSensor, Number(dehumidifierValue));\n    return [message];\n} else {\n    // Keine Aktion erforderlich\n    //node.warn(\"Kein gültiger Dehumidifier-Sensor gefunden oder eingehender Sensorname entspricht dem Ziel-Sensor\");\n    return null;\n}\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":760,"wires":[[]]},{"id":"e964b99777b25b6b","type":"debug","z":"4ad106a4cfadd543","name":"debug 472","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":410,"y":400,"wires":[]},{"id":"376e5c5f3c81f85f","type":"debug","z":"4ad106a4cfadd543","name":"debug 473","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":410,"y":360,"wires":[]},{"id":"7c9afc5ea09e31d3","type":"function","z":"4ad106a4cfadd543","name":"Add Min String","func":"let data = msg.payload\n\nmsg.payload = `${data} Minutes`\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":1140,"wires":[[]]},{"id":"133d9fdea88eaac8","type":"function","z":"4ad106a4cfadd543","name":"Add Sec String","func":"let data = msg.payload\n\nmsg.payload = `${data} Seconds`\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":1180,"wires":[[]]},{"id":"bd8e75a43da59b99","type":"function","z":"4ad106a4cfadd543","name":"set Enable","func":"msg.enable = msg.payload\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":1220,"wires":[[]]},{"id":"cd15ad902a40728c","type":"function","z":"4ad106a4cfadd543","name":"set Enable","func":"msg.enable = msg.payload\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":1260,"wires":[[]]},{"id":"1b0f8eda23cb1d17","type":"function","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"OwnDevices","func":"let mainKey = Object.keys(msg.payload)[0];\nlet data = msg.payload[mainKey]; // Hol die inneren Daten des Raumes\nlet room = msg.topic;\n\n// Funktion, um eine Nachricht im gewünschten Format zu erstellen\nfunction createMessage(entityId, value) {\n    // Sicherstellen, dass der Wert ein String ist\n    let safeValue = typeof value === \"string\" ? value : JSON.stringify(value);\n\n    // Prüfen, ob safeValue ungültig ist (enthält 'ogb_')\n    if (safeValue.includes(\"ogb_\")) {\n        return null; // Filtere ungültige Werte\n    }\n\n    // Rückgabe der korrekt formatierten Nachricht\n    return {\n        domain: \"opengrowbox\",\n        service: \"add_select_options\",\n        payload: {\n            entity_id: entityId,\n            options: [safeValue] // Immer ein Array mit Strings\n        }\n    };\n}\n\n// Array für selektierbare Geräte\nlet deviceMessages = [];\n\n// Hilfsfunktion zur Extraktion der Geräte\nfunction processDevice(key, value) {\n    let lowerKey = key.toLowerCase();\n\n    // OGB-spezifische Filterung: Ausschließen von Schaltern, die mit \"ogb_\" beginnen\n    if (lowerKey.includes(\"switch.\") && lowerKey.includes(\"ogb_\")) {\n        return; // Überspringe diese Schalter\n    }\n\n    if (lowerKey.includes(\"sensor.\") || lowerKey.includes(\"number.\") || lowerKey.includes(\"time.\")) {\n        return; // Überspringe diese Typen\n    }\n\n    // Identifiziere die Geräte und erstelle Nachrichten\n    if (lowerKey.includes(\"switch.\")) {\n        deviceMessages.push(createMessage(`select.ogb_switchselect_${room}`, key));\n    } else if (lowerKey.includes(\"fan.\")) {\n        deviceMessages.push(createMessage(`select.ogb_exhaustselect_${room}`, key));\n    } else if (lowerKey.includes(\"light.\")) {\n        deviceMessages.push(createMessage(`select.ogb_lightselect_${room}`, key));\n    } else if (lowerKey.includes(\"humidifier\")) {\n        deviceMessages.push(createMessage(`select.ogb_humidifierselect_${room}`, key));\n    } else if (lowerKey.includes(\"dehumidifier\")) {\n        deviceMessages.push(createMessage(`select.ogb_dehumidifierselect_${room}`, key));\n    } else if (lowerKey.includes(\"heater\")) {\n        deviceMessages.push(createMessage(`select.ogb_heaterselect_${room}`, key));\n    } else if (lowerKey.includes(\"cooler\")) {\n        deviceMessages.push(createMessage(`select.ogb_coolerselect_${room}`, key));\n    } else if (lowerKey.includes(\"climate.\")) {\n        deviceMessages.push(createMessage(`select.ogb_climateselect_${room}`, key));\n    } else if (lowerKey.includes(\"co2\")) {\n        deviceMessages.push(createMessage(`select.ogb_co2select_${room}`, key));\n    }\n}\n\n// Hauptschleife, um alle Gruppen und Geräte zu durchlaufen\nfor (let group in data) {\n    if (data.hasOwnProperty(group)) {\n        for (let deviceKey in data[group]) {\n            if (data[group].hasOwnProperty(deviceKey)) {\n                let value = data[group][deviceKey];\n                processDevice(deviceKey, value);\n            }\n        }\n    }\n}\n\n// Statusmeldung und Nachrichten einzeln senden\nlet index = 0;\n\n// Nachrichten einzeln senden\ndeviceMessages.forEach((message) => {\n    if (message) { // Prüfe, ob die Nachricht gültig ist\n        index++; // Zähle die gesendeten Nachrichten\n\n        // Statusanzeige in der Node-RED Oberfläche\n        node.status({\n            fill: \"green\",\n            shape: \"dot\",\n            text: `Sende Nachricht ${index}: ${message.payload.entity_id}`\n        });\n\n        // Nachricht senden\n        node.send({\n            ...msg, // Erhalte den ursprünglichen Kontext\n            payload: message.payload, // Überschreibe den Payload\n            domain: message.domain,\n            service: message.service\n        });\n    }\n});\n\n// Status zurücksetzen, wenn alle Nachrichten gesendet wurden\nnode.status({\n    fill: \"green\",\n    shape: \"ring\",\n    text: `${index} Nachrichten gesendet`\n});\n\n// Rückgabe null, um keine weiteren Nachrichten zu senden\nreturn null;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":1460,"wires":[["585ff1a6d924abed"]]},{"id":"585ff1a6d924abed","type":"debug","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"Devices","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":280,"y":1400,"wires":[]},{"id":"f3fa7c8da50ee432","type":"api-call-service","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"Update Selected Device","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.add_select_options","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.entity_id}}\",     \"options\": {{payload.options}} }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"add_select_options","mergecontext":"","x":550,"y":1400,"wires":[[]]},{"id":"c9878f71af57f6c4","type":"api-call-service","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"Update Selected Device","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.add_select_options","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"options\":{{payload.options}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"add_select_options","mergecontext":"","x":550,"y":1460,"wires":[[]]},{"id":"e141c5f654712be3","type":"comment","z":"4ad106a4cfadd543","g":"3c29ef5865ef5803","name":"NotReadyRightNow","info":"","x":330,"y":1340,"wires":[]},{"id":"b1f2d7975d145a5c","type":"function","z":"4ad106a4cfadd543","name":"Create_Action_with_borrow","func":"// Initialisiere die Outputs\nlet outputs = [null, null];\nlet deviceRequests = flow.get(\"deviceRequests\") || [];\nlet ambientDevices = flow.get(\"ambientDevices\") || []; // Neue Liste, um verfügbare Geräte zu verfolgen\nlet devActions = [];\n\n// Sicherstellen, dass die OpenGrowBox-Klasse geladen ist\nconst OpenGrowBox = global.get(\"OpenGrowBox\");\nif (!OpenGrowBox) {\n    return null;\n}\n\n// Instanz für den Raum basierend auf dem Topic abrufen\nlet roomInstance = global.get(msg.topic);\nif (!roomInstance) {\n    return null;\n}\n\n// Falls roomInstance ein Array ist, greife auf das erste Element zu\nif (Array.isArray(roomInstance)) {\n    roomInstance = roomInstance[0];\n}\n\n// Sicherstellen, dass roomInstance die erwarteten Methoden und Eigenschaften besitzt\nif (typeof roomInstance.selectAction !== \"function\" || !roomInstance.devices) {\n    return null;\n}\n\n// Funktion, um die Anforderung an den flow zu setzen\nfunction registerDeviceRequest(deviceName, deviceType, roomName) {\n    const existingRequest = deviceRequests.find(d => d.deviceName === deviceName);\n\n    if (!existingRequest) {\n        deviceRequests.push({\n            deviceName,\n            deviceType,\n            roomName,\n            requestedAt: new Date().toISOString()\n        });\n        flow.set(\"deviceRequests\", deviceRequests);\n    }\n}\n\n// Funktion zur Filterung der Gerätetypen\nfunction isDeviceAllowed(device) {\n    const allowedTypes = [\"climate\", \"humidifier\", \"dehumidifier\", \"heater\", \"switch\", \"fan\"];\n    return allowedTypes.includes(device.deviceType);\n}\n\n// Sicherstellen, dass der Tent-Modus korrekt ist\nfunction isControlSetValid(roomInstance) {\n    return roomInstance.controlSet === \"Ambient\";\n}\n\n// Geräte aus dem ambient-Raum anfordern (andere Räume)\nif (isControlSetValid(roomInstance) && msg.topic !== \"ambient\") {\n    const ambientRoom = global.get(\"ambient\");\n    if (!ambientRoom) {\n        node.error(\"Ambient room instance not found in global context.\");\n        return;\n    }\n\n    // Geräteanforderungen stellen\n    ambientRoom.devices.forEach(device => {\n        if (isDeviceAllowed(device) && !device.isLocked) {\n            roomInstance.borrowDevice(device, roomInstance.tentName);\n        }\n    });\n\n    flow.set(\"deviceRequests\", deviceRequests);\n}\n\n// Geräte zurückgeben\nif (!isControlSetValid(roomInstance) && msg.topic !== \"ambient\") {\n    if (!roomInstance) {\n        node.error(\"Ambient room instance not found in global context.\");\n        return;\n    }\n\n    roomInstance.devices.forEach(device => {\n        if (isDeviceAllowed(device) && device.isLocked) {\n            const offAction = roomInstance.returnDevice(device);\n            if (offAction) {\n                devActions.push(offAction); // Direkt zu devActions hinzufügen\n            }\n        }\n    });\n}\n\n// ambient-Raum: Geräteverarbeitung und Anfragen beantworten\nif (msg.topic === \"ambient\") {\n    // Geräte in der Liste aktualisieren\n    roomInstance.devices.forEach(device => {\n        let isBorrowed = roomInstance.devices.some(d => d.name === device.name);\n        let isInAmbientList = ambientDevices.some(d => d.name === device.name);\n\n        if (!isBorrowed && !device.isLocked && isDeviceAllowed(device) && !isInAmbientList) {\n            ambientDevices.push(device);\n        }\n    });\n\n    flow.set(\"ambientDevices\", ambientDevices);\n\n    // Geräteanforderungen abarbeiten\n    deviceRequests = deviceRequests.filter(request => {\n        const device = ambientDevices.find(d => d.name === request.deviceName);\n        if (device && !device.isLocked) {\n            const requestingRoom = global.get(request.roomName);\n            if (!requestingRoom) {\n                return true; // Behalte die Anfrage, wenn der Raum nicht existiert\n            }\n\n            requestingRoom.borrowDevice(device, roomInstance.tentName);\n\n            const borrowedDevices = global.get(\"borrowedDevices\") || [];\n            borrowedDevices.push(device);\n            global.set(\"borrowedDevices\", borrowedDevices);\n\n            ambientDevices = ambientDevices.filter(d => d.name !== device.name);\n            flow.set(\"ambientDevices\", ambientDevices);\n\n            return false; // Entferne die abgearbeitete Anfrage\n        } else {\n            return true; // Behalte die nicht abgearbeitete Anfrage\n        }\n    });\n\n    flow.set(\"deviceRequests\", deviceRequests);\n\n    // Geräte zurückgeben\n    roomInstance.devices.forEach(device => {\n        if (device.lockedFor === roomInstance.tentName) {\n            const offAction = roomInstance.returnDevice(device);\n            if (offAction) {\n                devActions.push(offAction); // Direkt zu devActions hinzufügen\n            }\n        }\n    });\n}\n\nif(roomInstance.tentMode === \"Disabled\")return null\n\n// Aktionen für den Raum Prüfen und Ausführen\nlet actions;\ntry {\n    if (roomInstance.tentName === \"ambient\" || msg.topic === \"ambient\") return;\n\n    actions = roomInstance.selectAction(roomInstance);\n    if (!actions) {\n        node.warn(\"No actions returned from selectAction method.\");\n        return;\n    }\n} catch (err) {\n    node.warn(\"Error during selectAction.\");\n    return;\n}\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: `Select Action for ${roomInstance.tentName}` });\n\n// Gerätaktionen vorbereiten\nif (actions.deviceActions) {\n    devActions = [...actions.deviceActions, ...devActions]; // Combine deviceActions and offActions\n}\n\n// Debug-Log für alle Aktionen (inklusive OFF_Action_ROOM)\n//node.warn(`Final Combined Actions: ${JSON.stringify(devActions, null, 2)}`);\n\n// Nachrichten für den zweiten Output vorbereiten\nlet messages = [];\n\n// Verarbeitung aller Aktionen für den zweiten Output\nfunction processDeviceActions(actions) {\n    actions.forEach((action) => {\n        if (Array.isArray(action)) {\n            // Rekursion: Bearbeite verschachtelte Arrays\n            processDeviceActions(action);\n        } else if (action && typeof action === \"object\") {\n            // Objekt hinzufügen\n            messages.push({ payload: action });\n        }\n    });\n}\n\n// Verarbeitung aller Aktionen für den zweiten Output\nprocessDeviceActions(devActions);\n\n// Jede Nachricht einzeln an den zweiten Output senden\nmessages.forEach(message => {\n    node.send([null, message]);\n});\n\n// Nachricht für den ersten Output zurückgeben\nconst msg1 = { payload: { ...actions } };\noutputs[0] = msg1;\n\nreturn outputs;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":320,"wires":[["cf1c3b2a7d7a6ed1"],["1f1ed397e3c30251","4b6a8ff776b4d80a"]]},{"id":"48fea790fb90fba4","type":"api-call-service","z":"4ad106a4cfadd543","name":"Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":700,"y":820,"wires":[[]]},{"id":"cf1c3b2a7d7a6ed1","type":"function","z":"4ad106a4cfadd543","name":"ActionLogger","func":"if (msg.payload.tentMode !== \"Unchanged\"){\n    return msg;\n}else{\n    return\n}\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":280,"wires":[["c5a4bb7985db5b7e"]]},{"id":"974cb99a09aa8ce4","type":"debug","z":"4ad106a4cfadd543","name":"debug 478","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":770,"y":180,"wires":[]},{"id":"a5e26993929a4599","type":"debug","z":"4ad106a4cfadd543","name":"debug 479","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":770,"y":120,"wires":[]},{"id":"d4dbed9115a15488","type":"debug","z":"4ad106a4cfadd543","name":"debug 480","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":650,"y":540,"wires":[]},{"id":"cc3f3ed06bb6badf","type":"function","z":"4ad106a4cfadd543","name":"SetzeSelectOption","func":"// Überprüfen, ob die erforderlichen Felder vorhanden sind\nif (!msg.payload.entity_id || !msg.payload.option) {\n    node.error(\"Fehlende entity_id oder option im Payload\");\n    return null;\n}\n\n// Erstellen des neuen Payloads für den Dienstaufruf\nmsg.payload = {\n    domain: \"select\",\n    service: \"select_option\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        option: msg.payload.option // Option korrekt als String belassen\n    }\n};\n\n// Statusmeldung für Debugging-Zwecke\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `Setze ${msg.payload.data.entity_id} auf ${msg.payload.data.option}`\n});\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":520,"wires":[["a497b6a7ac4b8029"]]},{"id":"a497b6a7ac4b8029","type":"api-call-service","z":"4ad106a4cfadd543","name":"Setze Number-Wert","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\",     \"option\": \"{{payload.data.option}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1430,"y":520,"wires":[[]]},{"id":"4b6a8ff776b4d80a","type":"switch","z":"4ad106a4cfadd543","name":"Prüfe Aktion","property":"payload.action","propertyType":"msg","rules":[{"t":"eq","v":"climate","vt":"str"},{"t":"eq","v":"dutycycle","vt":"str"},{"t":"eq","v":"on","vt":"str"},{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"number","vt":"str"},{"t":"eq","v":"select","vt":"str"}],"checkall":"true","repair":false,"outputs":6,"x":870,"y":340,"wires":[["c75c34096c753787"],["8bb461eacaa5cc2d"],["77b47604fac64d57"],["1abe9480672951a4"],["6fd8c24d7450e107"],["cc3f3ed06bb6badf"]]},{"id":"2a541c91b2edba04","type":"switch","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Prüfe Aktion","property":"payload.action","propertyType":"msg","rules":[{"t":"eq","v":"climate","vt":"str"},{"t":"eq","v":"dutycycle","vt":"str"},{"t":"eq","v":"on","vt":"str"},{"t":"eq","v":"off","vt":"str"},{"t":"eq","v":"number","vt":"str"},{"t":"eq","v":"select","vt":"str"}],"checkall":"true","repair":false,"outputs":6,"x":490,"y":360,"wires":[["1f5fe4d6f90331f7"],["5c751838e52317b9"],["3a64bf26e682bab7"],["0d3f1a0acbabae8e"],["57be2e89a4c5946a"],["08dc49d22afd91db"]]},{"id":"d6bca54ccf754d08","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe ON","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"switch.light_veg\",\"action\":\"on\"}","payloadType":"json","x":190,"y":320,"wires":[["2a541c91b2edba04"]]},{"id":"3a64bf26e682bab7","type":"function","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Aktion EIN","func":"const entityType = msg.payload.entity_id.split('.')[0]; // Extrahiere Domain\nmsg.payload = {\n    domain: entityType, // Dynamische Domain (light, switch, fan, etc.)\n    service: \"turn_on\", // Aktion ist \"EIN\"\n    data: {\n        entity_id: msg.payload.entity_id // Entität-ID übergeben\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Turn ON: ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":320,"wires":[["04ba01fcc61d9fc4"]]},{"id":"0d3f1a0acbabae8e","type":"function","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Aktion AUS","func":"const entityType = msg.payload.entity_id.split('.')[0]; // Extrahiere Domain\nmsg.payload = {\n    domain: entityType, // Dynamische Domain (light, switch, fan, etc.)\n    service: \"turn_off\", // Aktion ist \"AUS\"\n    data: {\n        entity_id: msg.payload.entity_id // Entität-ID übergeben\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Turn OFF: ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":380,"wires":[["14a4eaa73e6b6453"]]},{"id":"04ba01fcc61d9fc4","type":"api-call-service","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Schalte EIN","server":"5772bf4c.b461d","version":7,"debugenabled":true,"action":"","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"output_location":"payload","output_location_type":"msg","x":1030,"y":320,"wires":[["d7073a729789afe0"]]},{"id":"14a4eaa73e6b6453","type":"api-call-service","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Schalte AUS","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"output_location":"payload","output_location_type":"msg","x":1030,"y":380,"wires":[["61525fec6bada3b4"]]},{"id":"749d5e2dbe5289a9","type":"api-call-service","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Helligkeit oder Duty Cycle","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{   \"entity_id\": \"{{payload.data.entity_id}}\",   {{#payload.data.brightness_pct}}   \"brightness_pct\": {{payload.data.brightness_pct}}{{/payload.data.brightness_pct}}   {{^payload.data.brightness_pct}}{{#payload.data.percentage}}   \"percentage\": {{payload.data.percentage}}{{/payload.data.percentage}}{{/payload.data.brightness_pct}} }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1090,"y":260,"wires":[["6e90d968be86f209"]]},{"id":"1f5fe4d6f90331f7","type":"function","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Climate Mode","func":"const climateMode = msg.payload.climate_mode || \"heat\";\nmsg.payload = {\n    action: \"climate.set_hvac_mode\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        hvac_mode: climateMode\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set Climate ${msg.payload.data.entity_id} -> to ${climateMode}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":760,"y":200,"wires":[["9ec6703d8253a352"]]},{"id":"9ec6703d8253a352","type":"api-call-service","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Climate Mode","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{    \"entity_id\": \"{{payload.data.entity_id}}\",    \"hvac_mode\": \"{{payload.data.hvac_mode}}\"}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1050,"y":200,"wires":[["7073f75ad2ae1166"]]},{"id":"8fef476bf10e6fcf","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe DutyCycle","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"light.ventvegi\",\"action\":\"dutycycle\",\"dutycycle\":50}","payloadType":"json","x":220,"y":400,"wires":[["2a541c91b2edba04"]]},{"id":"6e35954e90ce2a8a","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe OFF","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"switch.light_veg\",\"action\":\"off\"}","payloadType":"json","x":200,"y":360,"wires":[["2a541c91b2edba04"]]},{"id":"caa148810e754899","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe Climate DRY","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"climate.klima\",\"action\":\"climate\",\"climate_mode\":\"dry\"}","payloadType":"json","x":220,"y":480,"wires":[["2a541c91b2edba04"]]},{"id":"146f25cd91ba67f9","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe DutyCycle","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"light.ventvegi\",\"action\":\"dutycycle\",\"dutycycle\":50}","payloadType":"json","x":220,"y":440,"wires":[["2a541c91b2edba04"]]},{"id":"d1a5a4452c341d20","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe Number Entitiy","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"number.ecruckveggi_dutycycle\",\"action\":\"number\",\"value\":10}","payloadType":"json","x":230,"y":600,"wires":[["2a541c91b2edba04"]]},{"id":"57be2e89a4c5946a","type":"function","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Number-Wert","func":"const value = msg.payload.value || 0;\nmsg.payload = {\n    action: \"number.set_value\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        value: value\n    }\n};\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set Value ${value}: -> ${msg.payload.data.entity_id}` });\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":460,"wires":[["a41029a330095cae"]]},{"id":"a41029a330095cae","type":"api-call-service","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Number-Wert","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{    \"entity_id\": \"{{payload.data.entity_id}}\",    \"value\": {{payload.data.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1050,"y":460,"wires":[["47b7046b0603a181"]]},{"id":"d7073a729789afe0","type":"debug","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"debug 441","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1230,"y":320,"wires":[]},{"id":"61525fec6bada3b4","type":"debug","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"debug 442","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1210,"y":380,"wires":[]},{"id":"f990cbfdf5827615","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe OFF","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"light.ventvegi\",\"action\":\"off\"}","payloadType":"json","x":200,"y":240,"wires":[["2a541c91b2edba04"]]},{"id":"0215c92604836be8","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe ON","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"light.ventvegi\",\"action\":\"on\"}","payloadType":"json","x":190,"y":280,"wires":[["2a541c91b2edba04"]]},{"id":"127435cf61527b56","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Set Sensor State","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"sensor.flowertent_currentvpd\",\"value\":0}","payloadType":"json","x":180,"y":700,"wires":[["7a7518394a08bff3"]]},{"id":"7a7518394a08bff3","type":"function","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Format Payload","func":"msg.domain = \"opengrowbox\";\nmsg.service = \"update_sensor_state\";\nmsg.payload = {\n    entity_id: msg.payload.entity_id,\n    value: msg.payload.value\n};\nnode.status({fill:\"green\",shape:\"ring\",text:`Set ${msg.payload.entity_id} to ${msg.payload.value}`});\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":700,"wires":[["c392b81025eabb2e"]]},{"id":"c392b81025eabb2e","type":"api-call-service","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":" Update Sensor State","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"opengrowbox.update_sensor","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{\"entity_id\":\"{{payload.entity_id}}\",\"value\":{{payload.value}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"opengrowbox","service":"update_sensor","mergecontext":"","x":960,"y":700,"wires":[["490484754f2b8584"]]},{"id":"c0effa66bbe94a36","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe DutyCycle FAN","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"fan.ecruckveggi_exhaust\",\"action\":\"dutycycle\",\"dutycycle\":50}","payloadType":"json","x":230,"y":200,"wires":[["2a541c91b2edba04"]]},{"id":"5c751838e52317b9","type":"function","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Helligkeit oder Duty Cycle","func":"const entityType = msg.payload.entity_id.split('.')[0];\nconst value = msg.payload.dutycycle || 0;\n\nif (entityType === 'light') {\n    msg.payload = {\n        action: \"light.turn_on\",\n        data: {\n            entity_id: msg.payload.entity_id,\n            brightness_pct: value\n        }\n    };\n} else if (entityType === 'fan') {\n    msg.payload = {\n        action: \"fan.set_percentage\",\n        data: {\n            entity_id: msg.payload.entity_id,\n            percentage: value\n        }\n    };\n}\nnode.status({ fill: \"green\", shape: \"dot\", text: `Set new Value ${value}: -> ${msg.payload.data.entity_id}` });\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":790,"y":260,"wires":[["749d5e2dbe5289a9"]]},{"id":"6e90d968be86f209","type":"debug","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"debug 468","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1310,"y":260,"wires":[]},{"id":"7073f75ad2ae1166","type":"debug","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"debug 469","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1250,"y":200,"wires":[]},{"id":"47b7046b0603a181","type":"debug","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"debug 470","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1240,"y":460,"wires":[]},{"id":"490484754f2b8584","type":"debug","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"debug 471","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1190,"y":700,"wires":[]},{"id":"6f8125e2f53a6bda","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe Climate HEAT","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"climate.klima\",\"action\":\"climate\",\"climate_mode\":\"heat\"}","payloadType":"json","x":230,"y":520,"wires":[["2a541c91b2edba04"]]},{"id":"571f573dca265454","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe Climate COOL","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"climate.klima\",\"action\":\"climate\",\"climate_mode\":\"cool\"}","payloadType":"json","x":230,"y":560,"wires":[["2a541c91b2edba04"]]},{"id":"e9fc73b86d447581","type":"link in","z":"f5bdabf9af8c96ce","name":"RoomControl","links":[],"x":65,"y":40,"wires":[["5314127319fcf7f6","a722208129433f6f"]]},{"id":"5314127319fcf7f6","type":"function","z":"f5bdabf9af8c96ce","name":"GetRoomInstance","func":"// Hole den Raumnamen aus `msg.area`\nconst room = msg.topic;\n\n// Lade die Instanz der OpenGrowBox für den Raum\nconst roomInstance = global.get(room);\nif (!roomInstance) {\n    node.warn(`Keine Instanz für Raum ${room} gefunden.`);\n    return null;\n}\nmsg.payload = [roomInstance]\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":40,"wires":[["db68ba785daa6f67"]]},{"id":"a722208129433f6f","type":"debug","z":"f5bdabf9af8c96ce","name":"CollectedRoomData","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":200,"y":80,"wires":[]},{"id":"db68ba785daa6f67","type":"debug","z":"f5bdabf9af8c96ce","name":"RoomInstance","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":390,"y":40,"wires":[]},{"id":"8e9ebbd751394cfd","type":"inject","z":"f5bdabf9af8c96ce","name":"Dynamic Select Options","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"input_select.ogb_lightselect_flowertent\",\"options\":[\"Light_Option1\",\"Light_Option2\"]}","payloadType":"json","x":190,"y":780,"wires":[["e6a4abbf1eea6c83"]]},{"id":"e6a4abbf1eea6c83","type":"function","z":"f5bdabf9af8c96ce","name":"Format Payload","func":"// Extrahiere die entity_id und options aus der Eingabe\nconst entityId = msg.payload.entity_id;\nconst options = msg.payload.options;\n\n// Erstelle die Nutzlast für den Dienstaufruf\nmsg.payload = {\n    entity_id: entityId,\n    options: options\n};\n\n// Setze die Dienstinformationen für Node-RED\nmsg.domain = \"input_select\";\nmsg.service = \"set_options\";\n\n// Statusmeldung für Debugging\nnode.status({\n    fill: \"green\",\n    shape: \"ring\",\n    text: `Updating ${entityId} with ${options.length} options`\n});\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":780,"wires":[["7a3a9c72b445a493"]]},{"id":"7a3a9c72b445a493","type":"api-call-service","z":"f5bdabf9af8c96ce","name":"Update Input Select Options","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"input_select.set_options","data":"{\"entity_id\":\"{{payload.entity_id}}\",\"options\":{{payload.options}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"x":980,"y":780,"wires":[["04fd4aed880bbf33"]]},{"id":"04fd4aed880bbf33","type":"debug","z":"f5bdabf9af8c96ce","name":"Debug Output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","x":1220,"y":780,"wires":[]},{"id":"3542a09bf6efb48a","type":"inject","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Beispiel Eingabe ModeWechsel Humidifier","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"entity_id\":\"select.humidifier_mode\",\"action\":\"select\",\"option\":\"small\"}","payloadType":"json","x":260,"y":160,"wires":[["2a541c91b2edba04"]]},{"id":"08dc49d22afd91db","type":"function","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"SetzeSelectOption","func":"// Überprüfen, ob die erforderlichen Felder vorhanden sind\nif (!msg.payload.entity_id || !msg.payload.option) {\n    node.error(\"Fehlende entity_id oder option im Payload\");\n    return null;\n}\n\n// Erstellen des neuen Payloads für den Dienstaufruf\nmsg.payload = {\n    domain: \"select\",\n    service: \"select_option\",\n    data: {\n        entity_id: msg.payload.entity_id,\n        option: msg.payload.option // Option korrekt als String belassen\n    }\n};\n\n// Statusmeldung für Debugging-Zwecke\nnode.status({\n    fill: \"green\",\n    shape: \"dot\",\n    text: `Setze ${msg.payload.data.entity_id} auf ${msg.payload.data.option}`\n});\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":540,"wires":[["8f8384735fcc7d22"]]},{"id":"8f8384735fcc7d22","type":"api-call-service","z":"f5bdabf9af8c96ce","g":"81caf0ba5f875f89","name":"Setze Number-Wert","server":"5772bf4c.b461d","version":7,"debugenabled":false,"action":"{{payload.action}}","floorId":[],"areaId":[],"deviceId":[],"entityId":[],"labelId":[],"data":"{     \"entity_id\": \"{{payload.data.entity_id}}\",     \"option\": \"{{payload.data.option}}\" }","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"{{payload","service":"action}}","output_location":"payload","output_location_type":"msg","x":1050,"y":540,"wires":[[]]}]