[{"id":"9b276a9f868e2242","type":"tab","label":"Addon-Light","disabled":false,"info":"","env":[]},{"id":"4a76c2a4544d6f38","type":"inject","z":"9b276a9f868e2242","name":"Start","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"15","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"","payloadType":"date","x":110,"y":1280,"wires":[["713f0afbc443d2e7","2fc1be27627040f9","39de9eb8a31ff90c","3ecb99f799c3daa1","b25961e8e55f30e7","adaaa03cc0c5da1b","781778dbcf7bba08","435170d31ffb9c03"]]},{"id":"713f0afbc443d2e7","type":"api-current-state","z":"9b276a9f868e2242","name":"HumVegi DHT Mitte","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.tempvegi_dht11_05_humidity","state_type":"num","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"HumidityVegiMed","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":260,"y":1500,"wires":[["4e0a52a86a1da2e9"]]},{"id":"2fc1be27627040f9","type":"api-current-state","z":"9b276a9f868e2242","name":"VegiTentTop-BMP280","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.ventvegi_bmp280_temperature","state_type":"num","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"TempVegiMedium","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":180,"y":1140,"wires":[["3ce22d5ea1619c55"]]},{"id":"92447998ed1cfc95","type":"join","z":"9b276a9f868e2242","name":"TempAvg","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"4","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"num","reduceFixup":"","x":610,"y":1080,"wires":[["09ac1d5ad5a782ad","cbe1af161aa915c2"]]},{"id":"09ac1d5ad5a782ad","type":"function","z":"9b276a9f868e2242","name":"TEMPAVG","func":"const AvgTemp = (...temps) => {\n    let sum = 0;\n    let count = 0;\n\n    temps.forEach(temp => {\n        if (typeof temp === 'number' && !isNaN(temp)) {\n            sum += temp;\n            count++;\n        } else if (typeof temp === 'string' && !isNaN(parseFloat(temp))) {\n            sum += parseFloat(temp);\n            count++;\n        }\n    });\n\n    if (count === 0) {\n        return \"unavailable\";\n    }\n\n    const avg = sum / count;\n    return avg.toFixed(2);\n};\n\n// Hier extrahieren wir alle Werte aus dem msg.payload Objekt und übergeben sie der AvgTemp Funktion.\nmsg.topic = \"AvgTempData\";\nmsg.payload = AvgTemp(...Object.values(msg.payload).map(value =>\n    value === \"unavailable\" ? NaN : value\n));\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":790,"y":1120,"wires":[["8818fd4442bab11a","cbe1af161aa915c2"]]},{"id":"4e0a52a86a1da2e9","type":"join","z":"9b276a9f868e2242","name":"HumAvg","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"3","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":510,"y":1460,"wires":[["e2cd29daacb0a7bb","69829b2e5ed7d3d6"]]},{"id":"e2cd29daacb0a7bb","type":"function","z":"9b276a9f868e2242","name":"HUMAVG","func":"const AvgHumidity = (...humidities) => {\n    let sum = 0;\n    let count = 0;\n\n    humidities.forEach(humidity => {\n        if (typeof humidity === 'number' && !isNaN(humidity)) {\n            sum += humidity;\n            count++;\n        } else if (typeof humidity === 'string' && !isNaN(parseFloat(humidity))) {\n            sum += parseFloat(humidity);\n            count++;\n        }\n    });\n\n    if (count === 0) {\n        return \"unavailable\";\n    }\n\n    const avg = sum / count;\n    return avg.toFixed(2);\n};\n\n// Hier extrahieren wir alle Werte aus dem msg.payload Objekt und übergeben sie der AvgHumidity Funktion.\nmsg.topic = \"AvgHumData\";\nmsg.payload = AvgHumidity(...Object.values(msg.payload).map(value =>\n    value === \"unavailable\" ? NaN : value\n));\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":680,"y":1460,"wires":[["8818fd4442bab11a","69829b2e5ed7d3d6"]]},{"id":"39de9eb8a31ff90c","type":"api-current-state","z":"9b276a9f868e2242","name":"PressOnPlant","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.ventvegi_bmp280_pressure","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"PressOnPlant","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":340,"y":1360,"wires":[["c3ac7fdd30e9bca2"]]},{"id":"c3ac7fdd30e9bca2","type":"join","z":"9b276a9f868e2242","name":"AvgTempDataPressure","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":610,"y":1360,"wires":[["d8e9bc685d2ade58"]]},{"id":"dd8ad7ce09265fd3","type":"ha-sensor","z":"9b276a9f868e2242","name":"VPDVegi","entityConfig":"5de3d083be69c9ff","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1120,"y":1280,"wires":[[]]},{"id":"8818fd4442bab11a","type":"join","z":"9b276a9f868e2242","name":"AvgTempData","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":740,"y":1280,"wires":[["c3ac7fdd30e9bca2","8d80f96d1f6d10ab"]]},{"id":"d8e9bc685d2ade58","type":"function","z":"9b276a9f868e2242","name":"VPD Calc with Pressure","func":"function calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit, luftDruckInHpa) {\n    // Standardluftdruck bei Meereshöhe in hPa\n    const standardLuftDruck = 1013.25;  // umgerechnet von 101.325 kPa\n\n    // Umwandlung von Celsius in Kelvin ist hier unnötig, da Kelvin nicht verwendet wird,\n    // aber ich lasse es für eventuelle zukünftige Verwendung drin.\n    let luftTempK = luftTemperatur + 273.15;\n    let blattTempK = blattTemperatur + 273.15;\n\n    // Berechnung des ursprünglichen Sättigungsdampfdrucks (SDP) für Lufttemperatur\n    let sdpLuftOriginal = 0.6108 * Math.exp((17.27 * luftTemperatur) / (luftTemperatur + 237.3));\n\n    // Berechnung des ursprünglichen Sättigungsdampfdrucks (SDP) für Blattemperatur\n    let sdpBlattOriginal = 0.6108 * Math.exp((17.27 * blattTemperatur) / (blattTemperatur + 237.3));\n\n    // Anpassung der SDP für den tatsächlichen Luftdruck\n    let sdpLuft = sdpLuftOriginal * (luftDruckInHpa / standardLuftDruck);\n    let sdpBlatt = sdpBlattOriginal * (luftDruckInHpa / standardLuftDruck);\n\n    // Berechnung des tatsächlichen Dampfdrucks (ADP) mit der relativen Luftfeuchtigkeit\n    let adp = (relativeLuftfeuchtigkeit / 100) * sdpLuft;\n\n    // Berechnung des VPD\n    let vpd = sdpBlatt - adp;\n\n    return vpd.toFixed(2);  // Rundet den VPD-Wert auf zwei Dezimalstellen\n}\n\n// Beispiel für die Verwendung der Funktion\nif(msg.payload.AvgTempData){\nlet luftTemperatur = parseFloat(msg.payload.AvgTempData.AvgTempData); // Konvertiere zu einer Zahl\nlet relativeLuftfeuchtigkeit = parseFloat(msg.payload.AvgTempData.AvgHumData); // Konvertiere zu einer Zahl\nlet luftDruckInHpa = parseFloat(msg.payload.PressOnPlant); // Konvertiere zu einer Zahl, wichtig für die Berechnung\nlet blattTemperatur = luftTemperatur - 2; // Keine Notwendigkeit, Math.floor() zu verwenden, es sei denn, Sie möchten explizit abrunden\nlet vpd = calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit, luftDruckInHpa);\nmsg.payload = vpd\nreturn msg;\n}\n\nif(msg.payload.AvgHumData){\nlet luftTemperatur = parseFloat(msg.payload.AvgHumData.AvgTempData); // Konvertiere zu einer Zahl\nlet relativeLuftfeuchtigkeit = parseFloat(msg.payload.AvgHumData.AvgHumData); // Konvertiere zu einer Zahl\nlet luftDruckInHpa = parseFloat(msg.payload.PressOnPlant); // Konvertiere zu einer Zahl, wichtig für die Berechnung\nlet blattTemperatur = luftTemperatur - 2; // Keine Notwendigkeit, Math.floor() zu verwenden, es sei denn, Sie möchten explizit abrunden\nlet vpd = calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit, luftDruckInHpa);\nmsg.payload = vpd\nreturn msg;\n}\n\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":850,"y":1360,"wires":[[]]},{"id":"3ecb99f799c3daa1","type":"api-current-state","z":"9b276a9f868e2242","name":"HumVegi DHT OBEN","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.tempvegi_dht11_00_humidity","state_type":"num","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"HumidityVegiTop","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":260,"y":1440,"wires":[["4e0a52a86a1da2e9"]]},{"id":"b25961e8e55f30e7","type":"api-current-state","z":"9b276a9f868e2242","name":"HumVegi DHT Unten","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.tempvegi_dht11_05_humidity","state_type":"num","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"HumidityVegiDown","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":260,"y":1540,"wires":[["4e0a52a86a1da2e9"]]},{"id":"adaaa03cc0c5da1b","type":"api-current-state","z":"9b276a9f868e2242","name":"DHT11TempOnPlant","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.tempvegi_dht11_05_temperature","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"TempOnPlant","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":300,"y":1300,"wires":[["d227348d5c5d2284"]]},{"id":"d227348d5c5d2284","type":"join","z":"9b276a9f868e2242","name":"TempOnPlant","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"1","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":500,"y":1300,"wires":[["92447998ed1cfc95"]]},{"id":"cbe1af161aa915c2","type":"debug","z":"9b276a9f868e2242","name":"debug 60","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":960,"y":1080,"wires":[]},{"id":"69829b2e5ed7d3d6","type":"debug","z":"9b276a9f868e2242","name":"debug 61","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":860,"y":1420,"wires":[]},{"id":"3ce22d5ea1619c55","type":"function","z":"9b276a9f868e2242","name":"BoxTempReducer","func":"msg.payload = parseFloat((msg.payload - 2).toFixed(2));\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":1140,"wires":[["92447998ed1cfc95"]]},{"id":"781778dbcf7bba08","type":"api-current-state","z":"9b276a9f868e2242","name":"HumVegi DHTOben","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.tempvegi_dht11_00_temperature","state_type":"num","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"TempVegiTop","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":210,"y":1080,"wires":[["92447998ed1cfc95"]]},{"id":"435170d31ffb9c03","type":"api-current-state","z":"9b276a9f868e2242","name":"VegiTentTop-DHT11","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.ventsvegi_dht11_temperature","state_type":"num","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"TempVegiMedium2","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":280,"y":1200,"wires":[["92447998ed1cfc95"]]},{"id":"e94f9cdb82cdcb30","type":"ha-sensor","z":"9b276a9f868e2242","name":"FlowerAVGTemp","entityConfig":"fbd2ef51e597d808","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1090,"y":1200,"wires":[[]]},{"id":"4007fadc9c13622f","type":"ha-sensor","z":"9b276a9f868e2242","name":"VegiAVGHum","entityConfig":"c918d481d80ee2dc","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1100,"y":1340,"wires":[[]]},{"id":"8d80f96d1f6d10ab","type":"function","z":"9b276a9f868e2242","name":"VPD Calc ","func":"function calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit) {\n    // Stellen Sie sicher, dass alle Eingaben Zahlen sind\n    luftTemperatur = parseFloat(luftTemperatur);\n    blattTemperatur = parseFloat(blattTemperatur);\n    relativeLuftfeuchtigkeit = parseFloat(relativeLuftfeuchtigkeit);\n\n    // Überprüfen Sie, ob einer der Werte NaN ist\n    if (isNaN(luftTemperatur) || isNaN(blattTemperatur) || isNaN(relativeLuftfeuchtigkeit)) {\n        return \"unavailable\";\n    }\n\n    // Berechnungen wie zuvor\n    let sdpLuft = 0.6108 * Math.exp((17.27 * luftTemperatur) / (luftTemperatur + 237.3));\n    let sdpBlatt = 0.6108 * Math.exp((17.27 * blattTemperatur) / (blattTemperatur + 237.3));\n    let adp = (relativeLuftfeuchtigkeit / 100) * sdpLuft;\n    let vpd = sdpBlatt - adp;\n\n    return vpd.toFixed(2);\n}\n\n// Beispiel für die Verwendung der Funktion\nlet luftTemperatur = msg.payload.AvgTempData; // Stellen Sie sicher, dass dies eine Zahl ist\nlet blattTemperatur = parseFloat(luftTemperatur) - 2; // Keine Rundung, genaue Berechnung\nlet relativeLuftfeuchtigkeit = msg.payload.AvgHumData; // Stellen Sie sicher, dass dies eine Zahl ist\n\nlet vpd = calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit);\n\nmsg.payload = vpd;\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":920,"y":1280,"wires":[[]]},{"id":"90e7d66de4e646ed","type":"inject","z":"9b276a9f868e2242","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"300","crontab":"","once":true,"onceDelay":"15","topic":"","payload":"","payloadType":"date","x":110,"y":100,"wires":[["ea836fad7734354a"]]},{"id":"dcc4f2b4266ce2c9","type":"ha-sensor","z":"9b276a9f868e2242","name":"DLI","entityConfig":"10a55acc5911459b","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":670,"y":160,"wires":[["f2d5e7c61c28de89"]]},{"id":"75cd81ac71068cbe","type":"ha-sensor","z":"9b276a9f868e2242","name":"PPFDFLower","entityConfig":"c58623d735fb8295","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":670,"y":60,"wires":[["f2d5e7c61c28de89"]]},{"id":"f2d5e7c61c28de89","type":"debug","z":"9b276a9f868e2242","name":"debug 39","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":880,"y":100,"wires":[]},{"id":"b15af587e5fdd218","type":"inject","z":"9b276a9f868e2242","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"300","crontab":"","once":true,"onceDelay":"15","topic":"","payload":"","payloadType":"date","x":110,"y":280,"wires":[["7cea495731d0be12"]]},{"id":"0249561a3fec1f56","type":"ha-sensor","z":"9b276a9f868e2242","name":"DLI","entityConfig":"a5f1cc19016994d1","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":670,"y":340,"wires":[["fa1ac2acc7e0b33d"]]},{"id":"4514863886914953","type":"ha-sensor","z":"9b276a9f868e2242","name":"PPFDVegi","entityConfig":"351be2fcdaadc9bd","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":680,"y":240,"wires":[["fa1ac2acc7e0b33d"]]},{"id":"fa1ac2acc7e0b33d","type":"debug","z":"9b276a9f868e2242","name":"debug 51","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":880,"y":280,"wires":[]},{"id":"34e2ea1867e751f9","type":"function","z":"9b276a9f868e2242","name":"Calculate PPFD / DLI Sanlight","func":"// Beispiel für die Eingangsnachricht: { payload: 250 }\n\nconst maxPower = 380;            // Maximale Leistung in Watt\nconst maxPPFD = 1000;            // Maximaler PPFD bei 380 Watt\n\n// PPFD berechnen basierend auf dem aktuellen Wattwert\nconst ppfd = (msg.payload / maxPower) * maxPPFD;\n\n// PPFD auf zwei Nachkommastellen runden\nconst roundedPPFD = parseFloat(ppfd.toFixed(2));\n\n// Berechnung von DLI\nconst secondsPerHour = 3600;\nconst hoursPerDay = 18; // Anzahl der Stunden pro Tag, die das Licht an ist\nlet dli = roundedPPFD * secondsPerHour * hoursPerDay / 1e6;\n\n// DLI auf zwei Nachkommastellen runden\ndli = parseFloat(dli.toFixed(2));\n\n// Erstellen Sie zwei separate Nachrichtenobjekte für die Ausgänge\nconst msg1 = { payload: roundedPPFD }; // für den ersten Output (PPFD), gerundet auf zwei Nachkommastellen\nconst msg2 = { payload: dli };         // für den zweiten Output (DLI), gerundet auf zwei Nachkommastellen\n\n// Rückgabe der Nachrichten in einem Array, wobei jeder Index dem entsprechenden Output entspricht\nreturn [msg1, msg2];","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":120,"wires":[["1f21fdc068ba4fdd","75cd81ac71068cbe"],["1f21fdc068ba4fdd","dcc4f2b4266ce2c9"]]},{"id":"ea836fad7734354a","type":"api-current-state","z":"9b276a9f868e2242","name":"Power Flower","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.light_energy_power","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":280,"y":100,"wires":[["34e2ea1867e751f9","1f21fdc068ba4fdd"]]},{"id":"1f21fdc068ba4fdd","type":"debug","z":"9b276a9f868e2242","name":"debug 57","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":460,"y":60,"wires":[]},{"id":"d6870c9a6b9ceba0","type":"function","z":"9b276a9f868e2242","name":"Calculate PPFD / DLI GCX4 ","func":"// Der function-Node empfängt eine Nachricht mit einem Watt-Wert\n// Beispiel für die Eingangsnachricht: { payload: 120 } // das entspricht 100% Leistung\n\n// PPF bei 100% Leistung (120 Watt)\nconst fullPowerPPF = 342; // PPF in Mikromol pro Sekunde (μmol/s)\n// Die Fläche, über die der PPF verteilt ist\nconst area = 0.36; // Fläche in Quadratmetern (m²) für eine Fläche von 60x60 cm\n// Maximale Wattzahl für die 100% Leistung\nconst maxWatt = 120;\n// Verlustfaktor (10% Verlust)\nconst lossFactor = 0.9;\n\n// PPFD berechnen basierend auf dem aktuellen Wattwert\nlet ppfd = (msg.payload / maxWatt) * fullPowerPPF / area;\n\n// Berücksichtigung des Verlustes von 10%\nppfd *= lossFactor;\n\n// PPFD auf zwei Nachkommastellen runden\nconst roundedPPFD = parseFloat(ppfd.toFixed(2));\n\n// Berechnung von DLI\nconst secondsPerHour = 3600;\nconst hoursPerDay = 18; // Anzahl der Stunden pro Tag, die das Licht an ist\nlet dli = roundedPPFD * secondsPerHour * hoursPerDay;\n\n// Umrechnung von Mikromol pro Sekunde in Mol pro Tag\ndli /= 1e6;\n\n// DLI auf zwei Nachkommastellen runden\ndli = parseFloat(dli.toFixed(2));\n\n// Erstellen Sie zwei separate Nachrichtenobjekte für die Ausgänge\nconst msg1 = { payload: roundedPPFD }; // für den ersten Output (PPFD), gerundet auf zwei Nachkommastellen\nconst msg2 = { payload: dli };         // für den zweiten Output (DLI), gerundet auf zwei Nachkommastellen\n\n// Rückgabe der Nachrichten in einem Array, wobei jeder Index dem entsprechenden Output entspricht\nreturn [msg1, msg2];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":500,"y":280,"wires":[["ad4ab75f382b18f8","4514863886914953"],["ad4ab75f382b18f8","0249561a3fec1f56"]]},{"id":"ad4ab75f382b18f8","type":"debug","z":"9b276a9f868e2242","name":"debug 58","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":460,"y":240,"wires":[]},{"id":"7cea495731d0be12","type":"api-current-state","z":"9b276a9f868e2242","name":"Power Vegi","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"sensor.light_energy_power_2","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":270,"y":280,"wires":[["d6870c9a6b9ceba0"]]},{"id":"5772bf4c.b461d","type":"server","name":"OpenGrowBox","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true},{"id":"5de3d083be69c9ff","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"vpdVegi","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"vpdVegi"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"pressure"},{"property":"unit_of_measurement","value":"kPa"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"fbd2ef51e597d808","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VegiAVGTemp","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VegiAVGTemp"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"temperature"},{"property":"unit_of_measurement","value":"°C"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"c918d481d80ee2dc","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VegiAVGHum","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VegiAVGHum"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"humidity"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"10a55acc5911459b","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"DLI","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"DLI"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"mol/m²/d"},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false},{"id":"c58623d735fb8295","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"PPFD","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"PPFD"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"µmol/m²s"},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false},{"id":"a5f1cc19016994d1","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"DLIVegi","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"DLIVegi"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"mol/m²/d"},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false},{"id":"351be2fcdaadc9bd","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"PPFD_VEGI","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"PPFDVegi"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"µmol/m²s"},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false}]