[{"id":"fcf3c31407539ca6","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["61d447a8dd2039a2","883e53c619710a5c","d63dfedba31e6c03","d667e426b36be2c9","03170a055dee0c18","bb53d025f4d0e3fa","b0d376be03892225","71bbf76e3992257f","b2cb416cb6617c7b","3f02c178f632f85b","921cb4af51950c56","0a775ad93eb0201a","32558d701303ef20","c3cdc89fea6e66dd","0b48f34fdeeadbd4","09388aae1c81e85e","502bf442461b61cd","42ab596fae23920e","a968aa9eccbf2d79","409a33744f657fd1","2ec8b29e881e1150","20ed8422cf5c2d23","41834d3741e6a772","1124f430fe2c02cc","d062b4edfee7bd40","81252048b9753437","174996762a37d6ac","1cba63e6b0ed1282","ec6f92f6a77bd82b"],"x":768,"y":339,"w":938,"h":1308},{"id":"61d447a8dd2039a2","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiCO2","entityConfig":"3bf46a3f240b688e","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1160,"y":620,"wires":[[]]},{"id":"883e53c619710a5c","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"CO2-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Finden des Objekts, das eine der gewünschten Teilzeichenfolgen im entity_id enthält\nconst co2Object = sensors.find(sensor => \n    sensor.entity_id.includes(\"carbon\") || \n    sensor.entity_id.includes(\"carbondioxide\")\n);\n\n// Extrahieren des Wertes, wenn das Objekt gefunden wurde, sonst null setzen\nconst co2Value = co2Object ? co2Object.value : null;\n\n// Ausgabe des CO2-Wertes zur Überprüfung\n// node.warn(`CO2-Wert: ${co2Value}`);\n\n// Optional: Speichern des CO2-Wertes in msg.co2Value oder einem anderen Feld zur weiteren Verwendung\nmsg.payload = co2Value;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":880,"y":620,"wires":[["61d447a8dd2039a2"]]},{"id":"d63dfedba31e6c03","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Pressure-Get","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Luftdruck-Wertes\nfunction findPressureValue(sensors) {\n    const pressureObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"pressure\") ||\n        sensor.entity_id.includes(\"barometer\") ||\n        sensor.entity_id.includes(\"luftdruck\")\n    );\n    return pressureObject ? pressureObject.value : null;\n}\n\n// Finden des Luftdruck-Wertes\nconst pressureValue = findPressureValue(sensors);\n\n// Ausgabe des Luftdruck-Wertes zur Überprüfung\n// node.warn(`Luftdruck-Wert: ${pressureValue}`);\n\n// Optional: Speichern des Luftdruck-Wertes in msg zur weiteren Verwendung\nmsg.payload = pressureValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":560,"wires":[["921cb4af51950c56"]]},{"id":"d667e426b36be2c9","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Moisture-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Moisture-Wertes\nfunction findMoistureValue(sensors) {\n    const moistureObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"moisture\") ||\n        sensor.entity_id.includes(\"humidity\") ||\n        sensor.entity_id.includes(\"wetness\")\n    );\n    return moistureObject ? moistureObject.value : null;\n}\n\n// Finden des Moisture-Wertes\nconst moistureValue = findMoistureValue(sensors);\n\n// Ausgabe des Moisture-Wertes zur Überprüfung\n// node.warn(`Moisture-Wert: ${moistureValue}`);\n\n// Optional: Speichern des Moisture-Wertes in msg zur weiteren Verwendung\nmsg.payload = moistureValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":380,"wires":[["0a775ad93eb0201a"]]},{"id":"03170a055dee0c18","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"SOIL-EC-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des EC- oder Conductivity-Wertes\nfunction findECValue(sensors) {\n    const ecObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"ec\") ||\n        sensor.entity_id.includes(\"conductivity\")\n    );\n    return ecObject ? ecObject.value : null;\n}\n\n// Finden des EC- oder Conductivity-Wertes\nconst ecValue = findECValue(sensors);\n\n// Ausgabe des EC- oder Conductivity-Wertes zur Überprüfung\n// node.warn(`EC-Wert: ${ecValue}`);\n\n// Optional: Speichern des EC- oder Conductivity-Wertes in msg zur weiteren Verwendung\nmsg.payload = ecValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":500,"wires":[["0b48f34fdeeadbd4"]]},{"id":"bb53d025f4d0e3fa","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"PowerConsum-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Stromverbrauch-Wertes\nfunction findPowerConsumptionValue(sensors) {\n    const powerConsumptionObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"energy_power\") || \n        sensor.entity_id.includes(\"consumption\") || \n        sensor.entity_id.includes(\"watt\") || \n        sensor.entity_id.includes(\"electricity\")\n    );\n    return powerConsumptionObject ? powerConsumptionObject.value : null;\n}\n\n// Finden des Stromverbrauch-Wertes\nconst powerConsumptionValue = findPowerConsumptionValue(sensors);\n\n// Ausgabe des Stromverbrauch-Wertes zur Überprüfung\n// node.warn(`Stromverbrauch-Wert: ${powerConsumptionValue}`);\n\n// Optional: Speichern des Stromverbrauch-Wertes in msg zur weiteren Verwendung\nmsg.payload = powerConsumptionValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":920,"y":800,"wires":[["a968aa9eccbf2d79"]]},{"id":"b0d376be03892225","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Battery-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Batterie-Wertes\nfunction findBatteryValue(sensors) {\n    const batteryObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"battery\") || \n        sensor.entity_id.includes(\"batt\")\n    );\n    return batteryObject ? batteryObject.value : null;\n}\n\n// Finden des Batterie-Wertes\nconst batteryValue = findBatteryValue(sensors);\n\n// Ausgabe des Batterie-Wertes zur Überprüfung\n// node.warn(`Batterie-Wert: ${batteryValue}`);\n\n// Optional: Speichern des Batterie-Wertes in msg zur weiteren Verwendung\nmsg.payload = batteryValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":740,"wires":[["32558d701303ef20"]]},{"id":"71bbf76e3992257f","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Root-Temp-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Root-Temperature-Wertes\nfunction findRootTempValue(sensors) {\n    const rootTempObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"root_temp\") || \n        sensor.entity_id.includes(\"roottemperature\") || \n        sensor.entity_id.includes(\"soiltemp\") || \n        sensor.entity_id.includes(\"root_temp\")\n    );\n    return rootTempObject ? rootTempObject.value : null;\n}\n\n// Finden des Root-Temperature-Wertes\nconst rootTempValue = findRootTempValue(sensors);\n\n// Ausgabe des Root-Temperature-Wertes zur Überprüfung\n// node.warn(`Root-Temperature-Wert: ${rootTempValue}`);\n\n// Optional: Speichern des Root-Temperature-Wertes in msg zur weiteren Verwendung\nmsg.payload = rootTempValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":440,"wires":[["c3cdc89fea6e66dd"]]},{"id":"b2cb416cb6617c7b","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Exhaust-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Abluft-Zustands\nfunction findExhaustState(sensors) {\n    const exhaustStateObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"exhaust\") ||\n        sensor.entity_id.includes(\"abluft\") ||\n        sensor.entity_id.includes(\"ventilation\") ||\n        sensor.entity_id.includes(\"fan\")\n    );\n    return exhaustStateObject ? exhaustStateObject.value : null;\n}\n\n// Funktion zum Finden des Dutycycle-Wertes\nfunction findDutyCycleValue(sensors) {\n    const dutyCycleObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"airctr\") ||\n        sensor.entity_id.includes(\"dutycycle\") ||\n        sensor.entity_id.includes(\"cycle\")\n    );\n    return dutyCycleObject ? dutyCycleObject.value : null;\n}\n\n// Finden des Abluft-Zustands\nconst exhaustState = findExhaustState(sensors);\n\n// Finden des Dutycycle-Wertes\nconst dutyCycleValue = findDutyCycleValue(sensors);\n\n// Ausgabe der Werte zur Überprüfung\n// node.warn(`Abluft-Zustand: ${exhaustState}`);\n// node.warn(`Dutycycle-Wert: ${dutyCycleValue}`);\n\n// Setzen der Outputs\nlet outputs = [\n    { payload: exhaustState }, // Output 1: Zustand (on/off)\n    { payload: dutyCycleValue } // Output 2: Dutycycle\n];\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn outputs;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":980,"wires":[["41834d3741e6a772"],["20ed8422cf5c2d23"]]},{"id":"3f02c178f632f85b","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Humidifier-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Humidifier-Wertes\nfunction findHumidifierValue(sensors) {\n    const humidifierObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"humidifier\") || \n        sensor.entity_id.includes(\"humidity\")\n    );\n    return humidifierObject ? humidifierObject.value : null;\n}\n\n// Finden des Humidifier-Wertes\nconst humidifierValue = findHumidifierValue(sensors);\n\n// Ausgabe des Humidifier-Wertes zur Überprüfung\n// node.warn(`Humidifier-Wert: ${humidifierValue}`);\n\n// Optional: Speichern des Humidifier-Wertes in msg zur weiteren Verwendung\nmsg.payload = humidifierValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":900,"y":1040,"wires":[[]]},{"id":"921cb4af51950c56","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiPressure","entityConfig":"6aeda981e19a8694","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1180,"y":560,"wires":[[]]},{"id":"0a775ad93eb0201a","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiMoisture","entityConfig":"fdc22e77b0c5dbe3","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1180,"y":380,"wires":[["1124f430fe2c02cc"]]},{"id":"32558d701303ef20","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiBatterieDevices","entityConfig":"3f8ce21d326f8670","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1200,"y":740,"wires":[[]]},{"id":"c3cdc89fea6e66dd","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiRootTemp","entityConfig":"68810d13c01a98ba","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1180,"y":440,"wires":[[]]},{"id":"0b48f34fdeeadbd4","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiEC","entityConfig":"0a689f654f6cfecb","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1160,"y":500,"wires":[["1124f430fe2c02cc"]]},{"id":"09388aae1c81e85e","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"LightIntense_GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Licht-Wertes (Lumen oder Lux)\nfunction findLightValue(sensors) {\n    const lightObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"lumen\") || \n        sensor.entity_id.includes(\"lux\") || \n        sensor.entity_id.includes(\"light\") ||\n        sensor.entity_id.includes(\"illuminance\")\n    );\n    return lightObject ? lightObject.value : null;\n}\n\n// Finden des Licht-Wertes\nconst lightValue = findLightValue(sensors);\n\n// Ausgabe des Licht-Wertes zur Überprüfung\n// node.warn(`Licht-Wert: ${lightValue}`);\n\n// Optional: Speichern des Licht-Wertes in msg zur weiteren Verwendung\nmsg.payload = lightValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":680,"wires":[["502bf442461b61cd"]]},{"id":"502bf442461b61cd","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiLightIntense","entityConfig":"d3a9b3e22cb3c349","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1190,"y":680,"wires":[[]]},{"id":"42ab596fae23920e","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Switch-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Switch-Wertes\nfunction findSwitchValue(sensors) {\n    const switchObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"switch\") || \n        sensor.entity_id.includes(\"toggle\")\n    );\n    return switchObject ? switchObject.state : null;\n}\n\n// Finden des Switch-Wertes\nconst switchValue = findSwitchValue(sensors);\n\n// Ausgabe des Switch-Wertes zur Überprüfung\n// node.warn(`Switch-Wert: ${switchValue}`);\n\n// Optional: Speichern des Switch-Wertes in msg zur weiteren Verwendung\nmsg.payload = switchValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":860,"wires":[[]]},{"id":"a968aa9eccbf2d79","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiPowerConsume","entityConfig":"cd5681d147a94f3e","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1200,"y":800,"wires":[[]]},{"id":"409a33744f657fd1","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Vents-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Ventilation-Wertes\nfunction findVentilationValue(sensors) {\n    const ventilationObject = sensors.find(sensor =>\n        sensor.entity_id.includes(\"ventilation\") ||\n        sensor.entity_id.includes(\"fan\") ||\n        sensor.entity_id.includes(\"exhaust\") ||\n        sensor.entity_id.includes(\"airflow\")\n    );\n    return ventilationObject ? ventilationObject.value : null;\n}\n\n// Finden des Ventilation-Wertes\nconst ventilationValue = findVentilationValue(sensors);\n\n// Ausgabe des Ventilation-Wertes zur Überprüfung\n// node.warn(`Ventilation-Wert: ${ventilationValue}`);\n\n// Optional: Speichern des Ventilation-Wertes in msg zur weiteren Verwendung\nmsg.payload = ventilationValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":920,"wires":[[]]},{"id":"2ec8b29e881e1150","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Dehumidifier-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors) {\n    const dehumidifierObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"dehumidifier\") || \n        sensor.entity_id.includes(\"humidity\")\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors);\n\n// Ausgabe des Dehumidifier-Wertes zur Überprüfung\n// node.warn(`Dehumidifier-Wert: ${dehumidifierValue}`);\n\n// Optional: Speichern des Dehumidifier-Wertes in msg zur weiteren Verwendung\nmsg.payload = dehumidifierValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":910,"y":1100,"wires":[[]]},{"id":"20ed8422cf5c2d23","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiExhaustDuty","entityConfig":"ba8566e09903f293","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1190,"y":1000,"wires":[[]]},{"id":"41834d3741e6a772","type":"ha-sensor","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"VeggiExhaustState","entityConfig":"c8a22cfdbd11971c","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1190,"y":940,"wires":[[]]},{"id":"1124f430fe2c02cc","type":"join","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"SoilDataFlower","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","useparts":false,"accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1370,"y":400,"wires":[["ec6f92f6a77bd82b"]]},{"id":"d062b4edfee7bd40","type":"link out","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"SoilDataVeggi","mode":"link","links":["0b16177f66a2192b"],"x":1665,"y":400,"wires":[]},{"id":"81252048b9753437","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Heater-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors) {\n    const dehumidifierObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"dehumidifier\") || \n        sensor.entity_id.includes(\"humidity\")\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors);\n\n// Ausgabe des Dehumidifier-Wertes zur Überprüfung\n// node.warn(`Dehumidifier-Wert: ${dehumidifierValue}`);\n\n// Optional: Speichern des Dehumidifier-Wertes in msg zur weiteren Verwendung\nmsg.payload = dehumidifierValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":1180,"wires":[[]]},{"id":"174996762a37d6ac","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"Cooler-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Dehumidifier-Wertes\nfunction findDehumidifierValue(sensors) {\n    const dehumidifierObject = sensors.find(sensor => \n        sensor.entity_id.includes(\"dehumidifier\") || \n        sensor.entity_id.includes(\"humidity\")\n    );\n    return dehumidifierObject ? dehumidifierObject.value : null;\n}\n\n// Finden des Dehumidifier-Wertes\nconst dehumidifierValue = findDehumidifierValue(sensors);\n\n// Ausgabe des Dehumidifier-Wertes zur Überprüfung\n// node.warn(`Dehumidifier-Wert: ${dehumidifierValue}`);\n\n// Optional: Speichern des Dehumidifier-Wertes in msg zur weiteren Verwendung\nmsg.payload = dehumidifierValue;\n\n// Rückgabe der msg zur Weiterverarbeitung im Flow\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":1140,"wires":[[]]},{"id":"1cba63e6b0ed1282","type":"group","z":"3752d27d7587c957","g":"fcf3c31407539ca6","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["54915a0b42cbb531","b5493a3f55459205","9f481796c50b24ca","f84213a3ac3c506d","eed4272deb53836f","063773e3770ed023","0045e4e34e996967","bb4422cb843fa184","55581d4b6f9bb716","836058dea98edfbb","1b2af9e442403c55","c2dafe1ccb11a237"],"x":794,"y":1239,"w":712,"h":382},{"id":"54915a0b42cbb531","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"Pump-GET","func":"// Zugriff auf das Array im msg.payload\nconst sensors = msg.payload;\n\n// Funktion zum Finden des Sensorwertes\nfunction findSensorValue(sensors, filter) {\n    const sensorObject = sensors.find(sensor =>\n        sensor.entity_id.includes(filter)\n    );\n    return sensorObject ? sensorObject.value : null;\n}\n\n// Funktion zum Konvertieren des Sensorwertes in den entsprechenden Typ\nfunction convertType(value, type) {\n    switch (type) {\n        case \"number\":\n            return Number(value);\n        case \"boolean\":\n            return value === \"on\" || value === \"true\";\n        case \"string\":\n            return String(value);\n        default:\n            return value;\n    }\n}\n\n// Filterwerte und zugehörige Typen für die einzelnen Sensoren\nconst filterValues = [\n    { filter: \"nextpumpingaction\", type: \"number\" },\n    { filter: \"pumpinglefttime\", type: \"number\" },\n    { filter: \"pumpon\", type: \"boolean\" },\n    { filter: \"pumpautorun\", type: \"boolean\" },\n    { filter: \"pumpwatteringduration\", type: \"number\" },\n    { filter: \"pumpinghours\", type: \"number\" }\n];\n\n// Erstellen eines Arrays von Nachrichten für die verschiedenen Ausgänge\nlet outputMsgs = filterValues.map(item => {\n    const value = findSensorValue(sensors, item.filter);\n    // Node.warn kann verwendet werden, um den Wert vor der Umwandlung zu überprüfen\n    //node.warn(`Filter: ${item.filter}, Value: ${value}, Type: ${item.type}`);\n    return { payload: convertType(value, item.type) };\n});\n\n// Rückgabe der Nachrichten zur Weiterverarbeitung im Flow\nreturn outputMsgs;\n","outputs":6,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":890,"y":1360,"wires":[["b5493a3f55459205","55581d4b6f9bb716"],["b5493a3f55459205","836058dea98edfbb"],["b5493a3f55459205","1b2af9e442403c55"],["b5493a3f55459205","c2dafe1ccb11a237"],["b5493a3f55459205","f84213a3ac3c506d"],["b5493a3f55459205","9f481796c50b24ca"]]},{"id":"b5493a3f55459205","type":"debug","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"debug 282","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":930,"y":1460,"wires":[]},{"id":"9f481796c50b24ca","type":"ha-number","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiWateringIntervall","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"48655aeb6b0aa1e8","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1360,"y":1580,"wires":[[]]},{"id":"f84213a3ac3c506d","type":"ha-number","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiWateringDuration","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"e447ef302f778fa1","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1360,"y":1520,"wires":[[]]},{"id":"eed4272deb53836f","type":"ha-switch","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiAutoPump","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"23c38aaab340822f","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1340,"y":1460,"wires":[[],[]]},{"id":"063773e3770ed023","type":"ha-switch","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiPumpOn","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"97a4402c3b7ed861","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1330,"y":1400,"wires":[[],[]]},{"id":"0045e4e34e996967","type":"ha-text","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiNextPumpingIntervall","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"a10204452fe11d95","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1370,"y":1280,"wires":[[]]},{"id":"bb4422cb843fa184","type":"ha-text","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"VeggiPumpingDuration","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"af44ccc93e488cc4","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1360,"y":1340,"wires":[[]]},{"id":"55581d4b6f9bb716","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"Add Min String","func":"let data = msg.payload\n\nmsg.payload = `${data} Minutes`\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1120,"y":1280,"wires":[["0045e4e34e996967"]]},{"id":"836058dea98edfbb","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"Add Sec String","func":"let data = msg.payload\n\nmsg.payload = `${data} Seconds`\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1120,"y":1340,"wires":[["bb4422cb843fa184"]]},{"id":"1b2af9e442403c55","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"set Enable","func":"msg.enable = msg.payload\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":1380,"wires":[["063773e3770ed023"]]},{"id":"c2dafe1ccb11a237","type":"function","z":"3752d27d7587c957","g":"1cba63e6b0ed1282","name":"set Enable","func":"msg.enable = msg.payload\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":1420,"wires":[["eed4272deb53836f"]]},{"id":"48655aeb6b0aa1e8","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiWateringIntervall","version":"6","entityType":"number","haConfig":[{"property":"name","value":"VeggiWateringIntervall"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"Hours"},{"property":"min_value","value":""},{"property":"max_value","value":""},{"property":"step_value","value":""},{"property":"mode","value":"auto"}],"resend":false,"debugEnabled":false},{"id":"e447ef302f778fa1","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiWateringDuration","version":"6","entityType":"number","haConfig":[{"property":"name","value":"VeggiWateringDuration"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"Seconds"},{"property":"min_value","value":20},{"property":"max_value","value":300},{"property":"step_value","value":""},{"property":"mode","value":"auto"}],"resend":false,"debugEnabled":false},{"id":"23c38aaab340822f","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiAutoPump","version":"6","entityType":"switch","haConfig":[{"property":"name","value":"VeggiAutoPump"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"97a4402c3b7ed861","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiPumpOn","version":"6","entityType":"switch","haConfig":[{"property":"name","value":"VeggiPumpOn"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""}],"resend":false,"debugEnabled":false},{"id":"a10204452fe11d95","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiNextPumpingIntervall","version":"6","entityType":"text","haConfig":[{"property":"name","value":"VeggiNextPumpingIntervall"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"mode","value":"text"},{"property":"min_length","value":""},{"property":"max_length","value":""},{"property":"pattern","value":""}],"resend":false,"debugEnabled":false},{"id":"af44ccc93e488cc4","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiPumpingDuration","version":"6","entityType":"text","haConfig":[{"property":"name","value":"VeggiPumpingDuration"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"mode","value":"text"},{"property":"min_length","value":""},{"property":"max_length","value":""},{"property":"pattern","value":""}],"resend":false,"debugEnabled":false},{"id":"5772bf4c.b461d","type":"server","name":"OpenGrowBox","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true},{"id":"ec6f92f6a77bd82b","type":"function","z":"3752d27d7587c957","g":"fcf3c31407539ca6","name":"SetTopic","func":"msg.topic = \"SoilData\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1560,"y":400,"wires":[["d062b4edfee7bd40"]]},{"id":"3bf46a3f240b688e","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiCO2","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiCO2"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"carbon_dioxide"},{"property":"unit_of_measurement","value":"ppm"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"6aeda981e19a8694","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiPressure","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiPressure"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"pressure"},{"property":"unit_of_measurement","value":"kPa"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"fdc22e77b0c5dbe3","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiMoisture","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiMoisture"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"moisture"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"3f8ce21d326f8670","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiBatterieDevices","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiBatterieDevices"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"battery"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"68810d13c01a98ba","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiRootTemp","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiRootTemp"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"temperature"},{"property":"unit_of_measurement","value":"°C"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"0a689f654f6cfecb","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiEC","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiEC"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"µS/cm"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"d3a9b3e22cb3c349","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiLightIntense","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiLightIntense"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":"illuminance"},{"property":"unit_of_measurement","value":"lx"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"cd5681d147a94f3e","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiPowerConsume","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiPowerConsume"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":"power"},{"property":"unit_of_measurement","value":"W"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"ba8566e09903f293","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiExhaustDuty","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiExhaustDuty"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":"battery"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"c8a22cfdbd11971c","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VeggiExhaustState","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiExhaustState"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false}]