[{"id":"b4216bd866b1924a","type":"group","z":"3752d27d7587c957","style":{"stroke":"#999999","stroke-opacity":"1","fill":"none","fill-opacity":"1","label":true,"label-position":"nw","color":"#a4a4a4"},"nodes":["ccdccc414634ff7d","6348b269079bfa32","82a3c89470307c7b","dd1ef50d40a2e8fa","623fb660cf22ede4","66898e3bde87b1c4","b4ffc7429cc6d314","08f0fa9570535866","243e4dc964a7dbf4","128a30397aed36be","2da69194534ed372","68225790c0cb82bc","b1dbc5b52ddb3d1b","c9b790e0fa1dbc49","80b9933fc37e57a6","8d38db5fb60c01a9","91e45ccb74a35800","9e679a1a5777db44","6225380f219a0d41","18a47541cb144519","8efbc7331afa5d51","157fdad538b46545"],"x":634,"y":39,"w":1322,"h":302},{"id":"ccdccc414634ff7d","type":"ha-sensor","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"currentVPD","entityConfig":"5de3d083be69c9ff","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1450,"y":120,"wires":[["c9b790e0fa1dbc49"]]},{"id":"6348b269079bfa32","type":"ha-sensor","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VegiAVGTemp","entityConfig":"fbd2ef51e597d808","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1240,"y":160,"wires":[["8d38db5fb60c01a9"]]},{"id":"82a3c89470307c7b","type":"ha-sensor","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VegiAVGHum","entityConfig":"c918d481d80ee2dc","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1240,"y":220,"wires":[["8d38db5fb60c01a9"]]},{"id":"dd1ef50d40a2e8fa","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VPD Calc ","func":"function calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit) {\n    // Stellen Sie sicher, dass alle Eingaben Zahlen sind\n    luftTemperatur = parseFloat(luftTemperatur);\n    blattTemperatur = parseFloat(blattTemperatur);\n    relativeLuftfeuchtigkeit = parseFloat(relativeLuftfeuchtigkeit);\n\n    // Überprüfen Sie, ob einer der Werte NaN ist\n    if (isNaN(luftTemperatur) || isNaN(blattTemperatur) || isNaN(relativeLuftfeuchtigkeit)) {\n        return NaN; // Geändert von \"unavailable\" zu NaN für bessere Handhabung in numerischen Berechnungen\n    }\n\n    // Berechnungen ohne Rundung\n    let sdpLuft = 0.6108 * Math.exp((17.27 * luftTemperatur) / (luftTemperatur + 237.3));\n    let sdpBlatt = 0.6108 * Math.exp((17.27 * blattTemperatur) / (blattTemperatur + 237.3));\n    let adp = (relativeLuftfeuchtigkeit / 100) * sdpLuft;\n    let vpd = sdpBlatt - adp;\n\n    // Rückgabe als number, nicht als string\n    return parseFloat(vpd.toFixed(2));\n}\n\n// Beispiel für die Verwendung der Funktion\nlet luftTemperatur = parseFloat(msg.payload.AvgData.AvgTempData); // Stellen Sie sicher, dass dies eine Zahl ist\nlet blattTemperatur = parseFloat(msg.payload.AvgData.AvgTempData) - parseFloat(msg.payload.LeafOffSet); // Keine Rundung, genaue Berechnung\nlet relativeLuftfeuchtigkeit = parseFloat(msg.payload.AvgData.AvgHumData); // Stellen Sie sicher, dass dies eine Zahl ist\n\nlet vpd = calculateVPD(luftTemperatur, blattTemperatur, relativeLuftfeuchtigkeit);\n\nmsg.payload = vpd; // Nun ist msg.payload eine Zahl\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1280,"y":120,"wires":[["ccdccc414634ff7d"]]},{"id":"623fb660cf22ede4","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"Calc-AVG","func":"// Funktion zur Berechnung des Durchschnitts\nconst AvgTemp = (temps) => {\n    let sum = 0;\n    let count = 0;\n\n    temps.forEach((entry) => {\n        const temp = parseFloat(entry.value);\n        if (!isNaN(temp)) {\n            sum += temp;\n            count++;\n        }\n    });\n\n    if (count === 0) {\n        return \"unavailable\";\n    }\n\n    const avg = sum / count;\n    return avg.toFixed(2);\n};\n\n// Durchschnittstemperatur für jede Temperaturkategorie berechnen\nconst temperatureAvg = AvgTemp(msg.payload.temperature);\nconst humidityAvg = AvgTemp(msg.payload.humidity);\n\n// Objekt mit den Durchschnittswerten erstellen\nconst avgData = {\n    AvgTempData: temperatureAvg,\n    AvgHumData: humidityAvg\n};\n\n// Nachrichten erstellen und zurückgeben\nconst avgDataMsg = { payload: avgData, topic: \"AvgData\" };\nconst tempMsg = { payload: temperatureAvg, topic: \"AvgTemp\" };\nconst humMsg = { payload: humidityAvg, topic: \"AvgHum\" };\n\nreturn [avgDataMsg, tempMsg, humMsg];\n","outputs":3,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":940,"y":140,"wires":[["9e679a1a5777db44"],["6348b269079bfa32"],["82a3c89470307c7b"]]},{"id":"66898e3bde87b1c4","type":"comment","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VPD-Creation","info":"","x":1150,"y":80,"wires":[]},{"id":"b4ffc7429cc6d314","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"TentModesSetup","func":"// Initialisiert das Array für die Ausgänge mit Nullen\nlet outputs = [null, null, null, null, null ];\n\n// Überprüft den Zustand des eingehenden Payloads und setzt den entsprechenden Ausgang\nif (msg.payload === \"VPD Perfection\") {\n    return [{ payload: msg.payload, topic: \"Perfection\" }, null, null, null,null];\n}\nelse if (msg.payload === \"IN-VPD-Range\") {\n    return [null, { payload: msg.payload, topic: \"AutoAvgVPD\" }, null, null, null];\n}\nelse if (msg.payload === \"Targeted VPD\") {\n    return [null, null, { payload: msg.payload, topic: \"TargetedVPD\" }, null, null];\n}\nelse if (msg.payload === \"CropSteering\") {\n    return [null, null, null, { payload: msg.payload, topic: \"ModeDisabeld\" }, null ];\n}\nelse if (msg.payload === \"Disabled\") {\n    return [null, null, null, null, { payload: msg.payload, topic: \"ModeDisabeld\" }];\n}\n\n// Wenn keine Bedingungen zutreffen, sendet nichts\nreturn [null, null, null, null,null];\n","outputs":5,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1770,"y":200,"wires":[["128a30397aed36be"],["2da69194534ed372"],["68225790c0cb82bc"],["8efbc7331afa5d51"],["08f0fa9570535866"]]},{"id":"08f0fa9570535866","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"DISABLED AUTO","func":"msg.payload=\"DISABLED VEGGI\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1770,"y":260,"wires":[["243e4dc964a7dbf4"]]},{"id":"243e4dc964a7dbf4","type":"debug","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"debug 123","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1770,"y":300,"wires":[]},{"id":"128a30397aed36be","type":"link out","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VPD-Perfektion","mode":"link","links":["a0b3236b810a1d68"],"x":1915,"y":140,"wires":[]},{"id":"2da69194534ed372","type":"link out","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"IN-Range-VPD","mode":"link","links":["7e18ed0416316f92","10975d949b78c673"],"x":1915,"y":180,"wires":[]},{"id":"68225790c0cb82bc","type":"link out","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"TargetedVPD","mode":"link","links":["474c1b1dab6d9b7f","4a116bed2a39fb84","f409e7c8d74372fc"],"x":1915,"y":220,"wires":[]},{"id":"b1dbc5b52ddb3d1b","type":"comment","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"TentModes","info":"","x":1800,"y":140,"wires":[]},{"id":"c9b790e0fa1dbc49","type":"api-current-state","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"TentMode","server":"5772bf4c.b461d","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"select.nodered_f152b5af3096b1e5","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"topic","propertyType":"msg","value":"TentMode","valueType":"str"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1620,"y":120,"wires":[["b4ffc7429cc6d314"]]},{"id":"80b9933fc37e57a6","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"Calc-Dewpoint","func":"// Funktion zur Berechnung des Taupunkts\nconst calculateDewPoint = (temperature, humidity) => {\n    const temp = parseFloat(temperature);\n    const hum = parseFloat(humidity);\n\n    if (isNaN(temp) || isNaN(hum)) {\n        return \"unavailable\";\n    }\n\n    const dewPoint = temp - ((100 - hum) / 5);\n    return parseFloat(dewPoint.toFixed(3));\n};\n\n// Beispielinput\nconst inputData = msg.payload;\n\n// Taupunkt berechnen\nconst temperature = parseFloat(inputData.AvgTemp);\nconst humidity = parseFloat(inputData.AvgHum);\nconst dewPoint = calculateDewPoint(temperature, humidity);\n\n// Taupunkt als Zahl zurückgeben\nmsg.payload = dewPoint;\nreturn msg\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1540,"y":180,"wires":[["91e45ccb74a35800"]]},{"id":"8d38db5fb60c01a9","type":"join","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1390,"y":180,"wires":[["80b9933fc37e57a6"]]},{"id":"91e45ccb74a35800","type":"ha-sensor","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VeggiAVGDewPoint","entityConfig":"bb585a7e9b14d52e","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[{"property":"topic","propertyType":"msg","value":"DryTentDewPoint","valueType":"str"}],"x":1510,"y":220,"wires":[[]]},{"id":"9e679a1a5777db44","type":"join","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1150,"y":120,"wires":[["dd1ef50d40a2e8fa"]]},{"id":"6225380f219a0d41","type":"link in","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"link in 8","links":["f0449f704d2f7c8a"],"x":895,"y":80,"wires":[["18a47541cb144519"]]},{"id":"18a47541cb144519","type":"function","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"Select","func":"let outputs = [null, null];\n\nvar leafMode = msg.payload.GlobalLeafSet;\nvar leafOffSet = msg.payload.LeafOffset;\nvar flowerLeafOffset = msg.payload.FlowerLeafOffset;\nvar veggiLeafOffset = msg.payload.VeggiLeafOffset;\nvar groomLeafOffset = msg.payload.GRoomLeafOffset;\n\n// Logic to set new offset based on leaf mode\nif (leafMode === \"Default\") {\n    outputs[0] = { payload: leafOffSet, topic: \"LeafOffSet\" };\n} else if (leafMode === \"Custom\") {\n    outputs[1] = { payload: veggiLeafOffset, topic: \"LeafOffSet\" };\n}\n\nreturn outputs;  // Return the modified outputs array\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":990,"y":80,"wires":[["9e679a1a5777db44"],["9e679a1a5777db44"]]},{"id":"8efbc7331afa5d51","type":"link out","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"CropSteering","mode":"link","links":[],"x":1915,"y":260,"wires":[]},{"id":"157fdad538b46545","type":"join","z":"3752d27d7587c957","g":"b4216bd866b1924a","name":"VpdNeeds","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":true,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":740,"y":100,"wires":[["623fb660cf22ede4"]]},{"id":"5de3d083be69c9ff","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"vpdVegi","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"vpdVegi"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"pressure"},{"property":"unit_of_measurement","value":"kPa"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"fbd2ef51e597d808","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VegiAVGTemp","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VegiAVGTemp"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"temperature"},{"property":"unit_of_measurement","value":"°C"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"c918d481d80ee2dc","type":"ha-entity-config","server":"5772bf4c.b461d","deviceConfig":"","name":"VegiAVGHum","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VegiAVGHum"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"humidity"},{"property":"unit_of_measurement","value":"%"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"5772bf4c.b461d","type":"server","name":"OpenGrowBox","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true},{"id":"bb585a7e9b14d52e","type":"ha-entity-config","server":"home-assistant-server","deviceConfig":"","name":"VeggiAVGDewPoint","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"VeggiAVGDewPoint"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"diagnostic"},{"property":"device_class","value":"temperature"},{"property":"unit_of_measurement","value":"°C"},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"home-assistant-server","type":"server","name":"Home Assistant","addon":true}]